<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用手机学Go语言</title>
      <link href="/golang/yong-shou-ji-xue-go-yu-yan/"/>
      <url>/golang/yong-shou-ji-xue-go-yu-yan/</url>
      
        <content type="html"><![CDATA[<p>Termux是一个Android下一个高级的终端模拟器,开源且不需要root，支持apt管理软件包，十分方便安装软件包，完美支持Golang、Python、PHP、Ruby、Nodejs、MySQL等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准，用心去打造DIY的话完全可以把手机变成一个强大的极客工具。</p><h3 id="Termux下载安装"><a href="#Termux下载安装" class="headerlink" title="Termux下载安装"></a>Termux下载安装</h3><p>下载地址</p><ul><li>GooglePlay<a href="https://play.google.com/store/apps/details?id=com.termux">下载地址</a></li><li>F-Droid<a href="https://f-droid.org/packages/com.termux/">下载地址</a></li><li>酷安<a href="https://www.coolapk.com/apk/com.termux">下载地址</a></li></ul><blockquote><p>GooglePlay下载的版本比酷安要新，而且插件这块安装也很方便，有能力的朋友建议首先考虑下载GooglePLay版本的，然后考虑F-Droid版本，最后再考虑可怜兮兮的酷安版本。</p></blockquote><p>安装完成后的Termux界面如下：<img src="Termux.jpg" alt="Termux"></p><h3 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h3><p>先用系统自带的编辑工具VI打开源文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span>  <span class="token variable">$PREFIX</span>/etc/apt/sources.list </code></pre><p>按英文字母<code>i</code>可以进入编辑模式，添加如下内容</p><pre class=" language-text"><code class="language-text"># The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main</code></pre><p>修改完成确认无误后按<code>ESC</code>退出VI的编辑模式后输入<code>:wq</code>保存并退出文件。</p><blockquote><p>这个<code>#</code>后面的是注释，你也可以在原内容前面加<code>#</code>注释掉原内容，然后在输入新内容</p></blockquote><p>修改第二个文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> <span class="token variable">$PREFIX</span>/etc/apt/sources.list.d/science.list</code></pre><p>替换或者注释原内容后追加以下内容</p><pre class=" language-text"><code class="language-text"># The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable</code></pre><p>修改第三个文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> <span class="token variable">$PREFIX</span>/etc/apt/sources.list.d/game.list</code></pre><p>修改为一下内容</p><pre class=" language-text"><code class="language-text"># The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable</code></pre><p>或者你也可以用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/<span class="token punctuation">..</span>/usr/etc/apt/</code></pre><p>进入对应文件夹，找到对应文件后用以下命令备份原文件在修改。就算该错了也能复原。文件改名命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> 原文件名 新文件名</code></pre><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><p>修改好以后在终端命令行输入以下命令更新源</p><pre class=" language-bash"><code class="language-bash">pkg update</code></pre><p>出现以下内容代表修改更新完成。</p><pre class=" language-bash"><code class="language-bash">Reading package lists<span class="token punctuation">..</span>. DoneBuilding dependency treeReading state information<span class="token punctuation">..</span>. DoneAll packages are up to date.</code></pre><p>如果你跟我一样英文垃圾，那就上翻译器翻译一下就好。我用的谷歌翻译。记住，只要看不懂，就翻译。</p><h3 id="升级原件包"><a href="#升级原件包" class="headerlink" title="升级原件包"></a>升级原件包</h3><p>用以下命令更新软件包</p><pre class=" language-bash"><code class="language-bash">pkg upgrade</code></pre><p>出现一下内容，基本确定更新完成</p><pre class=" language-bash"><code class="language-bash">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</code></pre><p>我这里是<code>0</code>的地方你那边可能是其它数字，不影响。上面一行的大概意思是更新了几个，成功了几个之类的。</p><h3 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h3><p>接下来安装vim，vim是一款linux系统下的编辑工具，和VI类似，功能据说比VI强大。以后只要涉及到文档编辑的我都是用VIM来完成，包括写GO源代码。</p><pre class=" language-bash"><code class="language-bash">pkg <span class="token function">install</span> vim</code></pre><p>安装完成后，在命令行输入<code>vim</code>回车，只要界面一变，跟终端命令行不一样了，界面类似输入<code>vi</code>后的界面，那就说明安装成功了。<br><img src="vim.jpg" alt="vim界面"></p><h3 id="安装配色方案ohmyzsh"><a href="#安装配色方案ohmyzsh" class="headerlink" title="安装配色方案ohmyzsh"></a>安装配色方案ohmyzsh</h3><p>现在的命令行界面除了黑色就是白色，看着太丑了。接下来就是美化终端命令行，这里用的是OhMyzsh。安装命令如下</p><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh<span class="token variable">)</span></span>"</span>  </code></pre><p>如果因为不可抗力的原因，出现<code>port 443: Connection refused</code>网络超时的情况，那么执行下面的命令即可：</p><pre class=" language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://html.sqlsec.com/termux-install.sh<span class="token variable">)</span></span>"</span>  </code></pre><p>安装过程中会有两次让你输入数字的机会，第一次输<code>14</code>第二次输入<code>6</code>，记得输入完后按回车昂。这两次输入的数字分别选择色彩样式和字体样式，重启Termux app后生效配置。不满意刚刚的效果，想要继续更改配色方案的话，可以根据下面命令来更改对应的色彩配色方案：<br>设置色彩样式：</p><pre class=" language-bash"><code class="language-bash">~/.termux/colors.sh</code></pre><p>设置字体</p><pre class=" language-bash"><code class="language-bash">~/.termux/fonts.sh</code></pre><p>Android6.0 以上会弹框确认是否授权访问文件,点击始终允许授权后 Termux 可以方便的访问SD卡文件。<br><img src="0.png" alt="授权访问SD卡文件"></p><p>手机App默认只能访问自己的数据，如果要访问手机的存储，需要请求权限，如果你刚刚不小心点了拒绝的话，那么可以执行以下命令来重新获取访问权限:</p><pre class=" language-bash"><code class="language-bash">termux-setup-storage</code></pre><h3 id="创建QQ文件夹软目录"><a href="#创建QQ文件夹软目录" class="headerlink" title="创建QQ文件夹软目录"></a>创建QQ文件夹软目录</h3><p>有的时候小伙伴可能会用QQ传一下文件过来，咱们CD过来CD过去很麻烦。那就建立一个快捷方式，又叫软链接目录。CD一次直达QQ文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ</code></pre><h3 id="安装golang编译工具"><a href="#安装golang编译工具" class="headerlink" title="安装golang编译工具"></a>安装golang编译工具</h3><p>接下来就是安装Golang编译工具了。用一下命令安装</p><pre class=" language-bash"><code class="language-bash">pkg <span class="token function">install</span> golang</code></pre><p>出现一下内容说明安装成功</p><pre class=" language-text"><code class="language-text">Setting up golang (2:1.14.3) ...</code></pre><p>或者输入命令：</p><pre class=" language-bash"><code class="language-bash">go version</code></pre><p>出现以下内容说明安装成功</p><pre class=" language-text"><code class="language-text">go version go1.14.3 android/arm64</code></pre><h3 id="创建GO工作目录"><a href="#创建GO工作目录" class="headerlink" title="创建GO工作目录"></a>创建GO工作目录</h3><p>Go工作目录就是我们写golang源代码的目录。以后我们写的所有源代码都是在这个工作目录里面完成。这个工作目录是必须要有的，这一步不能偷懒。因为后面我们写代码要导入一些第三方包或者Go编译器的一下工具都依赖这个工作目录。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/go/src<span class="token function">mkdir</span> ~/go/bin<span class="token function">mkdir</span> ~/go/pkg</code></pre><p>上面三个命令执行完毕，会在<code>~</code>目录下创建一个文件夹<code>go</code>，<code>go</code>文件夹下面有三个文件夹<code>src</code>，<code>bin</code>，<code>pkg</code>。其中<code>src</code>主要存放源代码，包括自己写的和第三方包源代码。<code>bin</code>存放的是编译后的可执行文件，主要是golang编译器的一下小工具。<code>pkg</code>存放的是编译后生成的文件（说句实话，我也不太清楚这个编译后生成的文件是什么意思。但是，这个文件必须得有。）</p><h3 id="修改golqng的环境变量"><a href="#修改golqng的环境变量" class="headerlink" title="修改golqng的环境变量"></a>修改golqng的环境变量</h3><p>首先，在终端命令行输入<code>go env</code>后在回显中仔细的找到<code>GOROOT</code>的内容记下来，等下要用到。大概率你的会和我的一样是：</p><pre class=" language-text"><code class="language-text">GOROOT=/data/data/com.termux/files/usr/lib/go </code></pre><p>然后用vim修改文件<code>~/../usr/etc/profile</code>，文件内的其它东西不要动，在末尾添加以下内容(GOROOT后面的内容就是刚才让你记下来的东西)</p><pre class=" language-text"><code class="language-text"># golang环境设置export GOROOT=/data/data/com.termux/files/usr/lib/go export GOPATH=$HOME/go   export GOBIN=$HOME/go/bin</code></pre><p>其中:</p><ul><li>GOPATH是上一步新建的文件夹go</li><li>GOBIN是新建文件夹go/bin</li><li>GOROOT是运行命令<code>go env</code>后显示的GOROOT内容</li></ul><p>修改完成后重新启动Termux，在终端运行<code>echo $GOROOT</code>，<code>echo $GOPATG</code>, <code>echo $GOBIN</code>验证是否修改成功。<br>然后进入<code>go/src/</code>目录下，新建文件<code>test.go</code>，写入一下代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello Golang"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>运行命令<code>go run test.go</code>显示<code>Hello Golang</code>。</li><li>运行命令<code>go build test.go</code> 后在该文件夹下有<code>test</code>可执行文件，在运行<code>./test</code>后显示<code>Hello Golang</code>。</li><li>运行<code>go install test.go</code>后，在<code>bin</code>文件夹下有<code>test</code>可执行文件，运行<code>./test</code>后显示<code>Hello Golang</code>。</li></ul><p>说明<code>golang</code>环境配置完成。如果不放心，可以把<code>test.go</code>文件拷贝到<code>src</code>文件夹下再次运行<code>go run</code>,<code>go build</code>,<code>go install</code>三组命令。</p><h3 id="安装SpaceVim"><a href="#安装SpaceVim" class="headerlink" title="安装SpaceVim"></a>安装SpaceVim</h3><p>SpaceVim是在原版vim基础上添加一下插件，美化界面。对我们写golqng代码更有好。功能有代码提示，代码补全，自动导入包文件等。安装命令如下：</p><pre class=" language-bash"><code class="language-bash">curl -sLf https://spacevim.org/cn/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>安装过程很是折磨人，我安装了一个下午，每次都是到30%的时候就安装失败。建议挂代理安装。上代理后先运行一下<code>ping baidu.com</code>和<code>ping google.com</code>看一下代理能不能用。我试了3个代理，只有一个能用。谷歌商店安装神马VPN，也就是之前的无码，非常好用。也试过老王VPN，但是开了老王，手机上网没问题，终端ping百度或谷歌都没反应。安装成功后输入命令vim如果是下面这种界面说明安装成功。<br><img src="svim.jpg" alt="svim界面"><br>既然挂上VPN了，那就多下载几个golang辅助库吧，找个能用的代理不容易。</p><pre class=" language-bash"><code class="language-bash">go get -u golang.org/x/tools/go get -u golang.org/x/net/go get -u golang.org/x/text/</code></pre><p>都下载完成后输入vim打开界面后先安装更新一下插件吧。英文键盘输入<code>:SPUpdate</code>然后回车，一定要记得输入冒号<code>:</code>昂。等更新完成后，输入<code>:q!</code>回车退出vim，关闭shell重进一次确保安装成功有效。更新界面如下图<img src="SPUpdate.jpg" alt="SPUpdate"><br>进入<code>go/src/</code>文件夹下面输入<code>vim test.go</code>回车编辑之前咱们的测试代码，在<code>mina()</code>内输入<code>fmt.Println()</code>，嘿嘿，是不是刚输入一个f就卡死了，哈哈哈。如下图：<img src="gopls.jpg" alt="Gopls"><br>强制退出重新进入termux，进入<code>go/src/golang.org/x/tools/</code>下面，找到文件夹<code>gopls</code>文件夹，进入后运行命令</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> install main<span class="token punctuation">.</span><span class="token keyword">go</span></code></pre><p>有<code>gopls.go</code>就</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> install gopls<span class="token punctuation">.</span><span class="token keyword">go</span></code></pre><p>然后进入<code>go/bin/</code>文件夹下面，把刚才生成的可执行文件改名为<code>gopls</code>，当然你要是愿意也能用<code>go build</code>。一定要确保<code>go/bin</code>文件夹下面要有你刚才生成的可执行文件，并且名字一定得是<code>gopls</code>。<br>在用vim打开咱的<code>test.go</code>，如果出现文件错误那就输入<code>d</code>回车或者<code>:wq!</code>回车，然后重新用vim打开测试文件<code>test.go</code>,继续编辑测试代码，输入<code>:w</code>是可能会出现如下情况：<img src="goimports.jpg" alt="goimports"><br>输入<code>:q!</code>退出vim后，再次进入<code>go/src/golang.org/x/tools/</code>文件夹下面,进入<code>cmd</code>文件夹下面，看到这货了吧。运行</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> install <span class="token punctuation">.</span><span class="token operator">/</span>goimports</code></pre><p>然后进入<code>go/bin</code>目录下确保有刚才生成的可执行文件<code>goimports</code>，再次用vim打开测试代码<code>test.go</code>。如果一切顺利的话，那就可以愉快的用手机写Go语言的BUG了。如果还有其它错误，注意仔细看提示，缺啥安装啥就行。一定几点要把可执行文件放在<code>go/bin</code>目录下。如下图：<img src="aaa.jpg" alt="Tools"></p><h3 id="vim和spacevim共存方案"><a href="#vim和spacevim共存方案" class="headerlink" title="vim和spacevim共存方案"></a>vim和spacevim共存方案</h3><p>用vim习惯了，突然用SpaceVim可能会不太习惯，问题不大。首先卸载spacevim，用如下命令：</p><pre class=" language-bash"><code class="language-bash">curl -sLf https://spacevim.org/install.sh <span class="token operator">|</span> <span class="token function">bash</span> -s -- --uninstall</code></pre><p>然后，在<code>.bashrc</code>或者<code>.zshrc</code>中，增加</p><pre class=" language-text"><code class="language-text">alias svim='vim -u ~/.SpaceVim/vimrc'</code></pre><p>使用vim直接启动原版vim，使用svim启动spacevim。</p><blockquote><p>如果找不到.bashrc文件，用<code>ls -a</code>命令可查看隐藏文件。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> golang开发环境 </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flag包命令行参数</title>
      <link href="/golang/flag-bao-ming-ling-xing-can-shu/"/>
      <url>/golang/flag-bao-ming-ling-xing-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Go标准库flag包基础用法"><a href="#Go标准库flag包基础用法" class="headerlink" title="Go标准库flag包基础用法"></a>Go标准库flag包基础用法</h3><p>Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。说白了就是命令行输入命令后面的那个参数的解析。</p><h3 id="os-Args"><a href="#os-Args" class="headerlink" title="os.Args"></a>os.Args</h3><p>如果只是简单的随便带一个参数用<code>os.Args</code>就行。要使用<code>os.Args</code>先引入<code>os</code>包。<code>os.Args</code>是一个<code>[]string</code>字符串切片。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"遍历os.Args切片：\n os.Args[%d]='%s'\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码输入<code>go run main.go abcd bbs</code>后运行结果如下：</p><pre class=" language-bash"><code class="language-bash">☁ go run main.go abcd bbs</code></pre><blockquote><p>遍历os.Args切片：<br> os.Args[0]=’/data/data/com.termux/files/usr/tmp/go-build002182286/b001/exe/main’<br>遍历os.Args切片：<br> os.Args[1]=’abcd’<br>遍历os.Args切片：<br> os.Args[2]=’bbs’</p></blockquote><p><code>os.Args</code>是一个切片，第一个元素也就是索引是<code>0</code>的那个元素保存的是路径，程序所在的路径。其它元素和输入命令时的参数一一对应。比如索引为<code>1</code>的第二个元素就是<code>abcd</code>了。使用方便，简单。功能略少。</p><h3 id="flag包的基本使用"><a href="#flag包的基本使用" class="headerlink" title="flag包的基本使用"></a>flag包的基本使用</h3><p>flag包基本使用：这里简单介绍一下<code>flag</code>包的常用函数和基本使用方法。</p><h4 id="flag支持的数据类型"><a href="#flag支持的数据类型" class="headerlink" title="flag支持的数据类型"></a>flag支持的数据类型</h4><p>flag包支持的命令行参数类型有<code>bool</code>、<code>int</code>、<code>int64</code>、<code>uint</code>、<code>uint64</code>、<code>float</code>、<code>float64</code>、<code>string</code>、<code>duration</code>。具体可以看下表。</p><table><thead><tr><th>flag参数</th><th>有效值</th></tr></thead><tbody><tr><td>字符串flag</td><td>合法字符串</td></tr><tr><td>整数flag</td><td>1234、0664、0x1234等类型，也可以是负数。</td></tr><tr><td>浮点数flag</td><td>合法浮点数</td></tr><tr><td>bool类型flag</td><td>1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False。</td></tr><tr><td>时间段flag</td><td>任何合法的时间段字符串。如”300ms”、”-1.5h”、”2h45m”。合法的单位有”ns”、”us” /“µs”、”ms”、”s”、”m”、”h”。</td></tr></tbody></table><h4 id="定义falg命令行参数"><a href="#定义falg命令行参数" class="headerlink" title="定义falg命令行参数"></a>定义falg命令行参数</h4><p>定义falg命令行参数，有两种常用的定义<code>flag</code>命令行参数的方法</p><h5 id="flag-Type-基本格式如下："><a href="#flag-Type-基本格式如下：" class="headerlink" title="flag.Type()基本格式如下："></a>flag.Type()基本格式如下：</h5><pre class=" language-go"><code class="language-go">flag<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span>flag名<span class="token punctuation">,</span>默认值<span class="token punctuation">,</span>帮助信息<span class="token punctuation">)</span><span class="token operator">*</span>Type</code></pre><p>例如要定义<code>name</code>，<code>age</code>，<code>married</code>，<code>delay</code>四个参数：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"铁锤"</span><span class="token punctuation">,</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>age <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>married <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"married"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"婚否"</span><span class="token punctuation">)</span>delay <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span>1h30m59s<span class="token punctuation">,</span><span class="token string">"时间间隔"</span><span class="token punctuation">)</span></code></pre><p>注意，这里的<code>name</code>,<code>age</code>,<code>married</code>,<code>delay</code>都是对应类型的指针。</p><h5 id="flag-TypeVar"><a href="#flag-TypeVar" class="headerlink" title="flag.TypeVar()"></a>flag.TypeVar()</h5><p><code>flag.TypeVar()</code>定义命令行参数,首先声明一个存储参数数据的变量，然后使用</p><pre class=" language-go"><code class="language-go">flag<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">'Type指针'</span><span class="token punctuation">,</span><span class="token string">'参数名'</span><span class="token punctuation">,</span><span class="token string">'参数默认值'</span><span class="token punctuation">,</span><span class="token string">'帮助信息'</span><span class="token punctuation">)</span></code></pre><p>例如要定义<code>name</code>,<code>age</code>,<code>married</code>,<code>delay</code>等参数：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">var</span> age <span class="token builtin">int</span><span class="token keyword">var</span> married <span class="token builtin">bool</span><span class="token keyword">var</span> delay time<span class="token punctuation">.</span>Durationflag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"二蛋"</span><span class="token punctuation">,</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>married<span class="token punctuation">,</span><span class="token string">"married"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"婚否"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delay<span class="token punctuation">,</span><span class="token string">"delay"</span><span class="token punctuation">,</span>1h30m58s<span class="token punctuation">,</span><span class="token string">"时间间隔"</span><span class="token punctuation">)</span></code></pre><h3 id="命令行参数的解析"><a href="#命令行参数的解析" class="headerlink" title="命令行参数的解析"></a>命令行参数的解析</h3><p>通过以上方法定义好命令行参数以后，需要使用<code>flag.Parse()</code>来对参数解析。支持命令行参数格式有一下几种：</p><ul><li>-flag xxx</li><li>–flag xxx</li><li>-flag=xxx</li><li>–flag=xxx</li></ul><blockquote><p>其中，布尔类型的参数必须使用等号的方式指定。<br>Flag解析在第一个非flag参数（单个”-“不是flag参数）之前停止，或者在终止符”-“之后停止。</p></blockquote><p>完整示例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义命令行参数方式1</span>    <span class="token keyword">var</span> name <span class="token builtin">string</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span>    <span class="token keyword">var</span> married <span class="token builtin">bool</span>    <span class="token keyword">var</span> delay time<span class="token punctuation">.</span>Duration    flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"姓名"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"年龄"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>married<span class="token punctuation">,</span> <span class="token string">"married"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"婚否"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delay<span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"延迟的时间间隔"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//解析命令行参数</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> married<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回命令行参数后的其他参数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回命令行参数后的其他参数个数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回使用的命令行参数个数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">NFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="flag其他函数简单介绍："><a href="#flag其他函数简单介绍：" class="headerlink" title="flag其他函数简单介绍："></a>flag其他函数简单介绍：</h3><ul><li>flag.Args()<br>返回命令行参数后的其他参数，以<code>[]string</code>类型</li><li>flag.NArg()<br>返回命令行参数后的其他参数个数</li><li>flag.NFlag()<br>返回使用的命令行参数个数</li></ul><h3 id="help使用："><a href="#help使用：" class="headerlink" title="help使用："></a>help使用：</h3><pre class=" language-bash"><code class="language-bash">☁  flag  go run main.go -help</code></pre><p>运行结果：</p><blockquote><p>Usage of /data/data/com.termux/files/usr/tmp/go-build113043422/b001/exe/main:<br>  -age int<br>        年龄 (default 18)<br>  -d duration<br>        时间间隔<br>  -married<br>        婚否<br>  -name string<br>        姓名 (default “张三”)<br>exit status 2</p></blockquote><h3 id="正常使用flag参数："><a href="#正常使用flag参数：" class="headerlink" title="正常使用flag参数："></a>正常使用flag参数：</h3><pre class=" language-bash"><code class="language-bash">☁  flag  go run main.go -age 38 --name 二蛋 -married<span class="token operator">=</span>false --d<span class="token operator">=</span>3h18m2s</code></pre><p>运行结果：</p><blockquote><p>二蛋 38 false 3h18m2s<br>[]<br>0<br>4</p></blockquote><h3 id="注意如下写法："><a href="#注意如下写法：" class="headerlink" title="注意如下写法："></a>注意如下写法：</h3><pre class=" language-bash"><code class="language-bash">☁  flag  go run main.go -name aa kdlf skdh -age 20</code></pre><p>运行结果：</p><blockquote><p>aa 18 false 0s<br>[kdlf skdh -age 20]<br>4<br>1</p></blockquote><p>flag在遇到第一个非flag参数时停止解析。所以<code>-name aa</code>能正确识别解析，<code>kdlf</code>是错误的写法，flag不能识别，解析停止，后面的<code>-age 20</code>虽然写法正确，但是不能识别了。</p><p>完整实例代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义命令行参数方式1</span>    <span class="token keyword">var</span> name <span class="token builtin">string</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span>    <span class="token keyword">var</span> married <span class="token builtin">bool</span>    <span class="token keyword">var</span> delay time<span class="token punctuation">.</span>Duration    flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"姓名"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"年龄"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>married<span class="token punctuation">,</span> <span class="token string">"married"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"婚否"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delay<span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"时间间隔"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//解析命令行参数</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> married<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回命令行参数后的其他参数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回命令行参数后的其他参数个数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回使用的命令行参数个数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">NFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> flag包 </tag>
            
            <tag> 命令行参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言文件操作</title>
      <link href="/golang/go-yu-yan-wen-jian-cao-zuo/"/>
      <url>/golang/go-yu-yan-wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="打开和关闭文件"><a href="#打开和关闭文件" class="headerlink" title="打开和关闭文件"></a>打开和关闭文件</h3><p>打开和关闭文件,<code>os.Open()</code>能够打开一个文件，返回<code>*File</code>和<code>err</code>。对得到的文件实例调用<code>close()</code>方法能够关闭文件。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//以只读方式打开文件，相对路径./1.txt</span>    fileobj<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./0.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//输出错误信息</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件读取出错～～\nerr:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册延时关闭</span>    <span class="token keyword">defer</span> fileobj<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>Read方法定义如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><p>它接收一个字节切片，返回读取的字节数和可能的具体错误，读到文件末尾时会返回<code>0</code>和<code>io.EOF</code>。 举个例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 只读方式打开当前目录下的main.go文件</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./main.go"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open file failed!, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用Read方法读取数据</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件读完了"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read file failed, err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"读取了%d字节数据\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="循环读取内容："><a href="#循环读取内容：" class="headerlink" title="循环读取内容："></a>循环读取内容：</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//以只读方式打开文件，相对路径./1.txt</span>    fileobj<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./a.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//输出错误信息</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第17行：文件读取出错～～\nerr:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册延时关闭</span>    <span class="token keyword">defer</span> fileobj<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//读取文件一</span>    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> fileobj<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//文件读取完毕处理</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"文件读取完毕。"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理其它读取错误</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"读取文件出错：\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出读取到的内容</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="bufio按行读取文件"><a href="#bufio按行读取文件" class="headerlink" title="bufio按行读取文件"></a>bufio按行读取文件</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//以只读方式打开文件</span>    fileobj<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"./a.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//处理错误</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件打开出错 \nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册延时关闭文件句柄</span>    <span class="token keyword">defer</span> fileobj<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建一个读取内容的对象</span>    reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>fileobj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//循环读取内容</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//以\n为分割，读取一行</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//读取完毕处理</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理其他读取错误</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件读取出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//输出读取到的内容</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ioutil读取整个文件"><a href="#ioutil读取整个文件" class="headerlink" title="ioutil读取整个文件"></a>ioutil读取整个文件</h4><p><code>io/ioutil</code>包的<code>ReadFile</code>方法能够读取完整的文件，只需要将文件名作为参数传入。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用ioutil包读取文件最简单，给一个文件名就办了</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"./a.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//处理读取错误</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件读取出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出读取到的内容</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p><code>os.OpenFile()</code>函数能够以指定模式打开文件，从而实现文件写入相关功能。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> flag <span class="token builtin">int</span><span class="token punctuation">,</span> perm FileMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>其中：</p><ul><li>name：要打开的文件名</li><li>flag：打开文件的模式。模式具体含义看下表</li><li>perm：文件权限，一个八进制数。r（读）04，w（写）02，x（执行）01。</li></ul><p>flag模式有以下几种：</p><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td><code>os.O_WRONLY</code></td><td><code>只写</code></td></tr><tr><td><code>os.O_CREATE</code></td><td><code>创建文件</code></td></tr><tr><td><code>os.O_RDONLY</code></td><td><code>只读</code></td></tr><tr><td><code>os.O_RDWR</code></td><td><code>读写</code></td></tr><tr><td><code>os.O_TRUNC</code></td><td><code>清空</code></td></tr><tr><td><code>os.O_APPEND</code></td><td><code>追加</code></td></tr></tbody></table><h4 id="文件写入实例："><a href="#文件写入实例：" class="headerlink" title="文件写入实例："></a>文件写入实例：</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打开文件:打开模式读写，创建，追加。</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"./1.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打开文件操作错误处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入文前打开文件操作失败:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册延时关闭文件函数</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//要写入的字符串</span>    str <span class="token operator">:=</span> <span class="token string">"基金半月赔3000块，赔了30% \n"</span>    <span class="token comment" spellcheck="true">//以字节切片方式写入</span>    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//写入结果处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入失败处理</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件写入出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        retuen    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入成功处理</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件写入成功，本次写入[%d]字节。 \n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//字符串方式写入</span>    n<span class="token punctuation">,</span> err <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//写入结果处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入失败</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件写入出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        retuen    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写入成功</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"文件写入成功，本次写入[%d]字节。 \n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="bufio包写文件操作："><a href="#bufio包写文件操作：" class="headerlink" title="bufio包写文件操作："></a>bufio包写文件操作：</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打开文件</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"./1.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_CREATE<span class="token operator">|</span>os<span class="token punctuation">.</span>O_RDWR<span class="token operator">|</span>os<span class="token punctuation">.</span>O_APPEND<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打开文件操作错误处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入文件前打开文件出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注册延时关闭文件函数</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//写入文件</span>    str <span class="token operator">:=</span> <span class="token string">"本公司提示：吸烟有害健康，请勿在禁烟场所吸烟🚬 \n"</span>    <span class="token comment" spellcheck="true">//创建写入缓冲区</span>    data <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//向缓冲区存储要写入的文件</span>    data<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//将缓冲区写入文件</span>    err <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//文件写入操作错误处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入文件出错:\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ioutil包写入操作"><a href="#ioutil包写入操作" class="headerlink" title="ioutil包写入操作"></a>ioutil包写入操作</h4><p><code>ioutil</code>包文件写入，注意，这个方法是<code>清空写入</code>。就是说如果指定的文件已经存在，新写入的文件会覆盖原文件。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//写入文件</span>    str <span class="token operator">:=</span> <span class="token string">"本公司提示：吸烟有害健康，请勿在禁烟场所吸烟🚬 \n"</span>    err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"./1.txt"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"写入文件出错:\nErr:%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="bufiob从标准输入读取"><a href="#bufiob从标准输入读取" class="headerlink" title="bufiob从标准输入读取"></a>bufiob从标准输入读取</h4><p>从用<code>bufio</code>包从标准输入读取内容，类似<code>fmt.Scanln()</code>函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//创建一个从标准输入读取内容的缓冲区</span>    input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//在缓冲区中搜索换行符'\n'，将'\n'之前的内容存储到字符串变量s中</span>    s<span class="token punctuation">,</span> err <span class="token operator">:=</span> input<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//错误处理</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"读取错误: \nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出变量s的内容</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T \nValue:%#v \n"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言包</title>
      <link href="/golang/go-yu-yan-bao/"/>
      <url>/golang/go-yu-yan-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h3><p>我们还可以根据自己的需要创建自己的包。一个包可以简单理解为一个存放<code>.go</code>文件的文件夹。 该文件夹下面的所有go文件都要在代码的第一行添加如下代码，声明该文件归属的包。</p><h3 id="package-包名"><a href="#package-包名" class="headerlink" title="package 包名"></a>package 包名</h3><p>注意事项：</p><ul><li>一个文件夹下面直接包含的文件只能归属一个package，同样一个package的文件不能在多个文件夹下。</li><li>包名可以不和文件夹的名字一样，包名不能包含<code>-</code>符号。</li><li>包名为main的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含main包的源代码则不会得到可执行文件。</li></ul><h3 id="包的可见性"><a href="#包的可见性" class="headerlink" title="包的可见性"></a>包的可见性</h3><p>如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public）。在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。</p><p>举个例子， 我们定义一个包名为pkg2的包，代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> pkg2<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">// 包变量可见性</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true">// 首字母小写，外部包不可见，只能在当前包内使用</span><span class="token comment" spellcheck="true">// 首字母大写外部包可见，可在其他包中使用</span><span class="token keyword">const</span> Mode <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首字母小写，外部包不可见，只能在当前包内使用</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 首字母大写，外部包可见，可在其他包中使用</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 首字母小写，外部包不可见，只能在当前包内使用</span>    <span class="token keyword">var</span> Age <span class="token operator">=</span> <span class="token number">18</span> <span class="token comment" spellcheck="true">// 函数局部变量，外部包不可见，只能在当前函数内使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>结构体中的字段名和接口中的方法名如果首字母都是大写，外部包可以访问这些字段和方法。例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name  <span class="token builtin">string</span> <span class="token comment" spellcheck="true">//可在包外访问的方法</span>    class <span class="token builtin">string</span> <span class="token comment" spellcheck="true">//仅限包内访问的字段</span><span class="token punctuation">}</span><span class="token keyword">type</span> Payer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//仅限包内访问的方法</span>    <span class="token function">Pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可在包外访问的方法</span><span class="token punctuation">}</span></code></pre><h3 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h3><p>要在代码中引用其他包的内容，需要使用<code>import</code>关键字导入使用的包。具体语法如下:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"包的路径"</span></code></pre><p>注意事项：</p><ul><li>import导入语句通常放在文件开头包声明语句的下面。</li><li>导入的包名需要使用双引号<code>""</code>包裹起来。</li><li>包名是从<code>$GOPATH/src/</code>后开始计算的，使用<code>/</code>进行路径分隔。</li><li>Go语言中禁止循环导入包。</li></ul><h4 id="单行导入"><a href="#单行导入" class="headerlink" title="单行导入"></a>单行导入</h4><p>单行导入的格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"包1"</span><span class="token keyword">import</span> <span class="token string">"包2"</span></code></pre><h4 id="多行导入"><a href="#多行导入" class="headerlink" title="多行导入"></a>多行导入</h4><p>多行导入的格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"包1"</span>    <span class="token string">"包2"</span><span class="token punctuation">)</span></code></pre><h3 id="自定义包名"><a href="#自定义包名" class="headerlink" title="自定义包名"></a>自定义包名</h3><p>在导入包名的时候，我们还可以为导入的包设置别名。通常用于导入的包名太长或者导入的包名冲突的情况。具体语法格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> 别名 <span class="token string">"包的路径"</span></code></pre><p>单行导入方式定义别名：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">import</span> m <span class="token string">"github.com/Q1mi/studygo/pkg_test"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Mode<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>多行导入方式定义别名：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    m <span class="token string">"github.com/Q1mi/studygo/pkg_test"</span> <span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Mode<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="匿名导入包"><a href="#匿名导入包" class="headerlink" title="匿名导入包"></a>匿名导入包</h4><p>如果只希望导入包，而不使用包内部的数据时，可以使用匿名导入包。具体的格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"包的路径"</span></code></pre><p>匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中。</p><h3 id="init-初始化函数"><a href="#init-初始化函数" class="headerlink" title="init()初始化函数"></a>init()初始化函数</h3><h4 id="init-函数介绍"><a href="#init-函数介绍" class="headerlink" title="init()函数介绍"></a>init()函数介绍</h4><p>在Go语言程序执行时导入包语句会自动触发包内部<code>init()</code>函数的调用。<br>需要注意的是：</p><ul><li>init()函数没有参数也没有返回值。</li><li>init()函数在程序运行时自动被调用执行，不能在代码中主动调用它。</li></ul><p>包初始化执行的顺序如下图所示：<img src="init01.png" alt="包中的init()执行时机"></p><h4 id="init-函数执行顺序"><a href="#init-函数执行顺序" class="headerlink" title="init()函数执行顺序"></a>init()函数执行顺序</h4><p>Go语言包会从main包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。</p><p>在运行时，被最后导入的包会最先初始化并调用其<code>init()</code>函数， 如下图示：<img src="init02.png" alt="导入包顺序"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言函数</title>
      <link href="/golang/go-yu-yan-han-shu/"/>
      <url>/golang/go-yu-yan-han-shu/</url>
      
        <content type="html"><![CDATA[<p>函数是组织好的、可重复使用的、用于执行指定任务的代码块。Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”。</p><h3 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数<span class="token number">1</span> 数据类型<span class="token punctuation">,</span> 参数<span class="token number">2</span> <span class="token operator">...</span>数据类型<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回值<span class="token number">1</span> 数据类型<span class="token punctuation">,</span> 返回值<span class="token number">2</span> 数据类型<span class="token punctuation">)</span> <span class="token punctuation">{</span>    函数内部代码    <span class="token operator">...</span>    deder 延迟执行语句    <span class="token keyword">return</span> 变量名或者数值<span class="token punctuation">}</span></code></pre><p>其中：</p><ul><li>函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名（包的概念详见后文）。</li><li>参数：参数由参数变量和参数变量的类型组成，多个参数之间使用<code>,</code>分隔。</li><li>返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用<code>()</code>包裹，并用<code>,</code>分隔。</li><li>函数体：实现指定功能的代码块。</li></ul><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p>使用<code>函数名()</code>调用函数，有返回值的函数可以不接收返回值。</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>参数：参数支持简写<code>func 函数名 (参数1,参数2 数据类型, 参数3 ...数据类型) {}</code>。参数和数据类型中间隔一个空格。<code>...数据类型</code>叫可变参数，也有人叫<code>解包</code>。可变参数一定要放在固定参数的末尾，也就是说如果需要可变参数，那么它一定是在最后一个。一个函数仅支持一个可变参数。可变参数在函数内部是一个切片。看下列：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"可变参数类型:[%T] \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用函数<code>add()</code>后运行结果如下：</p><blockquote><p>可变参数类型:[[]int]<br>[]int{1, 2, 3, 4, 5}</p></blockquote><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>返回值：使用<code>return</code>关键字向外输出返回值，一个函数可以没有返回值。在声明函数时命名过的返回值在函数内部可以直接使用，不需要在函数内部再次声明。当一个返回一个切片时，<code>nil</code>可以看做是一个有效的切片，没必要返回一个长度为0的切片<code>[]int{}</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">someFunc</span><span class="token punctuation">(</span>x <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment" spellcheck="true">// 没必要返回[]int{}</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="变量左右域"><a href="#变量左右域" class="headerlink" title="变量左右域"></a>变量左右域</h3><p>变量作用域–全局变量是定义在函数(<code>func main()</code>也是一个函数)之外的变量，他在整个运行周期都有效。在函数中可以访问到全局变量。如果全局变量和函数内部的变量重名，将优先使用函数内部的变量。另外函数访问不到其他函数内部的变量。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">99</span><span class="token comment" spellcheck="true">//函数f2</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span>f2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//变量f2在这里</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数f1</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fmt.Printf(" f2:%v \n", f2)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:%v b:%v c:%v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用函数f1。其中参数a=1 b=2</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行效果如下：</p><blockquote><p>a:1 b:2 c:99</p></blockquote><p>同一级别并列的<code>{}</code>的变量不能互相识别，但是包含在<code>{}</code>内部的<code>{}</code>内的变量从内向外识别，入下例<code>if</code>，<code>for</code>，<code>switch</code>中的变量不能互相识别，但是可以识别到函数变量或者全局变量。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">var</span> quanju1 <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">var</span> quanju2 <span class="token operator">=</span> <span class="token number">99</span><span class="token comment" spellcheck="true">//函数f1</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//例一：for内部可识别范围</span>    <span class="token keyword">for</span> b <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> b<span class="token operator">++</span> <span class="token punctuation">{</span>        for_a <span class="token operator">:=</span> <span class="token number">99</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quanju1<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> for_a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//if内部不能识别for内部变量'for_a'</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        if_a <span class="token operator">:=</span> <span class="token number">66</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quanju1<span class="token punctuation">,</span> a<span class="token punctuation">,</span> if_a<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// fmt.Println(for_a)</span>        <span class="token comment" spellcheck="true">// fmt.Println(b)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//if从内到外识别</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        for_b <span class="token operator">:=</span> <span class="token number">998</span>        <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>quanju1<span class="token punctuation">,</span> a<span class="token punctuation">,</span> for_b<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// fmt.Println(if_a)</span>            <span class="token comment" spellcheck="true">// fmt.Println(for_a)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用函数f1。其中参数a=1</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="defer延迟执行"><a href="#defer延迟执行" class="headerlink" title="defer延迟执行"></a>defer延迟执行</h3><p><code>defer</code>延迟时机，<code>defer</code>后面的语句会在函数执行完毕真正返回之前执行。一个函数可以有多个<code>defer</code>语句，多个<code>defer</code>语句按照先进后出执行。如下例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><blockquote><p>start<br>end<br>3<br>2<br>1</p></blockquote><p>在Go语言的函数中<code>return</code>语句在底层并不是原子操作，它分为给返回值赋值和<code>RET</code>指令两步。而<code>defer</code>语句执行的时机就在返回值赋值操作后，<code>RET</code>指令执行前。具体看下图：<img src="defer.png" alt="defer执行时机"><br>具体可以看下例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token number">5</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span></code></pre><p>上面代码先看函数的返回值，这是一个未命名返回值的函数，可以把他的返回值想象成<code>z</code>，然后看函数体<code>x := 5</code>，接下来就是一个<code>defer</code>，跳过<code>defer</code>看返回语句<code>return x</code>，这句可以理解成<code>z = x; defer;  return</code>，现在返回值<code>z</code>变成<code>5</code>了。回过头再来看那一句<code>defer</code>语句里面有个<code>x++</code>，返回值<code>z</code>已经是<code>5</code>了，那个<code>x++</code>和返回值<code>z</code>没关系了。在下一句就是就是<code>return</code>了，所以这个函数返回的是5。在看下面的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre><p>这个函数是命名返回值的函数，记住他的返回值是<code>x</code>。然后看函数体没其它语句，上来就是一个<code>defer</code>，先跳过看最后的<code>return 5</code>，一样先翻译一下<code>x = 5; defer; return</code>，这样比较容易理解，现在的返回值是<code>x</code>，再来看<code>defer</code>语句，<code>x++</code>也就是<code>6</code>了，现在的返回值<code>x</code>是6昂。在然后就是真的的<code>return</code>了，所以这个函数返回6。下面是全部代码，懒得打字了：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token number">5</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token number">5</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>还要记住一点，函数传参数，穿的是副本。修改传到函数内部的参数，并不会影响之前的本体。</p><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数类型：函数也是一种数据类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> add    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果显示，变量<code>a</code>的数据类型是<code>func(int, int)</code>。</p><h3 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h3><p>定义函数类型：使用关键字<code>type</code>定义函数类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> hanshu <span class="token keyword">func</span><span class="token punctuation">(</span>参数类型<span class="token number">1</span><span class="token punctuation">,</span>参数类型<span class="token number">2</span><span class="token punctuation">)</span> 返回值类型</code></pre><p>来声明一个类型<code>hanshu</code>，他有两个<code>int</code>参数和一个<code>int</code>返回值。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> hanshu <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span></code></pre><h3 id="使用函数类型"><a href="#使用函数类型" class="headerlink" title="使用函数类型"></a>使用函数类型</h3><p>使用函数类型：要使用<code>hanshu</code>类型首先要有符和它的函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>然后声明一个<code>hanshu</code>类型的变量<code>c</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> c hanshu</code></pre><p>为变量<code>c</code>赋值一个函数，这个函数要符号<code>hanshu</code>类型的要求，两个<code>int</code>参数和一个<code>int</code>返回值</p><pre class=" language-go"><code class="language-go">c <span class="token operator">=</span> add</code></pre><p>接下来就该使用这个<code>hanshu</code>类型的变量<code>c</code>了，使用它和使用函数的方法一样，看起来只是把函数的名字换成了变量名。额～～～饶了一大圈，并没什么卵用啊～～～</p><pre class=" language-go"><code class="language-go"><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>这里查看一下变量<code>c</code>的数据类型显示为</p><blockquote><p>main.hanshu</p></blockquote><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span></code></pre><p>下面是全部代码：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义一个类型'hanshu'它有两个'int'参数和一个'int'返回值</span><span class="token keyword">type</span> hanshu <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment" spellcheck="true">//add函数符合hanshu类型</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//sub函数符合hanshu类型</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明一个类型为'hanshu'的变量'c'</span>    <span class="token keyword">var</span> c hanshu    <span class="token comment" spellcheck="true">//为变量c赋值一个符合类型'hanshu'的函数add</span>    c <span class="token operator">=</span> add    <span class="token comment" spellcheck="true">//输出并使用变量变量c，c的类型是'hanshu'</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//看起来好像只是把'add'函数改了个名字～～～</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//查看变量'c'的数据类型，显示为'main.hanshu'</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//再把变量c赋值一个sub函数</span>    c <span class="token operator">=</span> sub    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果配合<code>switch</code>倒是能少写点代码～～～～～～</p><h3 id="函数类型可以作为函数参数"><a href="#函数类型可以作为函数参数" class="headerlink" title="函数类型可以作为函数参数"></a>函数类型可以作为函数参数</h3><p>函数类型可以作为参数使用,在声明函数的时候写明要传进来的函数具体类型，入下例第三个参数运行传入一个函数，要求传入的这个函数有两个<code>int</code>参数和一个<code>int</code>返回值。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//第三个参数'z'允许传入一个函数。</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> z <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用当做参数传进来的函数。</span>    <span class="token function">z</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token function">z</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直接把函数'sub'函数当做参数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="函数类型作为函数返回值"><a href="#函数类型作为函数返回值" class="headerlink" title="函数类型作为函数返回值"></a>函数类型作为函数返回值</h3><p>也可以把函数当做返回值来使用：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义该函数的返回值是函数类型</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"我是add"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回函数'dayin()'</span>    <span class="token keyword">return</span> dayin<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dayin</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token string">"打印"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token string">"打印"</span> <span class="token operator">+</span> s    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调用函数'dayin()'</span>    <span class="token function">dayin</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//调用函数'add()'后在调用它返回的函数</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"add()()"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数，匿名函数就是一个没有名字的函数，一般用在函数内部。一般来说在函数内部不能声明一个正常的函数，但是可以调用函数，既然不能声明正常函数，那就是说可以声明不正常的函数，也就是匿名函数。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在函数内部声明函数的办法</span>    <span class="token keyword">var</span> ff <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//调用在函数内部声明的函数</span>    <span class="token function">ff</span><span class="token punctuation">(</span><span class="token string">"匿名函数"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量ff的类型：%T \n"</span><span class="token punctuation">,</span> ff<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>上面代码就这<code>main()</code>函数内部声明了一个函数，并成功的调用了这个函数。这个函数可以多次调用，当然也可以定义一个只用一次的函数，用一次就不再使用了，就销毁了。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在函数内部声明函数的办法，这个函数立即执行，只能使用一次</span>    <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">"立即执行的匿名函数，只能使用一次。"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>先看下面这个列子，这个函数返回一个没有参数没有返回值的函数。如果仅调用这个函数<code>add()</code>只会执行<code>fmt.Println("add")</code>这一行代码，也就是说只会输出<code>add</code>。因为他的返回值是一个函数，所以要想执行<code>fmt.Println("aaa")</code>的话，必须这样调用<code>add()()</code>。或者先用一个变量接收他的返回值<code>add_fanhui</code>，然后在用<code>add_fanhui()</code>的方式输出<code>aaa</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    add_fanhui <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add_fanhui数据类型：%T \n"</span><span class="token punctuation">,</span> add_fanhui<span class="token punctuation">)</span>    <span class="token function">add_fanhui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可能会觉得上面这种写法不好理解，如果把函数<code>add()</code>返回的那个函数重新写成一个函数，并起一个民那个字，<code>return xxx</code>会更直观更好理解。其实这样写是迫不得已，看下面的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"add"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">:=</span> <span class="token string">"add2"</span> <span class="token operator">+</span> s        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果分成两个函数写的话，变量<code>b</code>就拿不到变量<code>s</code>的数据了。想想函数变量的作用域。两个函数属于并列关系，都拿不到对方的变量数据，而现在这种不好理解的写法，属于包含关系，所以返回的那个函数可以拿到属于函数<code>add()</code>中变量<code>s</code>的数据。<br>这个函数返回一个没有参数没有返回值的函数<br>如果仅调用这个函数<code>add()</code>只会执行<code>fmt.Println("add")</code>这一行代码，也就是说只会输出<code>add</code><br>因为他的返回值是一个函数，所以要想执行<code>fmt.Println("aaa")</code>的话，必须这样调用<code>add()()</code>。或者先用一个变量接收他的返回值<code>add_fanhui</code>，然后在用<code>add_fanhui()</code>的方式输出<code>aaa</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    add_fanhui <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add_fanhui数据类型：%T \n"</span><span class="token punctuation">,</span> add_fanhui<span class="token punctuation">)</span>    <span class="token function">add_fanhui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可能会觉得上面这种写法不好理解，如果把函数<code>add()</code>返回的那个函数重新写成一个函数，并起一个民那个字，<code>return xxx</code>会更直观更好理解。其实这样写是迫不得已，看下面的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"add"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">:=</span> <span class="token string">"add2"</span> <span class="token operator">+</span> s        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果分成两个函数写的话，变量<code>b</code>就拿不到变量<code>s</code>的数据了。想想函数变量的作用域。两个函数属于并列关系，都拿不到对方的变量数据，而现在这种不好理解的写法，属于包含关系，所以返回的那个函数可以拿到属于函数<code>add()</code>中变量<code>s</code>的数据。还是上面的代码稍微改一下，改成下面这种，原理一样只是改成带参数。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// a = 0</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"add函数内变量a:[%d] a地址：[%v] \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"返回的匿名函数内a:[%d] a的地址[%v]--1 \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>        a <span class="token operator">+=</span> y        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"返回的匿名函数内a:[%d] a的地址[%v]--2 \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    aa <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0</span>    <span class="token comment" spellcheck="true">// fmt.Printf("%T", aa)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//0----1-[1]</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1----6-[6]</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6----6-[6]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这种方式调用匿名函数会重置变量'a'的数据</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们会发现，返回的这个匿名函数永远会包括这个变量<code>a</code>，仔细观察每次输出的变量<code>a</code>的内存地址，只有第一次匿名函数拿到的变量<code>a</code>的内存地址和<code>add()</code>函数内部变量<code>a</code>的内存地址一样，后面在调用<code>add()</code>的话，add内的变量a会换另一个内存地址。我也不知道怎么表达了，总计一下就是，匿名函数包括函数体和他第一次拿到的那个变量<code>a</code>，但是不包括下一次调用<code>add()</code>时的变量<code>a</code>。其主要原因在于<code>aa := add(1)</code>这一句，<code>aa</code>拿到的是<code>add()</code>返回的匿名函数的内存地址，这个返回的匿名函数的内存地址包括了<code>add()</code>内变量<code>a</code>，所以只要<code>aa</code>拿到的这个匿名函数的内存地址不变，那个<code>a</code>变量的数据也就不会变。或者可以使用<code>add()()</code>这种调用匿名函数的方式来重置变量<code>a</code>的数据。<br>下面在来一个高难度的，下面这个ff函数能输出<code>钢蛋?基佬</code>，中间的<code>?</code>号由参数<code>y func()</code>来控制。并且这个函数不允许修改。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ff</span><span class="token punctuation">(</span>y <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"钢蛋"</span><span class="token punctuation">)</span>    <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"基佬 \n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>下面这个fd函数能输出<code>是</code>或者<code>不是</code>，至于具体输出什么由参数<code>s</code>控制，这个函数也不允许修改。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fd</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>现在的要求是要用函数<code>ff()</code>调用函数<code>fd()</code>来实现输出<code>钢蛋是基佬</code>或者<code>钢蛋不是基佬</code>，至于<code>是</code>或者<code>不是</code>由函数<code>fd()</code>计算后得出。这里的两个函数<code>ff()</code>和<code>fd()</code>都不允许修改。来看看怎么实现的。看下面这个函数</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//自己写的封装函数</span><span class="token keyword">func</span> <span class="token function">yesORno</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fd</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个封装函数接受一个字符串变量<code>s</code>，返回一个没有参数没有返回值的的你卖匿名函数。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//这个函数不允许修改</span><span class="token keyword">func</span> <span class="token function">ff</span><span class="token punctuation">(</span>y <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"钢蛋"</span><span class="token punctuation">)</span>    <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"基佬 \n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这个函数同样不允许修改</span><span class="token keyword">func</span> <span class="token function">fd</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自己写的封装函数</span><span class="token keyword">func</span> <span class="token function">yesORno</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fd</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ff</span><span class="token punctuation">(</span><span class="token function">yesORno</span><span class="token punctuation">(</span><span class="token string">"==>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例面试题"><a href="#实例面试题" class="headerlink" title="实例面试题"></a>实例面试题</h3><p>管于defer的一个面试题：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ret <span class="token operator">:=</span> a <span class="token operator">+</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">:=</span> <span class="token number">1</span>    y <span class="token operator">:=</span> <span class="token number">2</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span></code></pre><p>defer语句后面的语句，程序会先别确切的参数或者数据算出来(仅包括变量的值，函数的参数等。不包括不包括函数内部代码也就是不包括<code>{}</code>内的代码。)，然后在圧栈，具体流程如下：</p><ol><li>x=1</li><li>y=2</li><li>defer calc(“AA”,1,calc(“A”,1,2))<br>输出：”A” 1 2 3<br>defer calc(“AA”,1,3)</li><li>x=10</li><li>defer calc(“BB”,10,calc(“B”,10,2))<br>输出：”B” 10 2 12<br>defer calc(“BB”,10,12)</li><li>y=20</li><li>输出：”BB” 10 12 22</li><li>输出：”AA” 1 3 4</li></ol><h3 id="分金币练习"><a href="#分金币练习" class="headerlink" title="分金币练习"></a>分金币练习</h3><p>你有50枚金币，需要分配给以下几个人：Matthew,Sarah,Augustus,Heidi,Emilie,Peter,Giana,Adriano,Aaron,Elizabeth。<br>分配规则如下：</p><ol><li>名字中每包含1个<code>e</code>或<code>E</code>分1枚金币</li><li>名字中每包含1个<code>i</code>或<code>I</code>分2枚金币</li><li>名字中每包含1个<code>o</code>或<code>O</code>分3枚金币</li><li>名字中每包含1个<code>u</code>或<code>U</code>分4枚金币</li></ol><p>写一个程序，计算每个用户分到多少金币，以及最后剩余多少金币？<br>程序结构如下，请实现 <code>dispatchCoin</code> 函数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    coins <span class="token operator">=</span> <span class="token number">50</span>    users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token string">"Matthew"</span><span class="token punctuation">,</span> <span class="token string">"Sarah"</span><span class="token punctuation">,</span> <span class="token string">"Augustus"</span><span class="token punctuation">,</span> <span class="token string">"Heidi"</span><span class="token punctuation">,</span> <span class="token string">"Emilie"</span><span class="token punctuation">,</span> <span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Giana"</span><span class="token punctuation">,</span> <span class="token string">"Adriano"</span><span class="token punctuation">,</span> <span class="token string">"Aaron"</span><span class="token punctuation">,</span> <span class="token string">"Elizabeth"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    distribution <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">dispatchCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    字符串切片导入map</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历users字符</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//具体计算获得金边数量</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token punctuation">{</span>                distribution<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span>                coins<span class="token operator">--</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'i'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'I'</span> <span class="token punctuation">{</span>                distribution<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span>                coins <span class="token operator">-=</span> <span class="token number">2</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>                distribution<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">3</span>                coins <span class="token operator">-=</span> <span class="token number">3</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'u'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'U'</span> <span class="token punctuation">{</span>                distribution<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">4</span>                coins <span class="token operator">-=</span> <span class="token number">4</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回金边剩余数量</span>    <span class="token keyword">return</span> coins<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    left <span class="token operator">:=</span> <span class="token function">dispatchCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"剩下："</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> distribution <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s分得%d枚金边 \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>递归函数：递归函数就是自己调用自己的函数，递归函数一定要有一个明确的退出条件，比如阶乘：<br>比如5的阶乘是：<br><b>3*2*1</b><br><b>4*3*2*1</b><br><b>5*4*3*2*1</b><br><b>6*5*4*3*2*1</b><br><strong>6的阶乘是6乘以5的阶乘</strong><br><strong>5的阶乘是5乘以4的阶乘</strong><br><code>n的阶乘是n乘以n-1的阶乘</code>，所以～～～</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"-"</span><span class="token comment" spellcheck="true">//递归函数练习</span><span class="token keyword">func</span> <span class="token function">digui</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无实际作用，仅作为辅助理解递归函数运行模式使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%sif之前a[%d] "</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无实际作用，仅作为辅助理解递归函数运行模式使用</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"-if内,准备返回a[%d] \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>        s <span class="token operator">+=</span> <span class="token string">"-"</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//无实际作用，仅作为辅助理解递归函数运行模式使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"-if之后a[%d]这里返回的是%d * digui(%d-1) \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    s <span class="token operator">+=</span> <span class="token string">"-"</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token function">digui</span><span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">digui</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果如下:</p><ol><li><p>-if之前a[3] -if之后a[3]这里返回的是<code>3 * digui(3-1)</code><br>这里程序<code>digui(3)</code>运行结束，准备返回<code>3*digui(3-1)</code>时，要先算出<code>digui(3-1)</code>返回的具体数字。</p></li><li><p>–if之前a[2] -if之后a[2]这里返回的是<code>2 * digui(2-1)</code><br>和上一步一样，在运行<code>3*digui(3-1)</code>时，准备返回<code>2*digui(2-1)</code>时，需要先算出这个<code>digui(2-1)</code>的具体数字。</p></li><li><p>—if之前a[1] -if内,准备返回a[1]</p><ul><li>这里是程序<code>digui(2-1)</code>运行结束时，程序明确的知道要返回<code>1</code></li><li>所以第二步的返回值<code>2*digui(2-1)</code>实际运行的就是<code>2*1</code>，返回值就是明确的数字<code>2</code></li><li>所以第一步<code>3*digui(3-1)</code>实际运行的就是<code>3*2</code>，返回值是<code>6</code></li></ul></li><li><p>6<br>所以<code>main</code>函数中<code>digui(3)</code>的返回值就是<code>6</code></p></li></ol><h3 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h3><p>九九乘法表，支持正序或倒序输出。源代码如下，自行编译去吧。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> shuru <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/*打印九九乘法表作用：根据选项o正三角或倒三角输出九九乘法表。参数：o bool类型。true以正三角输出九九乘法表。false倒三角输出九九乘法表。返回值：无实例：chengfabiao(true)*/</span><span class="token keyword">func</span> <span class="token function">chengfabiao</span><span class="token punctuation">(</span>o <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> o <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正三角输出九九乘法表</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d \t"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//倒三角输出九九乘法表</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d \t"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">*</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//菜单函数</span><span class="token keyword">func</span> <span class="token function">menu</span><span class="token punctuation">(</span>shuru <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//菜单功能</span>    <span class="token keyword">switch</span> shuru <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用户选1，正序输出</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">chengfabiao</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 用户选择2，倒序输出</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token function">chengfabiao</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//不要胡乱操作</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"如需要退出，请按[3]后回车，致谢～"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//欢迎辞</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">`----------九九乘法表----------1：正序输出     2：倒序输出     3：退出或者Ctrl + c--------------------建议横屏获得最佳显示效果-------------------`</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取用户输入</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shuru<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//调用menu函数或者退出</span>        <span class="token keyword">if</span> shuru <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">{</span>            <span class="token function">menu</span><span class="token punctuation">(</span>shuru<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fmt包</title>
      <link href="/golang/fmt-bao/"/>
      <url>/golang/fmt-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="fmt标准库学习测试"><a href="#fmt标准库学习测试" class="headerlink" title="fmt标准库学习测试"></a>fmt标准库学习测试</h3><p>fmt.Print系列<br>输出到终端，<br>fmt.Sprint系列<br>输出到变量，实际就是拼接字符串<br>fmt.Fprint系列<br>输出到文件<br>fmt.Scan系列<br>从标准输入读取<br>fmt.Fscan系列<br>从文件中读取<br>fmt.Sscan系列<br>从字符串中读取</p><h4 id="Print系列"><a href="#Print系列" class="headerlink" title="Print系列"></a>Print系列</h4><p>向外输出到终端一共有三个函数？<code>fmt.Print()</code>，<code>fmt.Printf()</code>，<code>fmt.Println()</code>。</p><h5 id="fmt-Print"><a href="#fmt-Print" class="headerlink" title="fmt.Print"></a>fmt.Print</h5><p><code>fmt.Print()</code>原样输出字符串，不带换行符。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出四个连续的没有分割的一串字符：</p><blockquote><p>aaaa<br>也可以手动加上换行符<code>\n</code>，主要这里是反斜杠<code>\</code></p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"二进制\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"二进制显示\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>显示效果如下：</p><blockquote><p>二进制<br>二进制显示</p></blockquote><h5 id="fmt-Println"><a href="#fmt-Println" class="headerlink" title="fmt.Println"></a>fmt.Println</h5><p><code>gfmt.Println()</code>也是输出字符串，但是结尾自带回车换行符。跟<code>fmt.Print()</code>的区别就是带不带换行符这么一点点。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行效果如下：</p><blockquote><p>aa<br>aa</p></blockquote><h5 id="fmt-Printf"><a href="#fmt-Printf" class="headerlink" title="fmt.Printf"></a>fmt.Printf</h5><p><code>fmt.Printf()</code>这个用的最多，可以使用占位符，末尾不带回车换行符。如下代码占位符<code>%b</code>是二进制显示变量<code>a</code>的数据，占位符<code>%d</code>整数型十进制显示变量<code>a</code>的数据。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> 0b1100    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"二进制显示a:%b \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"二进制显示a:%d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行效果如下：</p><blockquote><p>二进制显示a:1100<br>二进制显示a:12</p></blockquote><h4 id="Sprint系列"><a href="#Sprint系列" class="headerlink" title="Sprint系列"></a>Sprint系列</h4><h5 id="Sprint"><a href="#Sprint" class="headerlink" title="Sprint"></a>Sprint</h5><p><code>fmt.Sprint()</code>通常用它拼接字符串，他的功能就跟<code>c := "aa" + "bb"</code>一个样。看如下代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token string">"aa"</span>    b <span class="token operator">:=</span> <span class="token string">"bb"</span>    c <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行效果：</p><blockquote><p>bbaa</p></blockquote><h5 id="Sprintln"><a href="#Sprintln" class="headerlink" title="Sprintln"></a>Sprintln</h5><p><code>fmt.Sprintln()</code>是在拼接的两个字符串中间加空格。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token string">"aa"</span>    b <span class="token operator">:=</span> <span class="token string">"bb"</span>    c <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行后输出：</p><blockquote><p>bb aa</p></blockquote><h5 id="Sprintf"><a href="#Sprintf" class="headerlink" title="Sprintf"></a>Sprintf</h5><p><code>fmt.Sprintf()</code>就是拼接字符串是可以使用占位符。如下代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token string">"圆周率是：%.7f"</span>    b <span class="token operator">:=</span> <span class="token number">3.1415926</span>    c <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行效果如下：</p><blockquote><p>圆周率是：3.1415926</p></blockquote><h4 id="Scan系列"><a href="#Scan系列" class="headerlink" title="Scan系列"></a>Scan系列</h4><h5 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h5><p><code>fmt.Scan()</code>官方说法叫从标准输入扫描文本。说白了就是从终端，命令行获取你输入的文本。<code>fmt.Scan()</code>是检测到回车或者空格就算分隔，你指定几个变量接收就扫描几次。比如下面的例子中，先输入<code>啊啊</code>回车，在输入<code>18</code>回车，在输入<code>1</code>回车和直接输入<code>啊啊 18 1</code>回车得到的结果一样。看下例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        name <span class="token builtin">string</span>        age  <span class="token builtin">int</span>        ok   <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:[%s] age:[%d],ok:[%t]\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这里是直接根据变量的内存地址去修改数据。去掉’&amp;’不能正常运行。</p><h5 id="Scanf"><a href="#Scanf" class="headerlink" title="Scanf"></a>Scanf</h5><p><code>fmt.Scanf()</code>一样也是用空格分割，用回车结束。不一样的地方是它会用你指定的格式去读取输入的数据。如下代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        name <span class="token builtin">string</span>        age  <span class="token builtin">int</span>        ok   <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"1:%s 2:%d 3:%t"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:[%s] age:[%d],ok:[%t]\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果单纯的输入<code>啊啊 18 ture</code>程序根本扫描不到输入的数据，必须要按你指定的格式<code>1:哦哦 2:30 3:true</code>才能扫描到输入的数据。</p><h5 id="Scanln"><a href="#Scanln" class="headerlink" title="Scanln"></a>Scanln</h5><p><code>fmt.Scanln()</code>一般用的最多。这个跟<code>Scan</code>的区别是，只要见到<code>回车</code>就当做你输入完毕了。都是用空格分隔。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        name <span class="token builtin">string</span>        age  <span class="token builtin">int</span>        ok   <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:[%s] age:[%d],ok:[%t]\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> fmt包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Time包</title>
      <link href="/golang/time-bao/"/>
      <url>/golang/time-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="time包学习练习测试"><a href="#time包学习练习测试" class="headerlink" title="time包学习练习测试"></a>time包学习练习测试</h3><h4 id="时间类型：time-Time"><a href="#时间类型：time-Time" class="headerlink" title="时间类型：time.Time"></a>时间类型：time.Time</h4><p>获取当前时间对象<code>time.Now()</code>,然后就可以通过这个时间对象获得详细的时间信息了，包括年月日时分秒等信息。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化一个新的时间对象</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now类型为time.Time</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//拿到当前的年份信息，数据类型int</span>    year <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"year:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> year<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//拿到当前的月份信息，数据类型time.Month</span>    month <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"month:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> month<span class="token punctuation">,</span> month<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//今天几号？数据类型:int</span>    day <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"day:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> day<span class="token punctuation">,</span> day<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//时，数据类型:int</span>    hour <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"hour:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> hour<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//分：数据类型:int</span>    minute <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"minute:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> minute<span class="token punctuation">,</span> minute<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//秒:数据类型:int</span>    second <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"second:\nType:%T value:%#v \n"</span><span class="token punctuation">,</span> second<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>为啥这么奇怪只有月份是<code>time.Month</code>类型，年日时分秒都是<code>int</code>类型～～</p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>时间戳是自1970年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳（UnixTimestamp）。基于时间对象获取时间戳的示例代码如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化一个新的时间对象</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now类型为time.Time</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//毫秒时间戳数据类型:int64</span>    uinx <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Uinx:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> uinx<span class="token punctuation">,</span> uinx<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//纳秒时间戳数据类型:int64</span>    uinxnano <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"UinxNano:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> uinxnano<span class="token punctuation">,</span> uinxnano<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>把时间戳换回时间对象,转换以后的数据等同于<code>time.Now()</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化一个新的时间对象</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now类型为time.Time</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//毫秒时间戳数据类型:int64</span>    uinx <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Uinx:\nType:%T \nvilue:%v \n", uinx, uinx)</span>    <span class="token comment" spellcheck="true">//把时间戳转换为时间对象，time.Time类型。转换以后就是time.Now()</span>    timeOBJ <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>uinx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"timeOBJ:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> timeOBJ<span class="token punctuation">,</span> timeOBJ<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="时间间隔"><a href="#时间间隔" class="headerlink" title="时间间隔"></a>时间间隔</h4><p><code>time.Duration</code>是<code>time</code>包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位。<code>time.Duration</code>表示一段时间间隔，可表示的最长时间段大约290年。time包中定义的时间间隔类型的常量如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    Nanosecond  Duration <span class="token operator">=</span> <span class="token number">1</span>    Microsecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Nanosecond    Millisecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Microsecond    Second               <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Millisecond    Minute               <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Second    Hour                 <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Minute<span class="token punctuation">)</span></code></pre><p>例如：time.Duration表示1纳秒，time.Second表示1秒。</p><h4 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h4><h5 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h5><p>我们在日常的编码过程中可能会遇到要求时间+时间间隔的需求，Go语言的时间对象有提供Add方法如下</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化一个新的时间对象</span>    now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now类型为time.Time</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now2当前时间加上24小时</span>    now2 <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour <span class="token operator">*</span> <span class="token number">23</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now2:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now2<span class="token punctuation">,</span> now2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当前时间减去now2，返回的是这两个时间之间隔多长时间，允许后now3是-24h0m0s</span>    now3 <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>now2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"now3:\nType:%T \nvilue:%v \n"</span><span class="token punctuation">,</span> now3<span class="token punctuation">,</span> now3<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="ParseDuration"><a href="#ParseDuration" class="headerlink" title="ParseDuration"></a>ParseDuration</h5><p>ParseDuration解析一个时间段字符串。一个时间段字符串是一个序列，每个片段包含可选的<strong>正负号</strong>、<strong>十进制数</strong>、可选的<strong>小数部分</strong>和<strong>单位后缀</strong>，如<code>300ms</code>、<code>-1.5h</code>、<code>2h45m</code>。合法的单位有<code>ns</code>、<code>us</code> /<code>µs</code>、<code>ms</code>、<code>s</code>、<code>m</code>、<code>h</code>。说人话就是把类似与<code>2h3m45s</code>解析为<code>time.Duration</code>类型数据，看下例：<br>解析字符串格式是时间为k</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//合法的字符串时间间隔</span>    a <span class="token operator">:=</span> <span class="token string">"2h32m50s"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:\nType:%T Value:%#v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//解析合法的字符串类型时间间隔为time.Duration类型</span>    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"time.ParseDuration()参数有误，无法识别。\nErr:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b:\nType:%T Value:%#v \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="休眠函数time-Sleep"><a href="#休眠函数time-Sleep" class="headerlink" title="休眠函数time.Sleep()"></a>休眠函数time.Sleep()</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始休眠～～～"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//time.Sleep()休眠函数</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3秒钟过去了～～～"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="定时器函数time-Tick"><a href="#定时器函数time-Tick" class="headerlink" title="定时器函数time.Tick()"></a>定时器函数time.Tick()</h3><p>使用<code>time.Tick(时间间隔)</code>来设置定时器，定时器的本质上是一个通道（channel）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a: \nType:%T value:%#v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里要用for rangge来遍历a，来获得定时执行任务的时间间隔</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i: \nType:%T value:%#v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="比较时间"><a href="#比较时间" class="headerlink" title="比较时间"></a>比较时间</h3><p><code>time.Before</code>和<code>time.After</code>比较两个时间的先后顺序。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//now为当前时间</span>    now0 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now为当前时间加25个小时</span>    now1 <span class="token operator">:=</span> now0<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Before函数比较now0和now1，如果now0在前返回true,否则返回false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now0<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>now1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//After函数如果now0在now1之后返回true，否则返回false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now0<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a>Equal</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Time<span class="token punctuation">)</span> <span class="token function">Equal</span><span class="token punctuation">(</span>u Time<span class="token punctuation">)</span> <span class="token builtin">bool</span></code></pre><p>判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。本方法和用<code>t==u</code>不同，这种方法还会比较地点和时区信息。</p><h3 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设定时区为b，此时b的数据类型为*time.Location</span>    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b: \nType:%T \nValue:%v \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//now为当前系统默认时区时间</span>    now0 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把获取到的系统时间转换为上海时间。</span>    a <span class="token operator">:=</span> now0<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a: \nType:%T \nValue:%v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> time包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言反射</title>
      <link href="/golang/go-yu-yan-fan-she/"/>
      <url>/golang/go-yu-yan-fan-she/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>先看官方Doc中Rob Pike给出的关于反射的定义：</p><blockquote><p>Reflection in computing is the ability of a program to examine its own structure, particularly through types; it’s a form of metaprogramming. It’s also a great source of confusion.<br>(在计算机领域，反射是一种让程序——主要是通过类型——理解其自身结构的一种能力。它是元编程的组成之一，同时它也是一大引人困惑的难题。)</p></blockquote><p>网上关于Golang反射的教程、博客，早已汗牛充栋。可遍数之下，有些偏于底层实现，有些偏于单一问题，有些偏于性能，有些是官方Doc的翻译，而且质量参差不齐。</p><p>在这种情况下，对于想学反射编程的人来说，很难看到一个完整的、系统的关于Golang反射编程的教程，甚至于在某段时间下好像学会了Golang反射，过段时间又忘了，好像从没学过一样。</p><p>本文的出现就是为了解决上述问题，争取对Golang反射编程，做一个尽量完善、系统的阐述。本文主要关注点在于：如何学会并使用Golang反射。因此不会讲述太多底层实现和性能方面的问题。</p><p>为了便于理解、记忆，本文在阐述过程中，会通过对比Golang一般语法和反射“语法”的方式，来说明如何使用反射编程。</p><p>最后提醒一句：有限制地用反射，即便你用的非常6。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>上面已经说到，反射主要通过类型，来理解其自身结构，所以反射中，比较关键的一点在于：类型。<br>另外，编程中所有的操作，都是对数据的操作，亦即值，所以反射中，另外一点在于：值。<br>在反射编程时，一定要时刻注意，你在操作变量的类型是什么，要对值做什么操作。<br>Golang反射中，类型的起点是<strong>reflect.TypeOf(x)</strong>，值的起点是<strong>reflect.ValueOf(x)</strong>。</p><h3 id="可读与可写"><a href="#可读与可写" class="headerlink" title="可读与可写"></a>可读与可写</h3><p>先看一个简单的例子(后面例子会省略package和import部分)：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"reflect"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 5</span><span class="token punctuation">}</span></code></pre><p>一定要注意一点，<code>reflect.ValueOf(i)</code>是个函数调用，所以对比看一下下面这个没有反射的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">echo</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">echo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这两个例子是等价的，在上面反射中，<code>reflect.ValueOf(i)</code>是函数调用，函数调用分为传值和传址，该写法明显是在传值，它是<code>i</code>的一份拷贝，就像在调用<code>echo(i)</code>的时候，给<code>echo</code>传的是<code>i</code>的值，即在<code>echo</code>内部，<code>i</code>的值是只读的。<br>所以在下面例子中：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">echo</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v <span class="token operator">=</span> <span class="token number">100</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">echo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 5</span><span class="token punctuation">}</span></code></pre><p>在<code>echo</code>中，将<code>v</code>的值改成了<code>100</code>，却改不了<code>main</code>中<code>i</code>的值，因为调用<code>echo</code>的本质是传值。传值的意思即只读，因此如果在反射中，对只读的值做任何<code>Set</code>操作，都会<code>panic</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    v<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// panic</span><span class="token punctuation">}</span></code></pre><p>那如何改变值呢？很明显，应该传址：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>v <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 100</span><span class="token punctuation">}</span></code></pre><p>注意在该程序中:</p><ol><li>为了在函数<code>change</code>中改变<code>i</code>的值，我们将<code>i</code>的内存地址传给了<code>change</code>；</li><li>在改变<code>i</code>的值时，<code>change</code>先给<code>v</code>做了解指针操作<code>*v</code>。</li></ol><p>所以，对应的，反射也是函数调用，写出来，和上面逻辑上应该是一样的：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 100</span><span class="token punctuation">}</span></code></pre><p>Golang反射简易之处在于：只要你学会了该语言，你就学会了反射。<br>比较一下上面两个程序，有什么不同吗？</p><p><code>v := reflect.ValueOf(&amp;i)</code>和<code>var v *int = &amp;i</code>是一样的；<br><code>v.Elem().SetInt(100)</code>和<code>*v = 100</code>是一样的，先解指针，再赋值。<br>那有没有方法能判断是否可写呢？<code>reflect.Value.CanSet() bool</code>该函数可以判断一个值是否可写：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false</span>    v <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false // 标记1</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span><span class="token punctuation">}</span></code></pre><p><code>标记1</code>处为什么是<code>false</code>呢？因为你要改的是指针指向的值，不是指针本身的值。</p><p>那具体有哪些是<code>CanSet</code>的呢？文档：</p><blockquote><p>A Value can be changed only if it is addressable and was not obtained by the use of unexported struct fields.</p></blockquote><p>注意文档中的一句：未被导出的<code>struct fields</code>是不可被<code>Set</code>的。</p><h3 id="取址"><a href="#取址" class="headerlink" title="取址"></a>取址</h3><p>通过上面例子，我们知道，想要改变值，其前提是：取址。那什么样的变量是可取址的呢？反射包里有一个函数：<code>reflect.Value.CanAddr() bool</code>，该函数可以判断是否可取址。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false</span>    v <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span><span class="token punctuation">}</span></code></pre><p>在该函数的文档中，已经明确了哪些可以被取址：</p><blockquote><p>A value is addressable if it is an element of a slice, an element of an addressable array, a field of an addressable struct, or the result of dereferencing a pointer.</p></blockquote><p>为方便理解，我将上述文档翻译成代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ls <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// Output: true</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span>    <span class="token keyword">var</span> t <span class="token keyword">struct</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> B <span class="token builtin">int</span> <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Output: false</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Output: true</span>    <span class="token keyword">var</span> p <span class="token operator">*</span><span class="token builtin">int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: true</span><span class="token punctuation">}</span></code></pre><p>既然知道了哪些可以取址，那么也就知道了哪些不可被取址，比如<code>map[k]v</code>中的<code>k</code>和<code>v</code>都不可被取址，没有传址进来的变量都不可被取址……</p><p>一定要注意：可取址<code>CanAddr</code>和可赋值<code>CanSet</code>不完全等价，主要区别在于未被导出的<code>struct fields</code>。</p><p>对指针和结构体相关的比较好理解，关键问题在于：为什么<code>an element of a slice</code>是可被取址和赋值的呢？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>ls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ls <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>    <span class="token function">change</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 100</span><span class="token punctuation">}</span></code></pre><p>在Golang里面，<code>slice</code>、<code>map</code>、<code>chan</code>默认是传址的！<br>请看：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ls <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>    reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 123</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">"abc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 456</span>    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">789</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: 789</span><span class="token punctuation">}</span></code></pre><p>注意<code>slice</code>、<code>map</code>、<code>chan</code>默认传址的前提是：已经提前分配好内存空间！</p><p>细节知识点：<strong>array默认是传值</strong>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: false</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Output: false</span><span class="token punctuation">}</span></code></pre><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>到目前为止，还没接触到类型。获取数据的类型可以用<code>reflect.ValueOf(x).Kind()</code>获取真实类型。所以有：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: int</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: string</span>    <span class="token keyword">var</span> iface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// Output: invalid // 标记1</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Output: interface // 标记2</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: invalid // 标记3</span>    <span class="token keyword">var</span> t time<span class="token punctuation">.</span>Time    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: struct // 标记4</span><span class="token punctuation">}</span></code></pre><p>标记1、2、3处怎么理解？</p><ul><li>再次强调<code>reflect.ValueOf(x)</code>是函数调用；</li><li><strong>注意函数签名：</strong><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Value</code></pre>参数是<code>interface{}</code>，指所有调用该函数的地方，都会将参数类型转换成<code>interface{}</code>。</li><li><code>interface{}</code>是<code>typ, val</code>对，空的<code>interface{}</code>是<code>(nil, nil)</code>，类型和值都是空，所以<code>Kind()</code>是<code>invalid</code>；</li><li>所有类型转换到<code>interface{}</code>的过程，都是<code>(typ, val)</code>拷贝的过程；</li><li><strong>标记2</strong>处，<code>&amp;iface</code>是一个<code>interface</code>类型的指针；</li><li>指针指向对象的类型是<code>interface</code>类型的变量；</li><li>该interface类型的变量的<code>Kind()</code>是<code>invalid</code>；</li><li>所以<strong>标记3</strong>处是<code>invalid</code>。</li><li><strong>标记4</strong>处，<code>time.Time</code>类型的底层是<code>struct</code>，即：<code>type Time struct { ... }</code>。</li></ul><p>那如果说想获得类型名，而不是底层类型，该怎么处理呢？<code>reflect.TypeOf(x)</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: int</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: string</span>    <span class="token keyword">var</span> iface <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// panic</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Output: *interface {}</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>iface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: interface {}</span>    <span class="token keyword">var</span> t time<span class="token punctuation">.</span>Time    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: time.Time</span><span class="token punctuation">}</span></code></pre><p><code>reflect.TypeOf(x).String()</code>一般用来处理<code>time.Time</code>这种想要特殊处理的结构。</p><p>构造常用类型：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    intTyp <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    strTyp <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ArrayOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> intTyp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// Output: [10]int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ChanOf</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span>BothDir<span class="token punctuation">,</span> intTyp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: chan int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MapOf</span><span class="token punctuation">(</span>strTyp<span class="token punctuation">,</span> intTyp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// Output: map[string]int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">PtrTo</span><span class="token punctuation">(</span>intTyp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">// Output: *int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">SliceOf</span><span class="token punctuation">(</span>intTyp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// Output: []int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">StructOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>StructField<span class="token punctuation">{</span>        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"IntA"</span><span class="token punctuation">,</span> Type<span class="token punctuation">:</span> intTyp<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"StrB"</span><span class="token punctuation">,</span> Type<span class="token punctuation">:</span> strTyp<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: struct { IntA int; StrB string }</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    errTyp <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">FuncOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>intTyp<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">// Output: func(int)</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">FuncOf</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>intTyp<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">// Output: func() int</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">FuncOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>intTyp<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>strTyp<span class="token punctuation">,</span> errTyp<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Output: func() (string, error)</span>    <span class="token function">println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">FuncOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">SliceOf</span><span class="token punctuation">(</span>strTyp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Output: func(...string)</span><span class="token punctuation">}</span></code></pre><h3 id="变量的内在机制"><a href="#变量的内在机制" class="headerlink" title="变量的内在机制"></a>变量的内在机制</h3><p>Go语言中的变量是分为两部分的:</p><ul><li>类型信息：预先定义好的元信息。</li><li>值信息：程序运行过程中可动态变化的。</li></ul><h3 id="反射主要使用reflect包"><a href="#反射主要使用reflect包" class="headerlink" title="反射主要使用reflect包"></a>反射主要使用reflect包</h3><p>在Go语言的反射机制中，任何接口值都由是一个具体类型和具体类型的值两部分组成的(我们在上一篇接口的博客中有介绍相关概念)。 在Go语言中反射的相关功能由内置的<code>reflect</code>包提供，任意接口值在反射中都可以理解为由<code>reflect.Type</code>和<code>reflect.Value</code>两部分组成，并且<code>reflect</code>包提供了<code>reflect.TypeOf</code>和<code>reflect.ValueOf</code>两个函数来获取任意对象的<code>Value</code>和<code>Type</code>。</p><h3 id="TypeOf"><a href="#TypeOf" class="headerlink" title="TypeOf"></a>TypeOf</h3><p>在Go语言中，使用<code>reflect.TypeOf()</code>函数可以获得任意值的类型对象<code>reflect.Type</code>，程序通过类型对象可以访问任意值的类型信息。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">retType</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v数据类型*reflect.rtype</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T \nValue:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token function">retType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>另外，类型别名的话，只能拿到原类型。结构体等用<code>type</code>定义的类型拿到的是<code>type</code>后面的名字。具体看下例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">retType</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v数据类型*reflect.rtype</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T \nValue:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token function">retType</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//map类型</span>    <span class="token keyword">var</span> c <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int16</span>    <span class="token function">retType</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//也可以识别自定义数据类型</span>    <span class="token keyword">type</span> t <span class="token builtin">int64</span>    <span class="token keyword">var</span> a t    <span class="token function">retType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//结构体,拿到的是main.u</span>    <span class="token keyword">type</span> u <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    d <span class="token operator">:=</span> u<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">retType</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//类型别名拿到的是int8</span>    <span class="token keyword">type</span> v <span class="token operator">=</span> <span class="token builtin">int8</span>    <span class="token keyword">var</span> e v    <span class="token function">retType</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//传入自定义类型t会报错,编译不通过</span>    <span class="token comment" spellcheck="true">//main.go|49 col 9 error| type t is not an expression</span>    <span class="token comment" spellcheck="true">// retType(t)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>map</code>类型的<code>b</code>，单纯的<code>TypeOf(b)</code>显示<code>map[string]int</code>，如果加上<code>Key</code>的话，显示<code>int</code>。结构体的话会带上包名，比如<code>main.dog</code>。</p><h3 id="type-name和type-kind"><a href="#type-name和type-kind" class="headerlink" title="type name和type kind"></a>type name和type kind</h3><p>在反射中关于类型还划分为两种：<strong>类型</strong>（Type）和<strong>种类</strong>（Kind）。因为在Go语言中我们可以使用<code>type</code>关键字构造很多自定义类型，而种类（Kind）就是指底层的类型，但在反射中，当需要区分指针、结构体等大品种的类型时，就会用到种类（Kind）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>        eyes <span class="token builtin">string</span>    <span class="token punctuation">}</span>    b <span class="token operator">:=</span> dog<span class="token punctuation">{</span>eyes<span class="token punctuation">:</span> <span class="token string">"眼睛"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// type a int64</span>    <span class="token comment" spellcheck="true">// var b a</span>    <span class="token comment" spellcheck="true">// b = 87</span>    <span class="token comment" spellcheck="true">// a := "aaa"</span>    <span class="token comment" spellcheck="true">// b := &amp;a</span>    ref <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">,</span> ref<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Name \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Kind \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如上例，<code>TypeOf</code>返回的是<code>main.dog</code>，<code>Name</code>返回的是不带包名的<code>dog</code>，<code>Kind</code>返回的是种类<code>struct</code>。Go语言的反射中像<strong>数组</strong>、<strong>切片</strong>、<strong>Map</strong>、<strong>指针</strong>等类型的变量，它们的<code>.Name()</code>都是返回空。<br>在reflect包中定义的<code>Kind</code>类型如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Kind <span class="token builtin">uint</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    Invalid Kind <span class="token operator">=</span> <span class="token boolean">iota</span>  <span class="token comment" spellcheck="true">// 非法类型</span>    Bool                 <span class="token comment" spellcheck="true">// 布尔型</span>    Int                  <span class="token comment" spellcheck="true">// 有符号整型</span>    Int8                 <span class="token comment" spellcheck="true">// 有符号8位整型</span>    Int16                <span class="token comment" spellcheck="true">// 有符号16位整型</span>    Int32                <span class="token comment" spellcheck="true">// 有符号32位整型</span>    Int64                <span class="token comment" spellcheck="true">// 有符号64位整型</span>    Uint                 <span class="token comment" spellcheck="true">// 无符号整型</span>    Uint8                <span class="token comment" spellcheck="true">// 无符号8位整型</span>    Uint16               <span class="token comment" spellcheck="true">// 无符号16位整型</span>    Uint32               <span class="token comment" spellcheck="true">// 无符号32位整型</span>    Uint64               <span class="token comment" spellcheck="true">// 无符号64位整型</span>    Uintptr              <span class="token comment" spellcheck="true">// 指针</span>    Float32              <span class="token comment" spellcheck="true">// 单精度浮点数</span>    Float64              <span class="token comment" spellcheck="true">// 双精度浮点数</span>    Complex64            <span class="token comment" spellcheck="true">// 64位复数类型</span>    Complex128           <span class="token comment" spellcheck="true">// 128位复数类型</span>    Array                <span class="token comment" spellcheck="true">// 数组</span>    Chan                 <span class="token comment" spellcheck="true">// 通道</span>    Func                 <span class="token comment" spellcheck="true">// 函数</span>    Interface            <span class="token comment" spellcheck="true">// 接口</span>    Map                  <span class="token comment" spellcheck="true">// 映射</span>    Ptr                  <span class="token comment" spellcheck="true">// 指针</span>    Slice                <span class="token comment" spellcheck="true">// 切片</span>    String               <span class="token comment" spellcheck="true">// 字符串</span>    Struct               <span class="token comment" spellcheck="true">// 结构体</span>    UnsafePointer        <span class="token comment" spellcheck="true">// 底层指针</span><span class="token punctuation">)</span></code></pre><p>具体看如下代码，仅演示了结构体类型:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>        eyes <span class="token builtin">string</span>        fool <span class="token builtin">int</span>    <span class="token punctuation">}</span>    b <span class="token operator">:=</span> dog<span class="token punctuation">{</span>eyes<span class="token punctuation">:</span> <span class="token string">"眼睛"</span><span class="token punctuation">,</span> fool<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>    ref <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ref := reflect.TypeOf(&amp;b)</span>    <span class="token comment" spellcheck="true">//ref保存的是带有包名的b的数据类型main.dog，自身数据类型是reflect.Type</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">,</span> ref<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Name()保存的是不带包名的b的数据类型dog，自身数据类型是string</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Name \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Kind保存的是b的种类struct，自身数据类型是reflect.Kind</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Kind \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//注意如果TypeOf(b)中的b是指针，需要使用Elem()方法找到指针指向的真实的结构体实体，才能进行下面两个操作</span>    <span class="token comment" spellcheck="true">//NumField保存的是b中字段数量2，自身数据类型是int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.NumField \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果b是指针，效果同上</span>    <span class="token comment" spellcheck="true">// fmt.Printf("ref.NumField \nType:%T Value:%v \n", ref.Elem().NumField(), ref.Elem().NumField())</span>    <span class="token comment" spellcheck="true">//Field(0)保存的是第0个字段的各种信息，包括字段名，字段类型，字段tag等各种信息，自身数据类型是reflect.StructField</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Field(0) \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ref.Field(1) \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ref<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果b是指针，效果同上</span>    <span class="token comment" spellcheck="true">// fmt.Printf("ref.Field(1) \nType:%T Value:%v \n", ref.Elem().Field(1), ref.Elem().Field(1))</span><span class="token punctuation">}</span></code></pre><h3 id="ValueOf"><a href="#ValueOf" class="headerlink" title="ValueOf"></a>ValueOf</h3><p>reflect.ValueOf()返回的是reflect.Value类型，其中包含了原始值的值信息。reflect.Value与原始值之间可以互相转换。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>Interface() interface {}</code></td><td>将值以<code>interface{}</code>类型返回，可以通过类型断言转换为指定类型</td></tr><tr><td><code>Int() int64</code></td><td>将值以<code>int</code>类型返回，所有有符号整型均可以此方式返回</td></tr><tr><td><code>Uint() uint64</code></td><td>将值以<code>uint</code>类型返回，所有无符号整型均可以此方式返回</td></tr><tr><td><code>Float() float64</code></td><td>将值以<strong>双精度（float64）</strong>类型返回，所有<strong>浮点数</strong>（float32、float64）均可以此方式返回</td></tr><tr><td><code>Bool() bool</code></td><td>将值以<code>bool</code>类型返回</td></tr><tr><td><code>Bytes() []bytes</code></td><td>将值以字节数组<code>[]bytes</code>类型返回</td></tr><tr><td><code>String() string</code></td><td>将值以字符串类型<code>string</code>返回</td></tr></tbody></table><h3 id="类型、值操作"><a href="#类型、值操作" class="headerlink" title="类型、值操作"></a>类型、值操作</h3><p>所有的类型都可以用Set方法修改值。</p><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>实现接口</td><td><code>Type.Implements(Type) bool</code></td></tr><tr><td>assignable</td><td><code>Type.AssignableTo(Type) bool</code></td></tr><tr><td>可转换类型</td><td><code>Type.ConvertibleTo(Type) bool</code></td></tr><tr><td>可比较</td><td><code>Type.Comparable() bool</code></td></tr></tbody></table><p><strong>basic types</strong></p><table><thead><tr><th>类型</th><th>获取值</th><th>修改值</th></tr></thead><tbody><tr><td><code>int, int8, int16, int32, int64</code></td><td><code>Int() int64</code></td><td><code>SetInt(int64)</code></td></tr><tr><td><code>uint, uint8, uint16, uint32, uint64</code></td><td><code>Uint() uint64</code></td><td><code>SeUint(uint64)</code></td></tr><tr><td><code>string</code></td><td><code>String() string</code></td><td><code>SetString(string)</code></td></tr><tr><td><code>bool</code></td><td><code>Bool() bool</code></td><td><code>SetBool(bool)</code></td></tr><tr><td><code>float32, float64</code></td><td><code>Float() float64</code></td><td><code>SetFloat(float64)</code></td></tr><tr><td><code>[]byte</code></td><td><code>Bytes() []byte</code></td><td><code>SetBytes([]byte)</code></td></tr><tr><td><code>complex64, complex128</code></td><td><code>Complex() complex128</code></td><td><code>SetComplex(complex128)</code></td></tr></tbody></table><p><strong>slice</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td><code>创建</code></td><td><code>gMakeSlice(Type, int, int) Value</code></td></tr><tr><td><code>添加</code></td><td><code>gAppend(Value, ...Value) Value、AppendSlice(Value, Value) Value</code></td></tr><tr><td><code>获取长度</code></td><td><code>gValue.Len() int</code></td></tr><tr><td><code>设置长度</code></td><td><code>gValue.SetLen(int)</code></td></tr><tr><td><code>获取容量</code></td><td><code>gValue.Cap() int</code></td></tr><tr><td><code>设置容量</code></td><td><code>gValue.SetCap(int)</code></td></tr><tr><td><code>切片</code></td><td><code>gValue.Slice(int, int) Value(也可用于string、array)、Slice3(也可用于array)</code></td></tr><tr><td><code>下标获取</code></td><td><code>gValue.Index(int) Value</code></td></tr><tr><td><code>拷贝</code></td><td><code>gCopy(Value, Value)</code></td></tr><tr><td><code>生成交换函数(给sort包用)</code></td><td><code>gSwapper(Value) func(int, int)</code></td></tr><tr><td><code>是否为空</code></td><td><code>gValue.IsNil() bool</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td><code>元素类型</code></td><td><code>Type.Elem() Type</code></td></tr></tbody></table><p><strong>array</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td>创建</td><td><code>New(Type) Value</code></td></tr><tr><td>获取长度</td><td><code>Value.Len() int</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>长度</td><td><code>Type.Len() int</code></td></tr><tr><td>元素类型</td><td><code>Type.Elem() Type</code></td></tr></tbody></table><p><strong>map</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td><code>创建</code></td><td><code>MakeMap(Type) Value、MakeMapWithSize(Type) Value</code></td></tr><tr><td><code>添加/删除</code></td><td><code>Value.SetMapIndex(key, val Value)(删除时val为zero Value，可以写为reflect.Value{})</code></td></tr><tr><td><code>所有的键</code></td><td><code>Value.MapKeys() []Value</code></td></tr><tr><td><code>获取值</code></td><td><code>Value.MapIndex(Value) Value</code></td></tr><tr><td><code>获取长度</code></td><td><code>Value.Len() int</code></td></tr><tr><td><code>是否为空</code></td><td><code>Value.IsNil() bool</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>键类型</td><td><code>Type.Key() Type</code></td></tr><tr><td>元素类型</td><td><code>Type.Elem() Type</code></td></tr></tbody></table><p><strong>chan</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td><code>创建</code></td><td><code>MakeChan(Type, int) Value</code></td></tr><tr><td><code>发送</code></td><td><code>Value.Send(Value)、Value.TrySend(Value) bool</code></td></tr><tr><td><code>接收</code></td><td><code>Value.Recv() (Value, bool)、Value.TryRecv() (Value, bool)</code></td></tr><tr><td><code>关闭</code></td><td><code>Value.Close()</code></td></tr><tr><td><code>获取长度</code></td><td><code>Value.Len() int</code></td></tr><tr><td><code>是否为空</code></td><td><code>Value.IsNil() bool</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>方向</td><td><code>Type.ChanDir() ChanDir</code></td></tr><tr><td>元素类型</td><td><code>Type.Elem() Type</code></td></tr></tbody></table><p><strong>func</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td>创建</td><td><code>MakeFunc(Type, func([]Value) []Value) Value</code></td></tr><tr><td>调用</td><td><code>Value.Call([]Value)[]Value、Value.CallSlice([]Value) []Value</code></td></tr><tr><td>是否为空</td><td><code>Value.IsNil() bool</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>变长参数</td><td><code>Type.IsVariadic() bool</code></td></tr><tr><td>参数个数</td><td><code>Type.NumIn() int</code></td></tr><tr><td>参数类型</td><td><code>Type.In(int) Type</code></td></tr><tr><td>返回值个数</td><td><code>Type.NumOut() int</code></td></tr><tr><td>返回值类型</td><td><code>Type.Out(int) Type</code></td></tr></tbody></table><p><strong>struct</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td><code>创建</code></td><td><code>New(Type) Value(New也可以用于创建基础类型如int等)</code></td></tr><tr><td><code>字段数量</code></td><td><code>Value.NumField() int</code></td></tr><tr><td><code>获取字段</code></td><td><code>Value.Field(int) Value、Value.FieldByName(string) Value、Value.FieldByIndex([]int) Value、FieldByFunc(func(string) bool) Value</code></td></tr><tr><td><code>方法数量</code></td><td><code>Value.NumMethod() int</code></td></tr><tr><td><code>获取方法</code></td><td><code>Value.Method(int) Value、Value.MethodByName(string) Value</code></td></tr></tbody></table><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>方法数量</td><td><code>Type.NumMethod</code></td></tr><tr><td>获取方法详情</td><td><code>Type.Method(int) Method·Type.MethodByName(string) Method</code></td></tr><tr><td>是否实现接口</td><td><code>Type.Implements(Type) bool</code></td></tr><tr><td>字段详情</td><td><code>Type.Field(int) StructField、Type.FieldByIndex([]int) StructField、Type.FieldByName(string) (StructField, bool)、Type.FieldByNameFunc(func(string) bool) (StructField, bool)</code></td></tr></tbody></table><p><strong>ptr (interface类似)</strong></p><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td>创建</td><td><code>New(Type) Value(NewAt不列，不推荐用unsafe包)</code></td></tr><tr><td>解指针</td><td><code>Value.Elem() Value</code></td></tr><tr><td>是否为空</td><td><code>Value.IsNil() bool</code></td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>链表</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiSteuct</span><span class="token punctuation">(</span>na <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">,</span> a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// t := reflect.TypeOf(a)</span>    <span class="token comment" spellcheck="true">//确保参数a是一个指针</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结构体类型传参是传的值，所以必须要传指针进来"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保参数a是一个struct类型</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是一个struct类型"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"boy"</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是一个结构体boy类型"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// //获取指定字段名的值</span>    <span class="token comment" spellcheck="true">// // fmt.Println(v.Elem().FieldByName("Name"))</span>    <span class="token comment" spellcheck="true">// x, ok := v.Elem().Type().FieldByName("Name")</span>    <span class="token comment" spellcheck="true">// if ok {</span>    <span class="token comment" spellcheck="true">//   fmt.Printf("已经找到参数a中字段名为'Name'的字段\n值为:[%v] \n", x)</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//返回参数a的子类boy，字符串类型</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Type:%T \n", v.Elem().Type().Name())</span>    <span class="token comment" spellcheck="true">//把参数a中的字段取出来存储到切片vfield中，方便后续操作</span>    <span class="token keyword">var</span> vfield <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value    <span class="token comment" spellcheck="true">//返回参数a的内部字段数量</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().NumField())</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取参数a的字段名字，如Name,Age等</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Name)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段数据类型</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Type)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段的tag</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Tag)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段的指定Tag，例如下面获取的是ini的Tag</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Tag.Get("ini"))</span>        <span class="token comment" spellcheck="true">//v.Elen().Field(i)取出参数a中的第i个字段，reflect.Value类型</span>        vfield <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vfield<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> vfield <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取得参数a各字段的值</span>        <span class="token comment" spellcheck="true">// fmt.Printf("vfield: \nType:%T Value:%v \n", v, v)</span>        <span class="token comment" spellcheck="true">//取得各字段的数据类型</span>        <span class="token comment" spellcheck="true">// fmt.Printf("vfield: \nType:%T Value:%v \n", n.Type().Kind(), n.Type().Kind())</span>        <span class="token comment" spellcheck="true">//修改参数a的各字段值</span>        <span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>            n<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>na<span class="token punctuation">)</span>        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>            n<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"暂时不支持的数据类型"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> boy <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Name <span class="token builtin">string</span> <span class="token string">`ini:"name"`</span>        Age  <span class="token builtin">int</span>    <span class="token string">`ini:"age"`</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> li <span class="token operator">=</span> boy<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"李雷"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//结构体和slice,map,chan不一样，结构体默认传值，必须要传指针进去才能进行下一步修改操作</span>    <span class="token function">ceshiSteuct</span><span class="token punctuation">(</span><span class="token string">"韩梅梅"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>li<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>用反射法值的简单实例：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiInt</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v取得动态值信息</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//查看v的动态值的类型信息</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//修改v的动态值</span>        v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">ceshiInt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>p是一个bool指针，把b的地址传进函数怎么用反射法修改*p的值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiPrt</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//直接传p就走这里</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Bool <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里是&amp;p</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"不带Elem是p的地址 \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里是&amp;i</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"1个Elem是p的值，也就是i的地址 \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里才是真正的i的值</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2个Elem才是i的值 \nType:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Bool <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"找到根儿了"</span><span class="token punctuation">)</span>        v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//i的值是bool类型的false</span>    <span class="token keyword">var</span> i <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//p的值是i的地址</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>i    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&amp;i:[%v] \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&amp;p:[%v] \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//未修改的*p</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//传p的地址进去</span>    <span class="token function">ceshiPrt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修改后的*p</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>数组类型用反射法修改数组元素的值：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiArray</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//v取得动态值信息</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//也能拿到a的类型array</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Kind())</span>    <span class="token comment" spellcheck="true">//也能拿到a的元素长度3</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Len())</span>    <span class="token comment" spellcheck="true">//Index取得数组i的第0个元素</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Index \nType:%T Value:%v \n", v.Elem().Index(0), v.Elem().Index(0))</span>    <span class="token comment" spellcheck="true">//获取数组i第0个元素的数据类型reflect.String</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Index.Kind \nType:%T Value:%v \n", v.Elem().Index(0).Kind(), v.Elem().Index(0).Kind())</span>    <span class="token comment" spellcheck="true">//确保参数a是一个数组Array</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Array <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是一个数组"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//循环修改参数a的各元素的值</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>String <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"请确保参数a的第%d元素是'string'类型。"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//修改数组元素的值</span>        v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">"mm"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token function">ceshiArray</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>用反射法修改切片各元素的值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiSlice</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//确保参数a是一个指针</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"参数a必须是一个指针，否则不能修改数据～"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确认参数是slice类型</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"参数a必须是一个slice类型"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回切片的len()</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Len())</span>    <span class="token comment" spellcheck="true">// 返回切片的cap()</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Cap())</span>    <span class="token comment" spellcheck="true">// 设置len()，不能超出cap，否则报错</span>    <span class="token comment" spellcheck="true">// v.Elem().SetLen(3)</span>    <span class="token comment" spellcheck="true">// 设置cap，不能小于len也不能大于原来的cap。也就是说cap只能变小，不能变大</span>    <span class="token comment" spellcheck="true">// v.Elem().SetCap(3)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//确保参数a的各元素都是string</span>        <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>String <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a的元素都是string类型"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//修改参数a的各元素数据</span>        v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">"!xyz!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T Len:%d Cap:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token function">ceshiSlice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T Len:%d Cap:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>用反射法操作map。修改key的对应值，删除key，清空所有key,value，添加key,value等操作</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiMap</span><span class="token punctuation">(</span>sli <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//确保t的一致性，参数a可以是指针也可以不是指针</span>    t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保参数a的类型为map，key的类型为string</span>    <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Map <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>String <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是map类型，且key是string类型"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保map类型键值对儿的值为bool类型</span>    <span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Bool <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保键值对儿的值为bool类型"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取v中所有的key以切片形式保存在keySlice中，keySlice中元素的数据类型是reflect.Value类型</span>    keySlice <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">MapKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修改原有键值对儿的值</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>keySlice<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// //创建一个reflect.Bool类型的val，他的值为0。</span>        val <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// //设置val的值为true</span>        val<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//修改一个原有key的值。</span>        v<span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>keySlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已将原有key为[%v]的值修改为[%v] \nValue:%v \n"</span><span class="token punctuation">,</span> keySlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除一个原有键值对</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>keySlice<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除一个键值对儿，</span>        v<span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>keySlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已删除了一个原有key为[%v]的键值对儿 \nValue:%v \n"</span><span class="token punctuation">,</span> keySlice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除所有键值对儿</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> keySlice <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已清空了原有键值对儿 \nValue:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// //创建一个reflect.String类型的key，它的值为0。注意，这里TypeOf("aa")中的aa可以是任意string类型字符串，不管是啥字符串，key的值都是0</span>    <span class="token comment" spellcheck="true">// //key的值为空字符串，需要在遍历切片sli中对其赋值</span>    key <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// //创建一个reflect.Bool类型的val，他的值为0。</span>    val <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// //设置val的值为true</span>    val<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 遍历切片sli</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> sli <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置key的值为"aa"</span>        key<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//给v添加一个键值对，key是键，val是值</span>        v<span class="token punctuation">.</span><span class="token function">SetMapIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已更新了所有原键值对儿"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// fmt.Println(t.Elem() == "book")</span>    <span class="token comment" spellcheck="true">// fmt.Printf("keySlice \nType:%T Len:%d Cap:%d \n", keySlice, len(keySlice), cap(keySlice))</span>    <span class="token comment" spellcheck="true">//创建一个reflect.String类型的key，它的值为0</span>    <span class="token comment" spellcheck="true">// key := reflect.New(reflect.TypeOf("aa"))</span>    <span class="token comment" spellcheck="true">//设置key的值为"aa"</span>    <span class="token comment" spellcheck="true">// key.Elem().SetString("aa")</span>    <span class="token comment" spellcheck="true">//创建一个reflect.Bool类型的val，他的值为0</span>    <span class="token comment" spellcheck="true">// val := reflect.New(reflect.TypeOf(true))</span>    <span class="token comment" spellcheck="true">//设置val的值为true</span>    <span class="token comment" spellcheck="true">// val.Elem().SetBool(true)</span>    <span class="token comment" spellcheck="true">//给v添加一个键值对，key是键，val是值</span>    <span class="token comment" spellcheck="true">// v.SetMapIndex(key.Elem(), val.Elem())</span>    <span class="token comment" spellcheck="true">//清空所有键值对</span>    <span class="token comment" spellcheck="true">// v.SetMapIndex(keySlice[0], reflect.ValueOf(nil))</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"eyes"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T len:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里注意，slice，map，chan默认就是传地址</span>    <span class="token function">ceshiMap</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T len:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T len:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token function">ceshiMap</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T len:%d \nValue:%v \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>反射法操作结构体</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ceshiSteuct</span><span class="token punctuation">(</span>na <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">,</span> a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// t := reflect.TypeOf(a)</span>    <span class="token comment" spellcheck="true">//确保参数a是一个指针</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结构体类型传参是传的值，所以必须要传指针进来"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//确保参数a是一个struct类型</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是一个struct类型"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"boy"</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请确保参数a是一个结构体boy类型"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// //获取指定字段名的值</span>    <span class="token comment" spellcheck="true">// // fmt.Println(v.Elem().FieldByName("Name"))</span>    <span class="token comment" spellcheck="true">// x, ok := v.Elem().Type().FieldByName("Name")</span>    <span class="token comment" spellcheck="true">// if ok {</span>    <span class="token comment" spellcheck="true">//   fmt.Printf("已经找到参数a中字段名为'Name'的字段\n值为:[%v] \n", x)</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//返回参数a的子类boy，字符串类型</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Type:%T \n", v.Elem().Type().Name())</span>    <span class="token comment" spellcheck="true">//把参数a中的字段取出来存储到切片vfield中，方便后续操作</span>    <span class="token keyword">var</span> vfield <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value    <span class="token comment" spellcheck="true">//返回参数a的内部字段数量</span>    <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().NumField())</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取参数a的字段名字，如Name,Age等</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Name)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段数据类型</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Type)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段的tag</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Tag)</span>        <span class="token comment" spellcheck="true">//获取参数a的字段的指定Tag，例如下面获取的是ini的Tag</span>        <span class="token comment" spellcheck="true">// fmt.Println(v.Elem().Type().Field(i).Tag.Get("ini"))</span>        <span class="token comment" spellcheck="true">//v.Elen().Field(i)取出参数a中的第i个字段，reflect.Value类型</span>        vfield <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vfield<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> vfield <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取得参数a各字段的值</span>        <span class="token comment" spellcheck="true">// fmt.Printf("vfield: \nType:%T Value:%v \n", v, v)</span>        <span class="token comment" spellcheck="true">//取得各字段的数据类型</span>        <span class="token comment" spellcheck="true">// fmt.Printf("vfield: \nType:%T Value:%v \n", n.Type().Kind(), n.Type().Kind())</span>        <span class="token comment" spellcheck="true">//修改参数a的各字段值</span>        <span class="token keyword">switch</span> n<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>            n<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>na<span class="token punctuation">)</span>        <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>            n<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"暂时不支持的数据类型"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> boy <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Name <span class="token builtin">string</span> <span class="token string">`ini:"name"`</span>        Age  <span class="token builtin">int</span>    <span class="token string">`ini:"age"`</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> li <span class="token operator">=</span> boy<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"李雷"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//结构体和slice,map,chan不一样，结构体默认传值，必须要传指针进去才能进行下一步修改操作</span>    <span class="token function">ceshiSteuct</span><span class="token punctuation">(</span><span class="token string">"韩梅梅"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>li<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="ini配置文件解析程序实例"><a href="#ini配置文件解析程序实例" class="headerlink" title="ini配置文件解析程序实例"></a>ini配置文件解析程序实例</h3><p><strong>ini配置文件</strong></p><pre class=" language-ini"><code class="language-ini"># 这里也是注释<span class="token selector">[mysql]</span><span class="token constant">address</span><span class="token attr-value"><span class="token punctuation">=</span>192.168.1.12</span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>1990</span><span class="token constant">username</span><span class="token attr-value"><span class="token punctuation">=</span>root</span><span class="token constant">password</span><span class="token attr-value"><span class="token punctuation">=</span>abcdefg</span><span class="token comment" spellcheck="true">;[</span>#[]<span class="token comment" spellcheck="true">;[  ]</span># 这里是注释<span class="token selector">[redis]</span><span class="token constant">host</span><span class="token attr-value"><span class="token punctuation">=</span>125.34.89.46 </span><span class="token constant">port</span><span class="token attr-value"><span class="token punctuation">=</span>1990</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span>root</span><span class="token constant">password</span><span class="token attr-value"><span class="token punctuation">=</span> abcdefg</span><span class="token constant">moren</span><span class="token attr-value"><span class="token punctuation">=</span>true</span></code></pre><p><strong>ini解析程序</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span>    <span class="token string">"reflect"</span>    <span class="token string">"strconv"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//反射解析ini配置文件联系</span><span class="token comment" spellcheck="true">//mysql配置</span><span class="token keyword">type</span> MysqlConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Address  <span class="token builtin">string</span> <span class="token string">`ini:"address"`</span>    Port     <span class="token builtin">int</span>    <span class="token string">`ini:"port"`</span>    Username <span class="token builtin">string</span> <span class="token string">`ini:"username"`</span>    Password <span class="token builtin">string</span> <span class="token string">`ini:"password"`</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//redis配置</span><span class="token keyword">type</span> RedisConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Host     <span class="token builtin">string</span> <span class="token string">`ini:"host"`</span>    Port     <span class="token builtin">int</span>    <span class="token string">`ini:"port"`</span>    Username <span class="token builtin">string</span> <span class="token string">`ini:"username"`</span>    Password <span class="token builtin">string</span> <span class="token string">`ini:"password"`</span>    Moren    <span class="token builtin">bool</span>   <span class="token string">`ini:"moren"`</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把mysqlConfig和redisConfig嵌套进一个大结构体Config内</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>    MysqlConfig <span class="token string">`ini:"mysql" json:"MySql"`</span>    RedisConfig <span class="token string">`ini:"redis" json:"Redis"`</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//打开文件读取文件内容</span><span class="token keyword">func</span> <span class="token function">ParsIniFile</span><span class="token punctuation">(</span>fileName <span class="token builtin">string</span><span class="token punctuation">,</span> date <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//校验a的有效性</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//参数date必须是一个指针，因为在函数内要对date进行赋值</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"参数date必须是一个结构体指针"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//date必须是一个结构体</span>    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"参数date必须是一个结构体指针"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打开文件读取文件,把文件全部读取到lineBytr切片中</span>    fileByte<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"读取%s文件失败。Err:%s \n"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把lineByte转换为字符串，并且以回车符"\n"分割为字符串切片</span>    fileSlice <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>fileByte<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//保存参数data中的字段name，string类型</span>    <span class="token keyword">var</span> fieldName <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//遍历读取到的文件内容</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> filestr <span class="token operator">:=</span> <span class="token keyword">range</span> fileSlice <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//去除开头结尾的空白符</span>        filestr <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>filestr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//跳过空白行</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>filestr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//跳过";"和"#"开头的注释行</span>        <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">";"</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到以"["开头的行当做"[mysql]"节处理</span>        <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">"["</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"文件[%s]第[%d]语法错误,缺少']'"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//拿到"[]"的内容，以去除首尾空格。</span>            <span class="token comment" spellcheck="true">// 保存了从ini配置文件读取到的MysqlConfig结构体的Tag,数据类型是string</span>            structNameTag <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>filestr<span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token function">len</span><span class="token punctuation">(</span>filestr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//去掉首尾"["和"]"后，去掉首尾空格后计算长度，空字符串提示语法错误</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>structNameTag<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"文件[%s]第[%d]语法错误,'[]'内长度为0"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//从主结构体参数data中取出各字段的Tag，和ini配置文件中取得的Tag做对比</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//field依次获取到Config结构体内字段MysqlConfig和RedisConfig</span>                <span class="token keyword">if</span> structNameTag <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"ini"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//取得参数data字段的name，string类型</span>                    fieldName <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name                    <span class="token comment" spellcheck="true">//这里如果注释掉break，ini配置文件如有相同内容，下方内容优先。</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//存储MysqlConfig结构体，数据类型reflect.Value</span>            structField <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//date必须是一个结构体</span>            <span class="token keyword">if</span> structField<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>                <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"参数date的字段%s必须是一个结构体"</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//处理=号左右的内容</span>            <span class="token comment" spellcheck="true">//如果以"="开头提示语法错误</span>            <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"文件%s第%d行语法错误"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 取出ini文件=号左右的内容,以=号分隔为切片</span>            fieldTag <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>filestr<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//按照从ini文件中读取到的fieldTag找到对应的结构体字段</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> structField<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断从ini配置文件获取的MysqlConfig字段是否有效</span>                <span class="token keyword">if</span> structField<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token operator">!=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> structField<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"ini"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// //取得最终的字段例如Host,Uesename等信息，reflect.Value类型</span>                field <span class="token operator">:=</span> structField<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// fmt.Println(structField.Type().Field(i).Type)</span>                <span class="token comment" spellcheck="true">// fmt.Println(field.Type().Kind())</span>                <span class="token comment" spellcheck="true">//给结构体赋值</span>                <span class="token keyword">switch</span> field<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//string类型直接赋值操作</span>                <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>                    field<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//布尔类型赋值操作</span>                <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span>                    <span class="token keyword">var</span> v <span class="token builtin">bool</span>                    <span class="token comment" spellcheck="true">//用strconc包把字符串转换为系统支持的布尔类型</span>                    v<span class="token punctuation">,</span> err <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"ini配置文件%s第%d行语法错误，Bool类型仅支持如下语法：\n1,0,t,f,T,F,true,false,True,False,TRUE,FALSE\n。"</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//结构体字段赋值操作</span>                    field<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//int类型用strconv包转换string为int类型后赋值操作</span>                <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">:</span>                    <span class="token keyword">var</span> v <span class="token builtin">int64</span>                    v<span class="token punctuation">,</span> err <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"ini配置文件%s第%d行语法错误，这里应该是一串数字\n。"</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    field<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//uint类型用strconv包转换string为int类型后赋值操作</span>                <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Uint<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">:</span>                    <span class="token keyword">var</span> v <span class="token builtin">uint64</span>                    v<span class="token punctuation">,</span> err <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseUint</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>fieldTag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"ini配置文件%s第%d行语法错误，这里应该是一串数字\n。"</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    field<span class="token punctuation">.</span><span class="token function">SetUint</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> iniConfig Config    <span class="token comment" spellcheck="true">// var cfg string</span>    err <span class="token operator">:=</span> <span class="token function">ParsIniFile</span><span class="token punctuation">(</span><span class="token string">"./a.ini"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>iniConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Err:%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>iniConfig<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">aaa</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ref := reflect.ValueOf(a)</span>    <span class="token comment" spellcheck="true">// ref0 := ref.Elem().Field(0)</span>    <span class="token comment" spellcheck="true">// ref.Type()</span>    <span class="token comment" spellcheck="true">// fmt.Printf("ref: \nType:%T Value:%v \n", ref0, ref0.Type())</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// type dog struct {</span>    <span class="token comment" spellcheck="true">//   eyes string</span>    <span class="token comment" spellcheck="true">//   sex  bool</span>    <span class="token comment" spellcheck="true">//   fool int</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// b := dog{eyes: "眼睛", fool: 4, sex: true}</span>    <span class="token comment" spellcheck="true">// ret := reflect.ValueOf(b)</span>    <span class="token comment" spellcheck="true">//ValueOf保存的是b中各字段的值:{眼睛 true 4}</span>    <span class="token comment" spellcheck="true">// fmt.Printf("ret: \nType:%T Value:%v \n", ret, ret)</span>    <span class="token comment" spellcheck="true">//Kind保存的是结构体b的种类struct，数据类型是reflect.Kind</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Kind: \nType:%T Value:%v \n", ret.Kind(), ret.Kind())</span>    <span class="token comment" spellcheck="true">//NumField中结构体b中的字段数量3，数据类型是int</span>    <span class="token comment" spellcheck="true">// fmt.Printf("NumField: \nType:%T Value:%v \n", ret.NumField(), ret.NumField())</span>    <span class="token comment" spellcheck="true">//field中保存的是结构体b中第0个字段的值"眼睛"，数据类型是reflect.Value</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Field: \nType:%T Value:%v \n", ret.Field(0), ret.Field(0))</span>    <span class="token comment" spellcheck="true">//Field.Type保存的是结构体b中第0个字段的类型信息string</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Field: \nType:%T Value:%v \n", ret.Field(0), ret.Field(0).Type())</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Field: \nType:%T Value:%v \n", ret.Field(0), ret.Field(0).Elem())</span>    <span class="token comment" spellcheck="true">// fmt.Printf("Elem \nType:%T Value:%v \n", ret.Elem(), ret.Elem())</span>    <span class="token comment" spellcheck="true">// fmt.Printf("%v \n", ret.Field(0).CanSet())</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// fmt.Println(b)</span>    <span class="token comment" spellcheck="true">// aaa(&amp;b)</span>    <span class="token comment" spellcheck="true">// fmt.Println(b)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/golang/jie-kou/"/>
      <url>/golang/jie-kou/</url>
      
        <content type="html"><![CDATA[<p>在Go语言中接口<strong>interface</strong>是一种类型，一种抽象的类型。<br>interface是一组method的集合，是duck-type programming的一种体现。接口做的事情就像是定义一个协议<strong>规则</strong>，只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性<strong>数据</strong>，只关心行为<strong>方法</strong>。<br>为了保护你的Go语言职业生涯，请牢记<strong>接口（interface）是一类型</strong>。</p><h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><p>Go语言提倡面向接口编程。<br>每个接口由数个方法组成，接口的定义格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 接口类型名 <span class="token keyword">interface</span><span class="token punctuation">{</span>    方法名<span class="token function">1</span><span class="token punctuation">(</span> 参数列表<span class="token number">1</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">1</span>    方法名<span class="token function">2</span><span class="token punctuation">(</span> 参数列表<span class="token number">2</span> <span class="token punctuation">)</span> 返回值列表<span class="token number">2</span>    …<span class="token punctuation">}</span></code></pre><p>其中：</p><ul><li>接口名：使用type将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加er，如有写操作的接口叫Writer，有字符串功能的接口叫Stringer等。接口名最好要能突出该接口的类型含义。</li><li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li><li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li></ul><p>如下例:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义一个接口类型sayer</span><span class="token keyword">type</span> sayer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个结构体类型dog</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义另一个结构体类型cat</span><span class="token keyword">type</span> cat <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为为dog类型创建方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d dog<span class="token punctuation">)</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为cat类型创建方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c cat<span class="token punctuation">)</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"喵喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明dog类型变量dog1</span>    <span class="token keyword">var</span> dog1 <span class="token operator">=</span> dog<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明cat类型变量cat1</span>    <span class="token keyword">var</span> cat1 <span class="token operator">=</span> cat<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//变量dog1调用自己的方法</span>    dog1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//cat1调用自己的方法</span>    cat1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//接口实现，实例化接口变量x，类型为sayer</span>    <span class="token keyword">var</span> x sayer    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sayer类型变量x未赋值时：type:%T \n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sayer类型变量x赋值为dog1</span>    x <span class="token operator">=</span> dog1    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sayer类型变量x赋值dog1后：type:%T \n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用接口方式调用方法say()</span>    x<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sayer类型变量x重新赋值为cat1</span>    x <span class="token operator">=</span> cat1    <span class="token comment" spellcheck="true">//用接口方式调用方法say()</span>    x<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sayer类型变量x赋值cat1后：type:%T \n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="值接受者和指针接受者"><a href="#值接受者和指针接受者" class="headerlink" title="值接受者和指针接受者"></a>值接受者和指针接受者</h3><p>值接收者和指针接受者实现接口的区别<br>从下面的代码中我们可以发现，使用值接收者实现接口之后，不管是<code>dog</code>结构体还是结构体指针<code>*dog</code>类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针fugui内部会自动求值<code>*fugui</code></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义mover接口</span><span class="token keyword">type</span> mover <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里的方法是指针接受者，那么mo的赋值对象也必须是指针。如果是值接受者，那就无作为，可以mo的赋值对象可以是值也可以是指针。</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义dog类型结构体</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//wangcai和fugui都可以给mover类型变量mo赋值</span><span class="token comment" spellcheck="true">// //dog类型方法，值类型实现方法</span><span class="token comment" spellcheck="true">// func (d dog) move() {</span><span class="token comment" spellcheck="true">//   fmt.Println("狗会动")</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//指针接受者实现的方法，只能用指针类型的富贵给接口类型mo赋值。</span><span class="token comment" spellcheck="true">//dog类型方法，指针接受者实现的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"狗会叫"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mo mover    <span class="token comment" spellcheck="true">//wangcai保存的是值类型dog</span>    <span class="token keyword">var</span> wangcai <span class="token operator">=</span> dog<span class="token punctuation">{</span><span class="token punctuation">}</span>    mo <span class="token operator">=</span> wangcai    mo<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//fugui保存的是指针类型dog</span>    <span class="token keyword">var</span> fugui <span class="token operator">=</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token punctuation">}</span>    mo <span class="token operator">=</span> fugui    mo<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="一个类型实现多个接口"><a href="#一个类型实现多个接口" class="headerlink" title="一个类型实现多个接口"></a>一个类型实现多个接口</h3><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： Mover接口。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义接口sayer</span><span class="token keyword">type</span> sayer <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义接口mover</span><span class="token keyword">type</span> mover <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现一个say方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s说：旺旺旺～\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现一个move方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s跑走了 \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化变量fugui为dog类型指针</span>    <span class="token keyword">var</span> fugui <span class="token operator">=</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token string">"富贵"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例变量ss为sayer类型接口</span>    <span class="token keyword">var</span> ss sayer    <span class="token comment" spellcheck="true">//实例化变量mm为mover类型接口</span>    <span class="token keyword">var</span> mm mover    <span class="token comment" spellcheck="true">//为ss赋值</span>    ss <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//用接口方式调用方法say()</span>    ss<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//为mm赋值</span>    mm <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//用接口方式调用方法move()</span>    mm<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="多个类型实现同一个接口"><a href="#多个类型实现同一个接口" class="headerlink" title="多个类型实现同一个接口"></a>多个类型实现同一个接口</h3><p>Go语言中不同的类型还可以实现同一接口 首先我们定义一个Mover接口，它要求必须由一个move方法。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义一个接口mover类型</span><span class="token keyword">type</span> mover <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义第一个结构体类型dog</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    foot <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义第二个结构体类型car</span><span class="token keyword">type</span> car <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    foot <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s用%s跑的比我快 \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>foot<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为car类型实现一个方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>car<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s用%s跑的比我快 \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> c<span class="token punctuation">.</span>foot<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例化变量fugui为结构体dog类型</span>    <span class="token keyword">var</span> fugui <span class="token operator">=</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token string">"富贵"</span><span class="token punctuation">,</span> <span class="token string">"四条腿"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化luhu为结构体car类型</span>    <span class="token keyword">var</span> luhu <span class="token operator">=</span> <span class="token operator">&amp;</span>car<span class="token punctuation">{</span><span class="token string">"路虎"</span><span class="token punctuation">,</span> <span class="token string">"四个轮子"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化变量mm为接口mover类型</span>    <span class="token keyword">var</span> mm mover    <span class="token comment" spellcheck="true">//为mover类型变量赋值dog类型变量fugui</span>    mm <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//用接口方式调用方法move()</span>    mm<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//同样可以为mover类型变量赋值为car类型变量luhu</span>    mm <span class="token operator">=</span> luhu    <span class="token comment" spellcheck="true">//用接口方式调用方法move()</span>    mm<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="接口也可以嵌套"><a href="#接口也可以嵌套" class="headerlink" title="接口也可以嵌套"></a>接口也可以嵌套</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义一个接口eatAndmove类型</span><span class="token keyword">type</span> eatANDmove <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//嵌套另一个接口eater</span>    eater    <span class="token comment" spellcheck="true">//嵌套另一个接口mover</span>    mover<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义一个接口eater类型</span><span class="token keyword">type</span> eater <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义另一个接口mover类型</span><span class="token keyword">type</span> mover <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现方法move()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s跑的特别快 \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现方法eat()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>dog<span class="token punctuation">)</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s吃骨头不硌牙 \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例化变量fugui为结构体dog类型</span>    <span class="token keyword">var</span> fugui <span class="token operator">=</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span><span class="token string">"旺财"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化变量mm为接口mover类型</span>    <span class="token keyword">var</span> mm mover    <span class="token comment" spellcheck="true">//为mover类型变量mm赋值</span>    mm <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//用接口方式调用方法move()</span>    mm<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//实例化变量ee为接口eater类型</span>    <span class="token keyword">var</span> ee eater    <span class="token comment" spellcheck="true">//为eater类型变量ee赋值</span>    ee <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//接口方式调用方法</span>    ee<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//嵌套型接口使用方法</span>    <span class="token comment" spellcheck="true">//实例化变量eANDm为eatANDmove类型</span>    <span class="token keyword">var</span> eANDm eatANDmove    <span class="token comment" spellcheck="true">//为eANDm赋值</span>    eANDm <span class="token operator">=</span> fugui    <span class="token comment" spellcheck="true">//用接口方式调用两个方法eat()和move()</span>    eANDm<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    eANDm<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>正常情况下结构体要实现接口签名中的所有方法，才能赋值给该接口类型的变量。但是也有一种特殊情况，看下面代码，接口类型变量em要求必须实现eat()和move()两种方法，才能接受赋值。结构体ji类型变量gongji只实现了一个eat()方法，正常情况下肯定不能给em赋值，但是gongji结构体嵌套了一个结构体dog，而dog类型实现了方法move()，所以变量gongji满足了接口类型变量em的要求，所以可以正常赋值。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义接口eatAndmove类型</span><span class="token keyword">type</span> eatAndmove <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体ji类型</span><span class="token keyword">type</span> ji <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//嵌套一个结构体类型dog</span>    dog<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为dog类型实现mobe()方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d dog<span class="token punctuation">)</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s有四条腿 \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//为ji类型实现eat方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j ji<span class="token punctuation">)</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s吃虫子"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例化变量em为接口eatAndmove类型</span>    <span class="token keyword">var</span> em eatAndmove    <span class="token comment" spellcheck="true">// var fugui = &amp;dog{"富贵"}</span>    <span class="token comment" spellcheck="true">//实例化变量gongji为结构体ji类型指针</span>    <span class="token keyword">var</span> gongji <span class="token operator">=</span> <span class="token operator">&amp;</span>ji<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"大公鸡"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为变量em赋值gongji</span>    em <span class="token operator">=</span> gongji    <span class="token comment" spellcheck="true">//接口方式调用方法move()和eat()</span>    <span class="token comment" spellcheck="true">// gongji.eat()</span>    em<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    em<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p><strong>空接口的定义：</strong>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。空接口的变量可以存储任意类型的变量数据。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义并实例化一个空接口，注意这里用的var关键字</span>    <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    s <span class="token operator">:=</span> <span class="token string">"我是字符串"</span>    x <span class="token operator">=</span> s    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    i <span class="token operator">:=</span> <span class="token number">996</span>    x <span class="token operator">=</span> i    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token boolean">true</span>    x <span class="token operator">=</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组类型变量arr可以赋值给空接口x</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>    x <span class="token operator">=</span> arr    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//切片sil可以赋值给空接口x</span>    sil <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    sil <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"我是字符串"</span><span class="token punctuation">,</span> <span class="token string">"茅台酒"</span><span class="token punctuation">,</span> <span class="token string">"中国电信"</span><span class="token punctuation">}</span>    x <span class="token operator">=</span> sil    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T  V:%#v \n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//map类型变量ma可以赋值给空接口x</span>    ma <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    ma <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span>        <span class="token string">"茅台酒"</span><span class="token punctuation">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"中国电信"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>    ma<span class="token punctuation">[</span><span class="token string">"字符串"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    x <span class="token operator">=</span> ma    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v \n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>函数的<strong>参数</strong>和<strong>返回值</strong>都可以是空接口，如果参数是空接口，那么该函数可以接收任意类型的参数：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//参数为空接口的函数可以结束任意类型的参数,返回值同理。</span><span class="token keyword">func</span> <span class="token function">ff</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T \nValue:%#v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"我是字符串"</span>    <span class="token function">ff</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token function">ff</span><span class="token punctuation">(</span><span class="token number">976</span><span class="token punctuation">)</span>    <span class="token function">ff</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组类型变量arr可以赋值给空接口x</span>    arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>    <span class="token function">ff</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//切片sil可以赋值给空接口x</span>    sil <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    sil <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"我是字符串"</span><span class="token punctuation">,</span> <span class="token string">"茅台酒"</span><span class="token punctuation">,</span> <span class="token string">"中国电信"</span><span class="token punctuation">}</span>    <span class="token function">ff</span><span class="token punctuation">(</span>sil<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//map类型变量ma可以赋值给空接口x</span>    ma <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    ma <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span>        <span class="token string">"茅台酒"</span><span class="token punctuation">:</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"中国电信"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span>    ma<span class="token punctuation">[</span><span class="token string">"字符串"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">ff</span><span class="token punctuation">(</span>ma<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>map的值value也可以是空接口，也就是map的value是空接口的话，那么他可以保存任意类型的value值。这特么就是一个结构体了啊～～～</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ma <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    ma <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>        <span class="token string">"中国电信"</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>        <span class="token string">"字符串"</span><span class="token punctuation">:</span>  <span class="token string">"我是字符串"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    ma<span class="token punctuation">[</span><span class="token string">"布尔类型的值"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ma<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言，既然空接口可以存储任意类型的值，那么如何获取存储的具体数据类型呢？一个接口的值（简称接口值）是由一个具体类型和具体类型的值两部分组成的。这两部分分别称为接口的动态类型和动态值。<br>想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：</p><pre><code>x.(T)</code></pre><p>其中：</p><ul><li>x：表示类型为interface{}的变量</li><li>T：表示断言x可能是的类型。</li><li>返回值:<br>该语法返回两个参数，第一个参数是x转化为T类型后的变量，第二个值是一个布尔值，若为true则表示断言成功，为false则表示断言失败。</li></ul><p>看下面代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义并实例化一个空接口x。注意这里用的var关键字</span>    <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为x赋值</span>    x <span class="token operator">=</span> <span class="token string">"aaa"</span>    <span class="token comment" spellcheck="true">//看下面注解</span>    v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"v:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:bool Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"不是bool类型，猜错了"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注解：<br>把x强制转化为bool类型，如果x是bool类型，v拿到x的值，ok拿到返回值true，如果不是bool类型，ok返回false，v的返回值是你猜测类型的0值，如果你猜测是string的话v就是空字符串。这里猜测是bool类型，bool类型的0值是false。</p></blockquote><p>或者也可以使用switch来判断</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    x <span class="token operator">=</span> <span class="token string">"我是字符串"</span>    <span class="token keyword">switch</span> v <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type:%T Value:%v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"猜错了，都不是"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。</p><p>关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>注意：<strong>这是一道你需要回答“能”或者“不能”的题！</strong><br>首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Speak</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">Speak</span><span class="token punctuation">(</span>think <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>talk <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> think <span class="token operator">==</span> <span class="token string">"sb"</span> <span class="token punctuation">{</span>        talk <span class="token operator">=</span> <span class="token string">"你是个大帅比"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        talk <span class="token operator">=</span> <span class="token string">"您好"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//var peo People = &amp;Student{}</span>    <span class="token keyword">var</span> peo People <span class="token operator">=</span> Student<span class="token punctuation">{</span><span class="token punctuation">}</span>    think <span class="token operator">:=</span> <span class="token string">"bitch"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span><span class="token function">Speak</span><span class="token punctuation">(</span>think<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类型 类型别名 结构体和json</title>
      <link href="/golang/zi-ding-yi-lei-xing-lei-xing-bie-ming-jie-gou-ti-he-json/"/>
      <url>/golang/zi-ding-yi-lei-xing-lei-xing-bie-ming-jie-gou-ti-he-json/</url>
      
        <content type="html"><![CDATA[<h3 id="类型别名和自定义类型"><a href="#类型别名和自定义类型" class="headerlink" title="类型别名和自定义类型"></a>类型别名和自定义类型</h3><p>在Go语言中有一些基本的数据类型，如<code>string</code>、<code>整型</code>、<code>浮点型</code>、<code>布尔等数据类型</code>， Go语言中可以使用<strong>type</strong>关键字来定义自定义类型。<br>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过<strong>struct</strong>定义。例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> myint <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自定义类型</span>    <span class="token keyword">var</span> a myint    a <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:[%d] a类型：%T \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//类型别名</span><span class="token keyword">type</span> youint <span class="token operator">=</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类型别名</span>    <span class="token keyword">var</span> b youint    b <span class="token operator">=</span> <span class="token number">900</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b:[%d] b类型：%T \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="自定义类型和类型别名的区别："><a href="#自定义类型和类型别名的区别：" class="headerlink" title="自定义类型和类型别名的区别："></a>自定义类型和类型别名的区别：</h3><p>首先声明时不一样，类型别名要有一个<code>=</code>号。<br>其次使用占位符输出结果不一样，类型别名本质还是原类型，比如上面的<code>youint</code>本质还是<code>int</code>类型，这个别名只是让你写代码是更清晰明了，比如<code>rune</code>和<code>byte</code>就是类型别名，他们底层是<code>int32</code>，你定义<code>rune</code>是一看就知道这里保存的是一个字符，你当然可以使用<code>int32</code>，但是你看到<code>int32</code>是第一感觉是这货保存的是一个数字。类型别名只在代码编写期间有效，代码编译后就不存在你的类型别名<code>youint</code>了。类型别名仅仅只是为了让你更好的识别代码。自定义类型会一只存在，自定义类型用占位符<code>%T</code>输出显示<code>main.myint</code>说明这个类型是在<code>main</code>包中定义的一个<code>myint</code>类型。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p><h4 id="结构体的定义："><a href="#结构体的定义：" class="headerlink" title="结构体的定义："></a>结构体的定义：</h4><p>结构体的定义：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> 结构体名字 <span class="token keyword">struct</span> <span class="token punctuation">{</span>字段<span class="token number">1</span> 数据类型字段<span class="token number">2</span> 数据类型<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其中：</p><ul><li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li><li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li><li>字段类型：表示结构体字段的具体类型。</li></ul><p>列如定义一本书的结构体：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> book <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    number <span class="token builtin">int</span>    author <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    pub    <span class="token builtin">bool</span><span class="token punctuation">}</span></code></pre><h4 id="结构体实例化"><a href="#结构体实例化" class="headerlink" title="结构体实例化"></a>结构体实例化</h4><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 结构体实例 结构体类型</code></pre><p>如下面代码就是一个结构体的完整演示：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体类型</span><span class="token keyword">type</span> book <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    number <span class="token builtin">int</span>    author <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    pub    <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例化一个结构体</span>    <span class="token keyword">var</span> aa book    结构体字段赋值    aa<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"天堂路"</span>    aa<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">999</span>    aa<span class="token punctuation">.</span>author <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"钢蛋"</span><span class="token punctuation">,</span> <span class="token string">"socold"</span><span class="token punctuation">}</span>    aa<span class="token punctuation">.</span>pub <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">//访问结构体</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"aaType[%T] \n %#v \n 访问name字段[%s] \n"</span><span class="token punctuation">,</span> aa<span class="token punctuation">,</span> aa<span class="token punctuation">,</span> aa<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//访问结构体切片元素</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> bb book    bb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"天堂路"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"aaType[%T] \n %#v \n 访问name字段[%s] \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h4><p>匿名结构体多用于函数内部，临时使用一次。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//匿名结构体</span><span class="token keyword">var</span> a <span class="token keyword">struct</span> <span class="token punctuation">{</span>    x <span class="token builtin">int</span>    y <span class="token builtin">int</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">8</span>a<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><h4 id="结构体是值类型"><a href="#结构体是值类型" class="headerlink" title="结构体是值类型"></a>结构体是值类型</h4><p>结构体属于值类型，如下代码修改<code>cc.name</code>并不会改变<code>bb.name</code></p><pre class=" language-go"><code class="language-go">    <span class="token keyword">var</span> bb book    bb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"天堂路"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"aaType[%T] \n %#v \n 访问name字段[%s] \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bb<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    cc <span class="token operator">:=</span> bb    cc<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"地狱门"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h4 id="指针类型结构体"><a href="#指针类型结构体" class="headerlink" title="指针类型结构体"></a>指针类型结构体</h4><p>指针类型结构体，因为函数传参数是传的拷贝，所以在函数内修改结构体的字段数据并不会修改结构体本身，如有需要可以指针修改结构体具体字段数据，也可以创建指针类型结构体。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> book <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span> name2 <span class="token builtin">string</span>    number      <span class="token builtin">int</span>    author      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    pub         <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//要把一个结构体传进函数，要写结构体的名字。</span><span class="token keyword">func</span> <span class="token function">ff</span><span class="token punctuation">(</span>x book<span class="token punctuation">)</span> <span class="token punctuation">{</span>    x<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"地狱门"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在函数内修改结构体本体需要传指针</span><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>x <span class="token operator">*</span>book<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"地狱门"</span>    <span class="token comment" spellcheck="true">//只要保证函数接收参数是指针，这里就这样写，效果和上面一样</span>    x<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果仅仅传入结构体字段，参数类型应和结构体字段对应</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token string">"地狱门"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直接用'new()'创建指针类型结构体</span>    <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指针结构体字段赋值</span>    <span class="token punctuation">(</span><span class="token operator">*</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"BookName"</span>    <span class="token punctuation">(</span><span class="token operator">*</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span>pub <span class="token operator">=</span> <span class="token boolean">true</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> aa<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指针型结构体直接使用，不在取址</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>number<span class="token punctuation">)</span>    <span class="token function">f1</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>number<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//正常结构体变量bb</span>    <span class="token keyword">var</span> bb book    bb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"天堂路"</span>    bb<span class="token punctuation">.</span>pub <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// //在函数内部修改'book'类型的变量'bb'不会改变本体</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span>    <span class="token comment" spellcheck="true">// ff(bb)</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span>    <span class="token comment" spellcheck="true">// //传入指针才会修改'book'类型变量'bb'的本体</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span>    <span class="token comment" spellcheck="true">// f1(&amp;bb)</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span>    <span class="token comment" spellcheck="true">// //函数内部修改结构体字段</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span>    <span class="token comment" spellcheck="true">// f2(&amp;(bb.name))</span>    <span class="token comment" spellcheck="true">// fmt.Println(bb.name)</span><span class="token punctuation">}</span></code></pre><h4 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h4><p>结构体初始化后不对字段复制，该字段的值为对应数据类型的<strong>0</strong>值。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//简化声明结构体变量</span>aa <span class="token operator">:=</span> book<span class="token punctuation">{</span>    name<span class="token punctuation">:</span>   <span class="token string">"BookName"</span><span class="token punctuation">,</span>    name2<span class="token punctuation">:</span>  <span class="token string">"BOOKNAME"</span><span class="token punctuation">,</span>    pub<span class="token punctuation">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"socold"</span><span class="token punctuation">,</span> <span class="token string">"好冷"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没赋值的字段为对应类型的空值</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"aa.name2:[%v] \n"</span><span class="token punctuation">,</span> aa<span class="token punctuation">.</span>number<span class="token punctuation">)</span></code></pre><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//值列表初始化结构体变量'bb'</span>bb <span class="token operator">:=</span> book<span class="token punctuation">{</span>    <span class="token string">"BookName"</span><span class="token punctuation">,</span>    <span class="token string">"BOOKNAME"</span><span class="token punctuation">,</span>    <span class="token number">688</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"socold"</span><span class="token punctuation">,</span> <span class="token string">"好冷"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bb<span class="token punctuation">)</span></code></pre><p>使用这种格式初始化时，需要注意：</p><ul><li>必须初始化结构体的所有字段。</li><li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li><li>该方式不能和键值初始化方式混用。</li></ul><h4 id="用构造函数初始化结构体"><a href="#用构造函数初始化结构体" class="headerlink" title="用构造函数初始化结构体"></a>用构造函数初始化结构体</h4><p>用构造函数初始化结构体变量，有的时候要初始化多个同一结构体类型的变量，也可以构造一个函数来初始化结构体变量，省时省力，方便快捷。下面这个代码就用一个构造函数来初始化结构体，返回的是一个指针，建议用构造函数初始化结构体是返回指针，提高程序运行效率。因为函数传参数是拷贝副本，如果只返回一个指针比拷贝一个构造体返回更节省程序运行空间。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> book <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span> name2 <span class="token builtin">string</span>    number      <span class="token builtin">int</span>    author      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    pub         <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造函数创建结构体</span><span class="token keyword">func</span> <span class="token function">newBook</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name2 <span class="token builtin">string</span><span class="token punctuation">,</span> number <span class="token builtin">int</span><span class="token punctuation">,</span> pub <span class="token builtin">bool</span><span class="token punctuation">,</span> author <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>book <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>book<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        name2<span class="token punctuation">:</span>  name2<span class="token punctuation">,</span>        number<span class="token punctuation">:</span> number<span class="token punctuation">,</span>        pub<span class="token punctuation">:</span>    pub<span class="token punctuation">,</span>        author<span class="token punctuation">:</span> author<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一个结构体'book'类型变量</span>    aa <span class="token operator">:=</span> <span class="token function">newBook</span><span class="token punctuation">(</span><span class="token string">"BookName"</span><span class="token punctuation">,</span> <span class="token string">"BOOKNAME"</span><span class="token punctuation">,</span> <span class="token number">996</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"haoleng"</span><span class="token punctuation">,</span> <span class="token string">"socold"</span><span class="token punctuation">,</span> <span class="token string">"好冷"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//第二个结构体'book'类型变量</span>    bb <span class="token operator">:=</span> <span class="token function">newBook</span><span class="token punctuation">(</span><span class="token string">"NameTwo"</span><span class="token punctuation">,</span> <span class="token string">"NAMETWO"</span><span class="token punctuation">,</span> <span class="token number">665</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"作者A"</span><span class="token punctuation">,</span> <span class="token string">"作战B"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="结构体内存布局"><a href="#结构体内存布局" class="headerlink" title="结构体内存布局"></a>结构体内存布局</h3><p>结构体内存布局<br>结构体占用一块连续的内存。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">{</span>    a <span class="token builtin">int8</span>    b <span class="token builtin">int8</span>    c <span class="token builtin">int8</span>    d <span class="token builtin">int8</span><span class="token punctuation">}</span>n <span class="token operator">:=</span> test<span class="token punctuation">{</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.a %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.b %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.c %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>c<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n.d %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">.</span>d<span class="token punctuation">)</span></code></pre><p>输出：</p><blockquote><p>n.a 0xc0000a0060<br>n.b 0xc0000a0061<br>n.c 0xc0000a0062<br>n.d 0xc0000a0063</p></blockquote><p>【进阶知识点】关于Go语言中的内存对齐推荐阅读:在 Go 中恰到好处的<a href="https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&amp;utm_medium=studygolang.com&amp;utm_source=studygolang.com">内存对齐</a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Go语言中的方法<strong>Method</strong>是一种作用于特定类型变量的函数。这种特定类型变量叫做接收者<strong>Receiver</strong>。接收者的概念就类似于其他语言中的<code>this</code>或者<code>self</code>。</p><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>方法的定义格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>接收者变量 接收者类型<span class="token punctuation">)</span> 方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span></code></pre><p>其中，</p><ul><li>接收者变量：<br>接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等。</li><li>接收者类型：<br>接收者类型和参数类似，可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回参数：<br>具体格式与函数定义相同</li></ul><h4 id="值接受者"><a href="#值接受者" class="headerlink" title="值接受者"></a>值接受者</h4><p>方法也是一个函数，他是一个只允许特定类型调用的函数，如下代码<code>xiaotian</code>和<code>diting</code>都是<code>Dog</code>类型结构体，可以调用方法函数<code>kan()</code>,而<code>nazha</code>是<code>ren</code>类型结构体，不能调用方法函数<code>kan()</code>。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Dog 这是结构体Dog类型</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    colur  <span class="token builtin">string</span>    zhuren <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结构体ren类型</span><span class="token keyword">type</span> ren <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    city <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Dog类型结构体构造函数</span><span class="token keyword">func</span> <span class="token function">newDog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> colur<span class="token punctuation">,</span> zhuren <span class="token builtin">string</span><span class="token punctuation">)</span> Dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> Dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        colur<span class="token punctuation">:</span>  colur<span class="token punctuation">,</span>        zhuren<span class="token punctuation">:</span> zhuren<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ren类型结构体构造函数</span><span class="token keyword">func</span> <span class="token function">newren</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ren <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法和接受者</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">kan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"薅狗毛～%s的%s:汪汪汪～\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>colur<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有构造函数初始化dog类型结构体，返回dog类型本身</span>    xiaotian <span class="token operator">:=</span> <span class="token function">newDog</span><span class="token punctuation">(</span><span class="token string">"哮天"</span><span class="token punctuation">,</span> <span class="token string">"黑色"</span><span class="token punctuation">,</span> <span class="token string">"哪吒"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span>    diting <span class="token operator">:=</span> <span class="token function">newDog</span><span class="token punctuation">(</span><span class="token string">"谛听"</span><span class="token punctuation">,</span> <span class="token string">"金色"</span><span class="token punctuation">,</span> <span class="token string">"地藏菩萨"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用构造函数初始化ren类型结构体,返回指针</span>    nezha <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"三太子"</span><span class="token punctuation">,</span> <span class="token string">"天庭"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nezha<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//xiaotian的类型是Dog，可以调用方法函数kan()</span>    xiaotian<span class="token punctuation">.</span><span class="token function">kan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//diting的类型是Dog，可以调用方法函数kan()</span>    diting<span class="token punctuation">.</span><span class="token function">kan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//nezha的类型是ren，不允许调用方法函数kan()</span>    <span class="token comment" spellcheck="true">// nezha.kan()</span><span class="token punctuation">}</span></code></pre><p>上面代码属于值接受者方法，只能调用<code>Dog</code>中的字段<code>name</code>不能修改，所以可以使用指针接受者修改方法函数。</p><h4 id="指针接受者"><a href="#指针接受者" class="headerlink" title="指针接受者"></a>指针接受者</h4><p>另外使用指针接受者方法值是传送一个内存地址到方法函数，比值接受者方法拷贝整个<code>Dog</code>结构体到方法函数要节省程序运行效率，推荐使用指针接受者方法。如下<code>jiaoyi()</code>函数就是一个指针接受者方法函数。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Dog 这是结构体Dog类型</span><span class="token keyword">type</span> Dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    colur  <span class="token builtin">string</span>    zhuren <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Dog类型结构体构造函数</span><span class="token keyword">func</span> <span class="token function">newDog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> colur<span class="token punctuation">,</span> zhuren <span class="token builtin">string</span><span class="token punctuation">)</span> Dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> Dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        colur<span class="token punctuation">:</span>  colur<span class="token punctuation">,</span>        zhuren<span class="token punctuation">:</span> zhuren<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法和值接受者</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d Dog<span class="token punctuation">)</span> <span class="token function">kan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"薅狗毛～%s的%s:汪汪汪～\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>colur<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指针接受者方法函数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">jiaoyi</span><span class="token punctuation">(</span>zhuren <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    d<span class="token punctuation">.</span>zhuren <span class="token operator">=</span> zhuren<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有构造函数初始化dog类型结构体，返回dog类型本身</span>    xiaotian <span class="token operator">:=</span> <span class="token function">newDog</span><span class="token punctuation">(</span><span class="token string">"哮天"</span><span class="token punctuation">,</span> <span class="token string">"黑色"</span><span class="token punctuation">,</span> <span class="token string">"哪吒"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指针接受者方法函数</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span>    xiaotian<span class="token punctuation">.</span><span class="token function">jiaoyi</span><span class="token punctuation">(</span><span class="token string">"地藏菩萨"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="任意类型添加方法"><a href="#任意类型添加方法" class="headerlink" title="任意类型添加方法"></a>任意类型添加方法</h4><p>任意类型添加方法函数，如果要其它类型添加方法怎么办，比如<code>int</code>，正常方法肯定不行，但是我们可以自定义类型。可以把<code>int</code>自定义为<code>myint</code>就可以给他添加一个方法了。<br><strong>注意事项：</strong></p><blockquote><p>非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。声明自定义变量是要使用myint()强制转换一下，不然编译器默认哦int类型。</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> mystring <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mystr <span class="token operator">*</span>mystring<span class="token punctuation">)</span> <span class="token function">fangfa</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>mystr <span class="token operator">=</span> <span class="token function">mystring</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bb <span class="token operator">=</span> <span class="token function">mystring</span><span class="token punctuation">(</span><span class="token string">"我是自定义类型字符串"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bb Type:%T -----%s \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">)</span>    bb<span class="token punctuation">.</span><span class="token function">fangfa</span><span class="token punctuation">(</span><span class="token string">"我可以使用方法"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bb Type:%T -----%s \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">&amp;</span>bb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fangfa</span><span class="token punctuation">(</span><span class="token string">"(&amp;bb).fangfa()不加（）也没问题"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bb Type:%T -----%s \n"</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="结构体匿名字段"><a href="#结构体匿名字段" class="headerlink" title="结构体匿名字段"></a>结构体匿名字段</h4><p>结构体匿名字段,结构体也可以不指定字段名字，访问结构体字段是使用字段的类型即可，但是如果多个字段都是同一数据类型会出错，编译不会通过。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> pp <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span>    <span class="token builtin">int</span>    <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// // 匿名字段结构体多个字段同属一个数据类型会报错</span><span class="token comment" spellcheck="true">// type dog struct {</span><span class="token comment" spellcheck="true">//   string</span><span class="token comment" spellcheck="true">//   string</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    aa <span class="token operator">:=</span> pp<span class="token punctuation">{</span>        <span class="token string">"哪吒"</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//访问匿名字段结构体可以使用字段的数据类型</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h4><p>嵌套结构体结构体的字段可以是另外一个结构体。字段名字后面的数据类型写结构体的名字即可。注意看下面代码，除非指定<code>xiaotian.zhuren</code>的类型是指针，否则都是把<code>taizi</code>的数据完整的拷贝到<code>xiaotian.zhuren</code>下面。。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体ren类型</span><span class="token keyword">type</span> ren <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span>    city <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    color  <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//这里zhuren字段是嵌套的结构体ren类型。</span>    zhuren ren<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ren类型实例化构造函数</span><span class="token keyword">func</span> <span class="token function">newren</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ren <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dog类型构造函数</span><span class="token comment" spellcheck="true">//注意这里主人类型是指针</span><span class="token keyword">func</span> <span class="token function">newdog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">,</span> zhuren <span class="token operator">*</span>ren<span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        color<span class="token punctuation">:</span>  color<span class="token punctuation">,</span>        zhuren<span class="token punctuation">:</span> <span class="token operator">*</span>zhuren<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用构造函数实例化ren类型taizi</span>    taizi <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"三太子"</span><span class="token punctuation">,</span> <span class="token string">"天庭"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>taizi<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> taizi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用构造函数实例化dog类型xiaotian</span>    xiaotian <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"哮天"</span><span class="token punctuation">,</span> <span class="token string">"黑色"</span><span class="token punctuation">,</span> taizi<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n "</span><span class="token punctuation">,</span> xiaotian<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> xiaotian<span class="token punctuation">.</span>zhuren<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//xiaotian.zhuren.name的内存地址和taizi.name的地址不同</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"哮天主人名字：%s 指针:%v \n"</span><span class="token punctuation">,</span> xiaotian<span class="token punctuation">.</span>zhuren<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>xiaotian<span class="token punctuation">.</span>zhuren<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"三太子名字：%s 指针:%v \n"</span><span class="token punctuation">,</span> taizi<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>taizi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="匿名字段嵌套结构体"><a href="#匿名字段嵌套结构体" class="headerlink" title="匿名字段嵌套结构体"></a>匿名字段嵌套结构体</h4><p>匿名字段嵌套结构体，如下面代码结构体dog的第三个字段就是一个匿名字段外带嵌套结构体，此时只写被嵌套结构体的名字<code>ren</code>，访问和赋值时使用<code>dog</code>类型变量<code>diting.age</code>即可访问或者赋值该嵌套结构体内字段<code>age</code>。具体原理和变量作用域类似，结构体<code>dog</code>找不到字段<code>age</code>就会去嵌套的结构体内寻找字段<code>age</code>。如果字段名处突，例如字段名<code>name</code>在结构体<code>ren</code>和<code>dog</code>都存在时，默认优先选择本结构体<code>dog</code>的字段<code>name</code>，此时要访问被嵌套结构体<code>ren</code>内的字段<code>name</code>就需要明确指定<code>xiaotian.ren.name</code>了。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体ren类型</span><span class="token keyword">type</span> ren <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span>    city <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    color <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//dog的匿名字段</span>    ren<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ren类型实例化构造函数</span><span class="token keyword">func</span> <span class="token function">newren</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ren <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dog类型构造函数</span><span class="token comment" spellcheck="true">//注意这里主人类型是指针，且是一个匿名字段</span><span class="token keyword">func</span> <span class="token function">newdog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">,</span> zhuren <span class="token operator">*</span>ren<span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里用列表式初始化</span>        name<span class="token punctuation">,</span>        color<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//这个字段是匿名字段</span>        <span class="token operator">*</span>zhuren<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用构造函数实例化ren类型taizi</span>    taizi <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"三太子"</span><span class="token punctuation">,</span> <span class="token string">"天庭"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用构造函数实例化ren类型taizi</span>    heiyuan <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"黑猿王"</span><span class="token punctuation">,</span> <span class="token string">"厌火国"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用构造函数实例化dog类型</span>    huodou <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"祸斗"</span><span class="token punctuation">,</span> <span class="token string">"火红"</span><span class="token punctuation">,</span> heiyuan<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"主人名：%s 狗名：%s \n"</span><span class="token punctuation">,</span> huodou<span class="token punctuation">.</span>ren<span class="token punctuation">.</span>name<span class="token punctuation">,</span> huodou<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用列表赋值方式实例话结构体dog类型xiaotian</span>    <span class="token keyword">var</span> xiaotian <span class="token operator">=</span> dog<span class="token punctuation">{</span>        <span class="token string">"哮天"</span><span class="token punctuation">,</span>        <span class="token string">"黑色"</span><span class="token punctuation">,</span>        <span class="token operator">*</span>taizi<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//实例化结构体dog类型diting</span>    <span class="token keyword">var</span> diting dog    <span class="token comment" spellcheck="true">//dog各字段赋值</span>    diting<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"谛听"</span>    diting<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"金色"</span>    <span class="token comment" spellcheck="true">//dog匿名字段赋值和访问</span>    diting<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">9999</span>    diting<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"地狱"</span>    <span class="token comment" spellcheck="true">//dog冲突字段访问和赋值</span>    diting<span class="token punctuation">.</span>ren<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"地藏王菩萨"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>diting<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="结构体中类似继承的概念"><a href="#结构体中类似继承的概念" class="headerlink" title="结构体中类似继承的概念"></a>结构体中类似继承的概念</h4><p>结构体的”继承”，Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。至于下面代码中错误写法为啥会出错，懒得解释了，就一句话，类型不符。该方法只能接受<code>ren</code>类型，虽然你传<code>dog</code>类型进去，但是<code>dog</code>类型把<code>ren</code>类型嵌套在自己体内了，所以可以运行。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体ren类型</span><span class="token keyword">type</span> ren <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span>    city <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义结构体dog类型</span><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    color <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//dog的匿名字段</span>    ren<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ren类型实例化构造函数</span><span class="token keyword">func</span> <span class="token function">newren</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ren <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dog类型构造函数</span><span class="token keyword">func</span> <span class="token function">newdog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">,</span> zhuren <span class="token operator">*</span>ren<span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span>        name<span class="token punctuation">,</span>        color<span class="token punctuation">,</span>        <span class="token operator">*</span>zhuren<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//匿名字段嵌套结构体配合方法函数，模拟继承的概念</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r ren<span class="token punctuation">)</span> <span class="token function">home</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s家住在%s \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> r<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//错误的示范～～～</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r ren<span class="token punctuation">)</span> <span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s家住在%s \n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>name<span class="token punctuation">,</span> r<span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用构造函数实例化ren类型</span>    taizi <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"三太子"</span><span class="token punctuation">,</span> <span class="token string">"天庭"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    dizang <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"地藏王菩萨"</span><span class="token punctuation">,</span> <span class="token string">"地狱"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span>    heiyuan <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"黑猿王"</span><span class="token punctuation">,</span> <span class="token string">"厌火国"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//用构造函数实例化dog类型</span>    huodou <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"祸斗"</span><span class="token punctuation">,</span> <span class="token string">"火红"</span><span class="token punctuation">,</span> heiyuan<span class="token punctuation">)</span>    xiaotian <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"哮天"</span><span class="token punctuation">,</span> <span class="token string">"黑色"</span><span class="token punctuation">,</span> taizi<span class="token punctuation">)</span>    diting <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"谛听"</span><span class="token punctuation">,</span> <span class="token string">"金色"</span><span class="token punctuation">,</span> dizang<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//正确模拟继承</span>    taizi<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>taizi<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    dizang<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>dizang<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    heiyuan<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>heiyuan<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    huodou<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>huodou<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    xiaotian<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    diting<span class="token punctuation">.</span><span class="token function">home</span><span class="token punctuation">(</span>diting<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//错误示范～～～</span>    taizi<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dizang<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    heiyuan<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    huodou<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xiaotian<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    diting<span class="token punctuation">.</span><span class="token function">homeXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="结构体与JSON序列化"><a href="#结构体与JSON序列化" class="headerlink" title="结构体与JSON序列化"></a>结构体与JSON序列化</h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号<code>""</code>包裹，使用冒号<code>:</code>分隔，然后紧接着是值。多个键值之间使用英文<code>,</code>分隔。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//定义结构体ren类型</span><span class="token keyword">type</span> ren <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过Tag实现JSON序列化该字段的Key</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>    <span class="token comment" spellcheck="true">//字段名首字母大写为公有字段名</span>    Age <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">//私有字段名不能被JSON获取</span>    city <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ren类型实例化构造函数</span><span class="token keyword">func</span> <span class="token function">newren</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> city <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ren <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        Age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>        city<span class="token punctuation">:</span> city<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用构造函数实例化ren类型</span>    heiyuan <span class="token operator">:=</span> <span class="token function">newren</span><span class="token punctuation">(</span><span class="token string">"黑猿王"</span><span class="token punctuation">,</span> <span class="token string">"厌火国"</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//JSON序列化：结构体--->JSON式字符串</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>heiyuan<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//JSON反序列化：JSON格式字符串--->结构体</span>    str <span class="token operator">:=</span> <span class="token string">`{"Name":"地藏王菩萨","Age":800}`</span>    <span class="token comment" spellcheck="true">//这里dizang拿到的是ren类型指针</span>    <span class="token keyword">var</span> dizang <span class="token operator">=</span> <span class="token operator">&amp;</span>ren<span class="token punctuation">{</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> dizang<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里直接传入dizang即可，他保存的数据就是ren类型指针</span>    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> dizang<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"err:[%v] \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dizang<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//JSON反序列化例2</span>    sss <span class="token operator">:=</span> <span class="token string">`{"Name":"三太子","Age":3}`</span>    <span class="token comment" spellcheck="true">//注意这里taizi拿到的是ren类型本身</span>    <span class="token keyword">var</span> taizi <span class="token operator">=</span> ren<span class="token punctuation">{</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T \n"</span><span class="token punctuation">,</span> taizi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//反序列化是要传入taizi的指针</span>    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>taizi<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"err:[%v] \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>taizi<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="结构体和方法补充知识点"><a href="#结构体和方法补充知识点" class="headerlink" title="结构体和方法补充知识点"></a>结构体和方法补充知识点</h3><p>因为<code>slice</code>和<code>map</code>这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name   <span class="token builtin">string</span>    zhuren <span class="token builtin">string</span>    jineng <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dog构造函数</span><span class="token keyword">func</span> <span class="token function">newdog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> zhuren <span class="token builtin">string</span><span class="token punctuation">,</span> jineng <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        zhuren<span class="token punctuation">:</span> zhuren<span class="token punctuation">,</span>        jineng<span class="token punctuation">:</span> jineng<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dog构造函数22</span><span class="token keyword">func</span> <span class="token function">newdog2</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> zhuren <span class="token builtin">string</span><span class="token punctuation">,</span> jineng <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>dog<span class="token punctuation">{</span>        name<span class="token punctuation">:</span>   name<span class="token punctuation">,</span>        zhuren<span class="token punctuation">:</span> zhuren<span class="token punctuation">,</span>        jineng<span class="token punctuation">:</span> jineng<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正确无bug构造函数</span><span class="token keyword">func</span> <span class="token function">newdog3</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> zhuren <span class="token builtin">string</span><span class="token punctuation">,</span> jineng <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>dog <span class="token punctuation">{</span>    <span class="token keyword">var</span> a dog    a<span class="token punctuation">.</span>name <span class="token operator">=</span> name    a<span class="token punctuation">.</span>zhuren <span class="token operator">=</span> zhuren    a<span class="token punctuation">.</span>jineng <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>jineng<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>jineng<span class="token punctuation">,</span> jineng<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    xiaotian <span class="token operator">:=</span> <span class="token function">newdog</span><span class="token punctuation">(</span><span class="token string">"哮天犬"</span><span class="token punctuation">,</span> <span class="token string">"哪吒"</span><span class="token punctuation">,</span> <span class="token string">"狗仗人势"</span><span class="token punctuation">,</span> <span class="token string">"人模狗样"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xiaotian<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//有Bug的构造函数</span>    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"潜龙在渊"</span><span class="token punctuation">,</span> <span class="token string">"飞龙在天"</span><span class="token punctuation">}</span>    diting <span class="token operator">:=</span> <span class="token function">newdog2</span><span class="token punctuation">(</span><span class="token string">"谛听"</span><span class="token punctuation">,</span> <span class="token string">"地藏王菩萨"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>diting<span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"打狗棒法"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>diting<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//data和diting.jineng都指向同一内存地址。</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"data指针:[%v] \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"谛听技能指针:[%v] \n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>diting<span class="token punctuation">.</span>jineng<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修改后的构造函数</span>    data_huo <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"九阴白骨爪"</span><span class="token punctuation">,</span> <span class="token string">"易筋经"</span><span class="token punctuation">}</span>    huodou <span class="token operator">:=</span> <span class="token function">newdog3</span><span class="token punctuation">(</span><span class="token string">"祸斗"</span><span class="token punctuation">,</span> <span class="token string">"黑猿王"</span><span class="token punctuation">,</span> data_huo<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>huodou<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// data_huo[0] = "打狗棒法"</span>    <span class="token comment" spellcheck="true">// fmt.Println(huodou)</span><span class="token punctuation">}</span></code></pre><p>同样的问题也存在于返回值<code>slice</code>和<code>map</code>的情况，在实际编码过程中一定要注意这个问题。</p><h3 id="实例-学员管理系统"><a href="#实例-学员管理系统" class="headerlink" title="实例-学员管理系统"></a>实例-学员管理系统</h3><p>实例学员管理系统，支持添加，修改，删除，查找学员。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// stu 结构体，存储学员信息</span><span class="token keyword">type</span> stu <span class="token keyword">struct</span> <span class="token punctuation">{</span>    age<span class="token punctuation">,</span> grade <span class="token builtin">int</span>    name       <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//input 全局变量，获取命令选择</span>    input_int <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// stus 切片，学员列表</span><span class="token keyword">var</span> stus <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>stu<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//stu构造函数</span><span class="token keyword">func</span> <span class="token function">newStu</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> grade <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>stu <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">{</span>        age<span class="token punctuation">:</span>   age<span class="token punctuation">,</span>        grade<span class="token punctuation">:</span> grade<span class="token punctuation">,</span>        name<span class="token punctuation">:</span>  name<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//刷新学员列表</span><span class="token keyword">func</span> <span class="token function">showStus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> stus <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查询学员信息</span><span class="token keyword">func</span> <span class="token function">findStus</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> y <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//添加学员信息</span><span class="token keyword">func</span> <span class="token function">addStus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        newid<span class="token punctuation">,</span> newage<span class="token punctuation">,</span> newgrade <span class="token builtin">int</span>        newname<span class="token punctuation">,</span> cmdyes         <span class="token builtin">string</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newid<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">findStus</span><span class="token punctuation">(</span>newid<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"该学员已存在"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newname<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newage<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"请输入成绩："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newgrade<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"确认添加一下学员信息："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> newid<span class="token punctuation">,</span> newname<span class="token punctuation">,</span> newage<span class="token punctuation">,</span> newgrade<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入'yes'确认添加该学员信息："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmdyes<span class="token punctuation">)</span>    <span class="token keyword">if</span> cmdyes <span class="token operator">!=</span> <span class="token string">"yes"</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入错误，退出添加学员"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    stus<span class="token punctuation">[</span>newid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newStu</span><span class="token punctuation">(</span>newage<span class="token punctuation">,</span> newgrade<span class="token punctuation">,</span> newname<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">findStus</span><span class="token punctuation">(</span>newid<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"已添加该学员信息～～"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"未知错误导致添加失败!!!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">editStus</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        cmd<span class="token punctuation">,</span> newage<span class="token punctuation">,</span> newgrade <span class="token builtin">int</span>        newname               <span class="token builtin">string</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[1]修改姓名\t"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[2]修改年龄\t"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[3]修改成绩\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"你选择修改："</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span>    <span class="token keyword">switch</span> cmd <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//修改姓名</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入新的姓名："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newname<span class="token punctuation">)</span>        stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> newname        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//修改年龄</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入新的年龄："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newage<span class="token punctuation">)</span>        stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> newage        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">//修改成绩</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入新的成绩："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newgrade<span class="token punctuation">)</span>        stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> newgrade        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"学号：%d 姓名：%s 年龄：%d 成绩：%d \n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> stus<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"未识别命令，退出修改"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//刷新学员列表</span>    stus<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newStu</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">"二蛋"</span><span class="token punctuation">)</span>    stus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newStu</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">"铁锤"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"学员管理系统"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//显示操作菜单</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[1]刷新\t"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[2]添加\t"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[3]修改\t"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[4]删除\t"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[5]查询\t"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"[6]退出\n"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//执行对应操作</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"选择操作序号："</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> cmdNo <span class="token builtin">int</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cmdNo<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//菜单解析</span>        <span class="token keyword">switch</span> cmdNo <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//刷新学员信息</span>            <span class="token function">showStus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//添加学员信息</span>            <span class="token function">addStus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//修改学员信息</span>            <span class="token keyword">var</span> editId <span class="token builtin">int</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入要修改的学号："</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>editId<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">findStus</span><span class="token punctuation">(</span>editId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"尚未收录该学号学员～～"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            <span class="token function">editStus</span><span class="token punctuation">(</span>editId<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//删除学员信息</span>            <span class="token keyword">var</span> delId <span class="token builtin">int</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入要删除的学号："</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delId<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">findStus</span><span class="token punctuation">(</span>delId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"尚未收录该学号学员～～"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"##########"</span><span class="token punctuation">)</span>            <span class="token function">delete</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> delId<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//查询学员信息</span>            <span class="token keyword">var</span> quId <span class="token builtin">int</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"输入要查询的学号："</span><span class="token punctuation">)</span>            fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quId<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">findStus</span><span class="token punctuation">(</span>quId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"尚未收录该学号学员～～"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//退出系统</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">//未识别菜单选项</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"输入序号后回车，请勿输入其它～～"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> 结构体 </tag>
            
            <tag> 自定义类型 </tag>
            
            <tag> 类型别名 </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和MAP类型</title>
      <link href="/golang/zhi-zhen-he-map-lei-xing/"/>
      <url>/golang/zhi-zhen-he-map-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h3><p>指针也是一种数据类型，也可以使用<code>var</code>来声明：<code>var 变量名 *数据类型</code>注意，这里的变量名实际保存的数据是一个十六进制的内存地址，这里的数据类型指的是这个十六进制的内存地址要保存的数据类型。这里就生成了一个<code>int</code>类型的指针。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span><span class="token comment" spellcheck="true">//声明变量'a'为'int'类型指针</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true">//根据'*a'的地址赋值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出'*a'的数据</span><span class="token punctuation">}</span></code></pre><p>运行报错如下：</p><blockquote><p>panic: runtime error: invalid memory address or nil pointer dereference<br>[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x64160555b4]<br>goroutine 1 [running]:<br>main.main()<br>  /data/data/com.termux/files/home/go/src/socold.com/socold/zhizhen/main.go:8 +0x1c<br>exit status 2</p></blockquote><p>上面代码为什么会报错？因为只声明了指针<code>a</code>，但是没有初始化。<code>a</code>是一个<code>int</code>类型的指针，应该保存一个十六进制的内存地址，而<code>a</code>保存的这个十六进制的内存地址上应该保存一个<code>int</code>类型的数据。现在的情况是变量<code>a</code>声明了，是一个<code>*int</code>的指针，但是没有初始话，也就是说<code>a</code>啥地址也没保存，你就让我根据地址赋值，但是你还没给我地址呢。所以报错。<br>注释掉<code>*a = 100</code>可发现输出<code>nil</code>。可以使用内置函数<code>new(int)</code>来为<code>a</code>申请一个内存地址。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span>    a <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="指针初始化"><a href="#指针初始化" class="headerlink" title="指针初始化"></a>指针初始化</h3><p><code>aa = new(int)</code>这里需要注意<code>int</code>要跟声明指针时的数据类型一致。初始化后就可以赋值使用了。<br>一般这种写法很少用，一般都用<code>var a = new (int)</code>写法。<code>new()</code>返回的是一个十六进制的内存地址。这里需要和<code>make()</code>函数区分开，<code>make()</code>也是分配内存的函数，一般用了给slice,map,channel分配内存。<code>make()</code>返回的是数据本身。如下代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针只要记住两个符号<code>&amp;</code>和<code>*</code>就好。<code>&amp;a</code>返回<code>a</code>的内存地址。<code>*b</code>返回的是值，首先<code>b</code>得是一个指针型变量，<code>*b</code>根据指针型变量<code>b</code>保存的地址，取得该地址对应的数据。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">19</span>b <span class="token operator">:=</span> <span class="token operator">&amp;</span>afmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a数据类型：%T 值：%v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b数据类型：%T 值：%v \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a地址：%v a值：%v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b地址：%v b值：%v \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*b值：%v \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span></code></pre><h3 id="map类型"><a href="#map类型" class="headerlink" title="map类型"></a>map类型</h3><h4 id="map声明"><a href="#map声明" class="headerlink" title="map声明"></a>map声明</h4><p>map类型使用<code>var map[key类型]键值类型</code>来声明，map是引用类型，需要使用<code>make(map[string]int,10)</code>来初始化分配内存空间。没有初始化的map类型数据编译时不会报错，运行时会报如下错误：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> ma <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment" spellcheck="true">// ma = make(map[string]int,10)</span>ma<span class="token punctuation">[</span><span class="token string">"aa"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>ma<span class="token punctuation">[</span><span class="token string">"bb"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>ma<span class="token punctuation">[</span><span class="token string">"cc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>ma<span class="token punctuation">[</span><span class="token string">"dd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span>ma<span class="token punctuation">[</span><span class="token string">"ee"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ma: \n%v"</span><span class="token punctuation">,</span> ma<span class="token punctuation">)</span></code></pre><p>上面代码报错如下：</p><blockquote><p>panic: assignment to entry in nil map<br>goroutine 1 [running]:<br>main.main()<br> /data/data/com.termux/files/home/go/src/socold.com/socold/zhizhen/main.go:55 +0x3c<br>exit status 2<br>[Done] exited with code=1 in 1.402271 seconds</p></blockquote><h4 id="初始化map"><a href="#初始化map" class="headerlink" title="初始化map"></a>初始化map</h4><p>初始化map是建议预先估算好map的容量，虽然map可以动态扩容，但是会影响程序运行效率。初始化map的语句<code>ma = make(map[key类型]键值类型,map容量)</code>。<br>如何使用map类型数据：<code>ma["aa"]</code>即可返回键为<code>"aa"</code>的值<code>8</code>。如果键不存在会返回键值对应数据类型的0值。一般用if语句来判断key存不存在。如下代码：</p><pre class=" language-go"><code class="language-go">v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ma<span class="token punctuation">[</span><span class="token string">"zz"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"key:ma['zz']不存在。"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ma: %v \n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h4><p>map类型数据的遍历和数组一样用<code>for k,v := range ma{}</code>语句。map类型遍历出来是随机的，无序的。有可能key<code>ma["aa"]</code>排第一个也有可能排最后一个。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ma <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    ma <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    ma<span class="token punctuation">[</span><span class="token string">"aa"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>    ma<span class="token punctuation">[</span><span class="token string">"bb"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>    ma<span class="token punctuation">[</span><span class="token string">"cc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>    ma<span class="token punctuation">[</span><span class="token string">"dd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span>    ma<span class="token punctuation">[</span><span class="token string">"ee"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ma <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key:%v value:%v \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="删除map元素"><a href="#删除map元素" class="headerlink" title="删除map元素"></a>删除map元素</h4><p>删除map元素需要用<code>delete(ma,"aa")</code>。如果要删除的key不存在，程序不会进行任何操作。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ma <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    ma <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    ma<span class="token punctuation">[</span><span class="token string">"aa"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>    ma<span class="token punctuation">[</span><span class="token string">"bb"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>    ma<span class="token punctuation">[</span><span class="token string">"cc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>    ma<span class="token punctuation">[</span><span class="token string">"dd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span>    ma<span class="token punctuation">[</span><span class="token string">"ee"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ma <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key:%v value:%v \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除map类型变量ma中的元素</span>    <span class="token function">delete</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ma <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key:%v value:%v \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="map变种"><a href="#map变种" class="headerlink" title="map变种"></a>map变种</h4><h5 id="值为切片的map"><a href="#值为切片的map" class="headerlink" title="值为切片的map"></a>值为切片的map</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ma <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    ma <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    aa <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>    bb <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>    cc <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>    ma<span class="token punctuation">[</span><span class="token string">"切片1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> aa    ma<span class="token punctuation">[</span><span class="token string">"切片2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> bb    ma<span class="token punctuation">[</span><span class="token string">"切片2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> cc    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"值为切片的map：\n %v \n"</span><span class="token punctuation">,</span> ma<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其实吧，这样写没啥问题，但是有点麻烦，看下面这个写法，更简单：</p><pre class=" language-go"><code class="language-go">ma<span class="token punctuation">[</span><span class="token string">"切片1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>ma<span class="token punctuation">[</span><span class="token string">"切片2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> ma<span class="token punctuation">)</span></code></pre><h5 id="值为map的切片"><a href="#值为map的切片" class="headerlink" title="值为map的切片"></a>值为map的切片</h5><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> qie <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>qie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>qie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"铁锤"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>qie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"二牛"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>qie<span class="token punctuation">)</span></code></pre><h3 id="报错提示"><a href="#报错提示" class="headerlink" title="报错提示"></a>报错提示</h3><p>某些错误写法的报错提示：</p><ol><li>索引越界。下面代码编译是没问题，运行出错。愿因是切片<code>qie</code>声明并初始化时<code>make()</code>函数内只给了容量为3，元素数量给的是0，给的报错信息是<strong>index out of range [0] with length 0</strong>，学名叫索引越界。<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> qie <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>qie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"切片1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>qie<span class="token punctuation">)</span></code></pre>索引越界错误提示。<blockquote><p>panic: runtime error: index out of range [0] with length 0<br>goroutine 1 [running]:<br>main.main()<br>  /data/data/com.termux/files/home/go/src/socold.com/socold/zhizhen/main.go:155 +0x3c<br>exit status 2<br>[Done] exited with code=1 in 1.514425 seconds</p></blockquote></li></ol><ol start="2"><li>map没有初始化编译器不会报错，运行时报如下错误，报错提示信息为<strong>assignment to entry in nil map</strong><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> qie <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>qie<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"切片1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>qie<span class="token punctuation">)</span></code></pre>错误提示信息：<blockquote><p>panic: assignment to entry in nil map<br>goroutine 1 [running]:<br>main.main()<br>  /data/data/com.termux/files/home/go/src/socold.com/socold/zhizhen/main.go:168 +0x68<br>exit status 2<br>[Done] exited with code=1 in 1.443653 seconds</p></blockquote></li></ol><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><h4 id="识别字符串中的中文"><a href="#识别字符串中的中文" class="headerlink" title="识别字符串中的中文"></a>识别字符串中的中文</h4><p>研究下这个代码，这是一个识别给定字符串中有几个中文的代码。需要引入<code>unicode</code>包。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    s <span class="token operator">:=</span> <span class="token string">"abcd今天不太冷あなたは日本人ですこんにちは안녕하세요"</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        <span class="token keyword">if</span> unicode<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>unicode<span class="token punctuation">.</span>Han<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//unicode.Hangul是韩文，unicode.Hiragana是平假名，应该是日文。</span>            i<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="回文判断"><a href="#回文判断" class="headerlink" title="回文判断"></a>回文判断</h4><p>来一个实例，判断给定的字符串是不是回文：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">huiwen</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//建一个切片</span>    s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//把字符串导入切片s1</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历切片s1</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s1<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//回文判断：</span>    s <span class="token operator">:=</span> <span class="token string">"上海自来水来自海上a"</span>    <span class="token keyword">if</span> <span class="token function">huiwen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"是回文"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"不是回文"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="计算单词出现次数"><a href="#计算单词出现次数" class="headerlink" title="计算单词出现次数"></a>计算单词出现次数</h4><p>在来一个实例。给一段英文短文，要求计算每个单词出现的次数，不能区分大小写。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回给定字符串中个单词出现的次数。</span>    s <span class="token operator">:=</span> <span class="token string">"An old woman had a cat. The cat was very old; she could not run quickly, and she could not bite, because she was so old. One day the old cat saw a mouse;"</span>    <span class="token comment" spellcheck="true">//预处理字符串</span>    <span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">var</span> word <span class="token builtin">string</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        <span class="token keyword">if</span> unicode<span class="token punctuation">.</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是字母，保存到字符串缓存</span>            word <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span>unicode<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果不是字母，</span>            s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> word<span class="token punctuation">)</span>            word <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将处理好的缓存切片's1'导入'map'并计算单词出现次数。</span>    <span class="token comment" spellcheck="true">//声明并初始化一个map</span>    smap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//切片s1导入map并计算单词出现的次数</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s1 <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> k <span class="token operator">:=</span> smap<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token punctuation">{</span>            smap<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            smap<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历smap</span>    <span class="token keyword">for</span> v<span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> smap <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"smap[%v]-[%v] \n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> golang </tag>
            
            <tag> 指针 </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言数据类型</title>
      <link href="/golang/go-yu-yan-shu-ju-lei-xing/"/>
      <url>/golang/go-yu-yan-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>主要分两类<code>int</code>和<code>uint</code>。</p><h4 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h4><p>有符号整数型。</p><ul><li><code>int</code>类型<br>编译器自动推导默认的类型。你的程序在32位操作系统下运行就是<code>int32</code>，你的程序在64位操作系统下运行就是<code>int64</code>。所以在使用<code>int</code>类型时不建议指定<code>int32</code>或者<code>int64</code>，需要考虑程序在不同操作系统下的兼容性。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code>int</code>和<code>uint</code>。</li><li>uint类型<br><code>uint</code>和<code>int</code>的区别是一个带正负号<code>±</code>一个不带<code>±</code>号。</li><li><code>uintptr</code>类型<br>是无符号整数型，用于存放一个指针。</li></ul><h4 id="数字字面量语法（Number-literals-syntax）"><a href="#数字字面量语法（Number-literals-syntax）" class="headerlink" title="数字字面量语法（Number literals syntax）"></a>数字字面量语法（Number literals syntax）</h4><p>二进制<code>0b</code>开头，八进制<code>0o</code>开头，十六进制<code>0x</code>开头。下面<code>a:=b</code>用占位符<code>%v</code>显示ASCII码是<code>98</code>，用占位符<code>%q</code>显示字符是<code>b</code>，用占位符<code>%b</code>，显示二进制是<code>1100010</code>。那么反过来一样的道理，<code>b:=0b1100010</code>的话用占位符<code>%q</code>打印出来就直接是字符<code>b</code>了。综上所述：数字字面量语法可以让我们以二进制的方式定义数字。注意这里的变量<code>b</code>的类型还是<code>int</code>，也就是从根本上说变量<code>b</code>还是一个<code>int</code>类型的变量，保存的数据还是<code>int</code>型的<code>98</code>，只是用二进制的形式保存的<code>int</code>型数字<code>98</code>。如下列：</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token string">'b'</span> <span class="token comment" spellcheck="true">//变量'a'保存的数据是字符'b'</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量'a'的值是字符'b'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%v]默认格式：%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 用占位符'%v'显示ASCII码是字符'b'。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%q]字符格式:[%q]\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用占位符'%q'显示字符是'98'。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%b]二进制:[%b]\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用占位符'%b'显示二进制是'1100010'。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>b <span class="token operator">:=</span> 0b1100010 <span class="token comment" spellcheck="true">// 反过来变量'b'保存的数据是二进制'1100010'，也就是十进制的数字'98'。</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量'b'的值是'0b001100010'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%v]默认格式：%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%q]字符格式:[%q]\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用占位符'%q'显示变量'b'就是字符'b'了。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%%b]二进制:[%b]\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量b的数据类型是：[%T]\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用占位符'%T'显示变量'b'的数据类型还是'int'整数型。</span></code></pre><p>另外还可以使用<code>_</code>来分割数字。比如<code>c:=123_456</code>等于<code>123456</code>。另外，经测试<code>f:=0b10</code>没问题，<code>f:=0b10_11</code>输出十进制<code>19</code>，<code>f:=0b10_0b11</code>编译器报错，不能编译。个人猜测认为<code>_</code>在go语言中不占用命名空间不分配地址，也就是说<code>_</code>在存储的数据中基本相当于不存在的东西，但是还是能显示出来的。所以<code>f:=0b10_11</code>相当于十进制<code>19</code>，但是<code>f:=0b10_0b11</code>相当于两个十进制的数字<code>2</code>和<code>3</code>，但是一个变量只能保存一个二进制数字，你让他保存俩二进制数字，又不让人家变数组，人家肯定不干啊。是吧，感觉这么理解问题不大。嘿嘿。(待续…)</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点型通俗说就是小数形式，比如<code>3.1415</code>等。支持<code>float32</code>和<code>float64</code>这两种都遵循<strong>IEEE 745</strong>标准。默认<code>float64</code>类型。<code>float32</code>最大范围是<code>3.4e38</code>。<code>float64</code>最大范围<code>1.8e308</code>。可以用占位符<code>%f</code>打印<code>float64</code>数据类型，我的arm64平台用占位符<code>%f</code>输出小数点后6位。例如<code>c:=3.1415926888</code>输出<code>3.141593</code>，小数点后保留6位。如果细心一点你会发现就算保留小数点后六位也应该是<code>3.141592</code>啊，这是因为2后边是<code>8</code>，四舍五入就变成<code>3.141593</code>喽。当然，你也可以把占位符改车<code>%.2f</code>强制要求保留到小数点后两位，输出<code>3.14</code>啊。要记住，第三位的四舍五入昂。</p><h3 id="复数complex64和complex128"><a href="#复数complex64和complex128" class="headerlink" title="复数complex64和complex128"></a>复数complex64和complex128</h3><p>复数有实部和虚部，<code>complex6</code>4的实部和虚部为32位，<code>complex128</code>的实部和虚部为64位。(这个复数不知道干啥用的，现在也用不到，了解太少，以后在研究吧。)</p><h3 id="布尔型bool"><a href="#布尔型bool" class="headerlink" title="布尔型bool"></a>布尔型bool</h3><p><code>bool</code>布尔型只有两个值真<code>true</code>和假<code>false</code>，这个简单，容易理解。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go语言字符串内部实现使用<code>UTF-8</code>编码。字符串的值是双引号<code>""</code>里面的内容。可以在Go源代码中直接添加<code>非ASCII码</code>字符。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Go语言中常年转义字符有：回车符<code>\r</code>，换行符<code>\n</code>，单引号<code>'</code>，双引号<code>""</code>和反斜杠<code>\</code>。都是用反斜杠<code>\</code>来转义。还有一个百分号<code>%</code>在<code>fmt.Printf</code>系列函数中有<code>%</code>来转义，比如<br><code>fmt.Printf("%%d")</code><br>输出的是<code>%d</code>而不是做占位符来使用。</p><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>定义一个多行字符串要用单引号<code>''</code>来包含。但是单引号内的所有字符都按照原样输出。所有转义字符均无效。</p><h3 id="字符串常用到的操作："><a href="#字符串常用到的操作：" class="headerlink" title="字符串常用到的操作："></a>字符串常用到的操作：</h3><ul><li>求字符串长度。<br>求字符串长度用<code>len(str)</code></li><li>拼接字符串<br><code>str3:=fmt.Sprintf("%s%s",str1,str2)</code><br>拼接字符串<code>str1</code>和<code>str2</code>用占位符<code>%s</code>的形式拼接字符串<code>str1</code>和<code>str2</code>并赋值给变量<code>str3</code>。记住，<code>fmt.Sprint</code>拼接后的数据一定是<code>string</code>类型。所以你也可以<br><code>fmt.Sprint("%d%d",int1,int2)</code><br>把两个<code>int</code>类型转变为<code>string</code>类型。</li><li>分割字符串<br><code>strings.Split("待分割的字符串","分割符(可以是字符串)")</code><br>分割字符串，分割后是<code>[]string</code>类型。</li><li>判断包含<br><code>strings.Contains('str1','str2')</code><br>判断字符串<code>str1</code>中是否包含<code>str2</code>。返回<code>bool</code>型<code>true</code>或者<code>false</code>。</li><li>判断前缀<br><code>strings.HasPrefix('str1','s')</code><br>判断字符串在<code>str1</code>是不是以<code>s</code>开头，返回<code>true</code>。<br><code>strings.HasSuffixa('str1','str2')</code><br>判断后缀。</li><li>判断字符串出现的位置<br><code>strings.Index('str1','a')</code><br>判断字符串<code>str1</code>中字符<code>a</code>出现的位置返回<code>-1</code>表示从来没有出现过。<br><code>strings.LastIndex('str1str1','r')</code><br>判断字符串<code>str1str1</code>中<code>r</code>最后一次出现的位置返回<code>6</code>。</li><li>拼接字符串<br><code>strings.Join('str[] string','-')</code><br>把字符串数组<code>str[] string</code>用<code>-</code>拼接起来。返回<code>string</code>类型。</li></ul><h3 id="byte和rune字符类型"><a href="#byte和rune字符类型" class="headerlink" title="byte和rune字符类型"></a>byte和rune字符类型</h3><p>Go语言默认的字符类型是<code>int32</code>，当然你也可以用<code>byte()</code>强制定义为<code>int8</code>，仅限于英文字母等255个<code>ASCII码</code>，其它字符比如汉字字符等需要用<code>rune()</code>来定义。因为最开始的255个<code>ASCII码</code>用<code>int8</code>可以表示，但是后面新增加的<code>ASCII码</code>用一个字节<code>int8</code>存储不下啊。所以需要用<code>int32</code>来存储。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token string">'s'</span>b <span class="token operator">:=</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span>c <span class="token operator">:=</span> <span class="token string">'我'</span><span class="token comment" spellcheck="true">// d := byte('我') //'int8'的存储空间不够，需要用'rune()'定义为'int32'来存储。</span>e <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a的类型：[%T] a的值：[%q]\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b的类型：[%T] b的值：[%q]\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c的类型：[%T] b的值：[%q]\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"e的类型：[%T] b的值：[%q]\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span></code></pre><p>所以遍历字符串时如果用<code>len()</code>来获取中英混合字符串<code>hello,铁柱和钢蛋</code>就会出现如下错误。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token string">"he铁蛋a!"</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%d] %q \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下:</p><pre><code>[0] 'h'[1] 'e'[2] 'é'[3] '\u0093'[4] '\u0081'[5] 'è'[6] '\u009b'[7] '\u008b'[8] 'a'[9] '!'</code></pre><p>所以遍历不确定字符串是强烈建议使用<code>range s</code>来获取字符串长度。如下代码正常输出没有错误。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token string">"he铁蛋a!"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>r<span class="token operator">:=</span><span class="token keyword">range</span> a <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[%d] %q \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre><code>[0] 'h'[1] 'e'[2] '铁'[5] '蛋'[8] 'a'[9] '!'</code></pre><h3 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h3><p>Go语言不能直接修改字符串。如果确定需要修改字符串，必须先把字符<code>[]byte()</code>或者<code>[]rune()</code>转换成字符切片，修改完成后在转换为<code>string</code>类型。</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token string">"he铁蛋a!"</span>          <span class="token comment" spellcheck="true">//声明并初始化变量'a'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印变量'a'</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//转换变量'a'为切片并赋值给切片'b'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%q \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印切片'b'</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'钢'</span>             <span class="token comment" spellcheck="true">//修改切片'b'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%q \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印切片'b'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印字符串'a'</span>a <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//把切片'b'转换为字符串类型并赋值给字符串'a'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印字符串'a'</span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>一个变量定义好了类型就不能在改变了。比如<code>a:=98</code>，这个<code>a</code>永远就是<code>int</code>类型，而且根据你的系统平台只能是<code>int64</code>或者<code>int32</code>类型，哪怕你把他变成<code>int8</code>都不行，他永远就是<code>int64</code>。改变变量值的类型的办法也就，就是比较麻烦。先定义一个<code>float64</code>类型的变量<code>b</code>，在把变量<code>a</code>的值<code>float64(a)</code>转换成<code>float64</code>类型在赋值给变量<code>b</code>即可。注意，<code>int</code>类型可以转换为<code>float</code>型，但是<code>float</code>型不能通过这种办法转换成<code>int</code>类型，因为会丢失精度。另外，<code>int</code>类型变字符串也很麻烦。看下面代码：</p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">90</span><span class="token keyword">var</span> b <span class="token builtin">string</span>b <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre><p>原本我以为打印<code>steing</code>类型的变量<code>b</code>会输出<code>90</code>，结果打脸啊，想的太简单了。<code>b=string(a)</code>是把<code>a</code>的值<code>98</code>当做一个数字赋值给<code>string</code>型的<code>b</code>，相当于<code>b</code>接收到的是ASCII码<code>90</code>所以输出<code>Z</code>。看来要把<code>int</code>转换成<code>string</code>类型还要对<code>int</code>求余，切片，在转换为<code>string</code>才行。<code>float</code>类型同样道理啊。这个以后有时间在研究吧。(待续)。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go语言数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言变量和常量</title>
      <link href="/golang/go-yu-yan-bian-liang-he-chang-liang/"/>
      <url>/golang/go-yu-yan-bian-liang-he-chang-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量只能一字母，数字或者下划线<code>_</code>开头。函数外面声明的变量属于全局变量，整个包不能重名。同一函数内的变量同理，不能重名。</p><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>声明变量有一下几种格式：</p><blockquote><p>声明变量默认值为对应类型的空值，<code>int=0</code>，<code>string=""</code>，<code>bool=false</code>等～</p></blockquote><ul><li>声明单个变量：<br><code>var 变量名 变量类型</code></li><li>批量声明变量<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span><span class="token punctuation">(</span>  变量名b 类型  变量名a 类型  变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token punctuation">,</span>变量名<span class="token number">3</span> 数据类型<span class="token punctuation">)</span></code></pre></li></ul><h4 id="变量初始化："><a href="#变量初始化：" class="headerlink" title="变量初始化："></a>变量初始化：</h4><ul><li><p>单个变量初始化<br>初始化变量格式：<br><strong>var 变量名 类型 = 表达式</strong><br>比如下面三种方法都可以在声明变量的同时初始化变量：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abd"</span> <span class="token operator">+</span> <span class="token string">"bbb"</span><span class="token keyword">var</span> name <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span></code></pre></li><li><p>批量声明同时初始化<br>批量声明并初始化变量，或者直接给变量赋值就算是初始化变量了。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>  name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"tiedan"</span>  nianling <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">90</span>  b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="变量类型推导"><a href="#变量类型推导" class="headerlink" title="变量类型推导"></a>变量类型推导</h4><p>声明变量时可以省略<code>类型</code>，编译器会自动帮我们推导变量类型。比如：<code>var ggg = "abd"</code>编译器会自动识别变量<code>ggg</code>的类型为<code>string</code>，默认类型为<code>string64</code>。当然为了节省内存你可以指定变量内存。</p><h4 id="声明并初始化变量的简化写法"><a href="#声明并初始化变量的简化写法" class="headerlink" title="声明并初始化变量的简化写法"></a>声明并初始化变量的简化写法</h4><p>在函数内部你也可以使用<code>aa,bb := "aaa","bbbb"</code>来声明并初速化变量。有一点要注意<code>:=</code>前面必须至少有一个新的没有声明过的新变量。比如<code>jj</code>和<code>zz</code>是全局变量已经声明过了，<code>jj,zz := 3,8</code>就会报错，但是改为<code>kk,jj,zz := 8,9,3</code>就没问题，虽然<code>jj</code>和<code>zz</code>是全局变量已经声明过，但是<code>kk</code>是一个全新变量，编译器会放行通过。</p><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p><code>_</code>是一个匿名变量。例如某个函数<code>name()</code>会返回三个数据，但是前两个对我们来说没有任何用处，此时就用到匿名变量了<code>_,_,a = name()</code>，变量a取得函数<code>name()</code>返回的第三个数据，前两个数据被我们忽视了，匿名变量<code>_</code>不占用命名空间，不会被分配内存地址，随用随抛，节省空间和程序运行效率。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量一旦被定义，就不能在被修改。常量声明和变量声明基本类似，只是把关键字<code>var</code>换成常量关键字<code>const</code>。另外需要注意的一点是，批量声明常量时，某个没有被赋值的常量的默认值将会是上面一行常量的值。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    aa <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">//aa=10</span>    bb <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">//bb=20</span>    cc     <span class="token comment" spellcheck="true">//cc=20('cc'空值，所以和上一行'bb'的值相同。</span>    dd <span class="token operator">=</span> <span class="token number">40</span><span class="token comment" spellcheck="true">//dd=40</span>    ee     <span class="token comment" spellcheck="true">//('ee'空值，跟上一行'dd'的值相同。</span><span class="token punctuation">)</span></code></pre><p>另外：如果空值常量的上一行是<code>aa,bb = 10,20</code>这种方式声明的常量，编译器会报错，你根本就不会成功编译滴。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token comment" spellcheck="true">//因为下面常量'cc'是空值，这一行又是简写的常量声明格式，编译器会报错，根本不可能通过编译。</span>    cc            <span class="token comment" spellcheck="true">//这里的常量'cc'是空值。</span>    dd <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span></code></pre><h4 id="常量计数器iota"><a href="#常量计数器iota" class="headerlink" title="常量计数器iota"></a>常量计数器iota</h4><ul><li><code>iota</code>在碰到常量关键字<code>const</code>时清零。<pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span> aa <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//aa=0</span> bb <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//bb=1</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>   <span class="token comment" spellcheck="true">//这里是关键字'const'，所以下面第一行'cc'是'0'。</span> cc <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//cc=0</span> dd <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//dd=1</span><span class="token punctuation">)</span></code></pre></li><li>iota碰到空值常量<br>如果常量是空值，就会跟上一行的值相同，所以空值的<code>cc</code>和<code>dd</code>的值是<code>100</code>，但是<code>ee</code>还是<code>iota</code>，他说按行计数，所以<code>ee</code>是<code>4</code>。<pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  aa <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//0</span>  bb <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true">//100</span>  cc       <span class="token comment" spellcheck="true">//100--'cc'是空值，所以和上一行'bb'的值相同。</span>  dd       <span class="token comment" spellcheck="true">//100--'dd'空值，所以和'cc'的值相同，这里的'cc'已经拿到他上面一行的'dd'的值'100'了，所以'dd'也是'100'</span>  ee <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//4--你们'aa'，'bb'，'cc'，'dd'随便怎么折腾，反正只要我'=iota'，那我就按行算。所以我是'4'。</span><span class="token punctuation">)</span></code></pre></li><li>iota一行计一次数<br>一点要记住<code>iota</code>按行算(有效声明常量的行，不管空值还是赋值)，不是按常量个数算。所以<code>aa</code>和<code>bb</code>并列第一行，都是<code>0</code>，<code>cc</code>有自己的值<code>100</code>，<code>dd</code>是<code>iota</code>按行算所以是<code>1</code>，<code>ee</code>是<code>2</code>。<pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token punctuation">,</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//aa=0  bb=0</span>  cc<span class="token punctuation">,</span> dd <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//'cc'有自己的值'100'，'dd'是'iota'按行计数所以是'1'。</span>  ee     <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//'ee'是'2'。</span><span class="token punctuation">)</span></code></pre></li><li>iota可以做算术运算<br><code>iota</code>可以做加减乘除等运算，做完运算就相当于有了属于自己的特定的专属的值，但是没有做运算的<code>iota</code>还是按自己的行计数，互不影响。所以<code>aa</code>和<code>bb</code>并列第一行，<code>aa</code>没有做任何运算所以按行计数是<code>0</code>，<code>bb</code>的<code>iota</code>本来是<code>0</code>，做了一个加法运算，那<code>bb</code>就是<code>3</code>了。<code>cc</code>有自己的值<code>100</code>，<code>dd</code>的<code>iota</code>按行计数是<code>1</code>做个减法变<code>-1</code>。<code>ee</code>说：“一帮沙雕，你们继续折腾，我还是按照我的行算数。0..1..我是<code>2</code>。”<pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token comment" spellcheck="true">//'aa=0'，'bb=3'</span>  cc<span class="token punctuation">,</span> dd <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token comment" spellcheck="true">//'cc=100'，'dd=-1'</span>  ee     <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment" spellcheck="true">//'ee=2'</span><span class="token punctuation">)</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言变量 </tag>
            
            <tag> Go语言常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决go get下载包失败问题</title>
      <link href="/golang/jie-jue-go-get-xia-zai-bao-shi-bai-wen-ti/"/>
      <url>/golang/jie-jue-go-get-xia-zai-bao-shi-bai-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="解决go-get下载包失败问题"><a href="#解决go-get下载包失败问题" class="headerlink" title="解决go get下载包失败问题"></a>解决go get下载包失败问题</h2><p>由于某些不可抗力的原因，国内使用<code>go get</code>命令安装包时会经常会出现<code>timeout</code>的问题。本文介绍几个常用的解决办法。</p><h3 id="从github克隆"><a href="#从github克隆" class="headerlink" title="从github克隆"></a>从github克隆</h3><p><code>golang</code>在<code>github</code>上建立了一个镜像库，如<code>https://github.com/golang/net</code>就对应是 <code>https://golang.org/x/net</code>的镜像库。 要下载<code>golang.org/x/net</code>包，可以在本地创建包的目录后使用<code>git clone</code>来拉取相应包的源代码文件，具体操作如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token variable">$GOPATH</span>/src/golang.org/x<span class="token function">cd</span> <span class="token variable">$GOPATH</span>/src/golang.org/x<span class="token function">git</span> clone https://github.com/golang/net.git</code></pre><h3 id="使用gopm"><a href="#使用gopm" class="headerlink" title="使用gopm"></a>使用gopm</h3><p>使用<code>gopm</code>可以从<code>golang.org</code>的一些镜像网站上下载。</p><h3 id="安装gopm"><a href="#安装gopm" class="headerlink" title="安装gopm"></a>安装gopm</h3><pre class=" language-bash"><code class="language-bash">go get -u github.com/gpmgo/gopm</code></pre><p>使用<code>gopm</code>安装第三方包<br>不加<code>-g</code>参数，会把依赖包下载<code>.vendor</code>目录下面； 加上<code>-g</code>参数，可以把依赖包下载到<code>GOPATH</code>目录中。</p><pre class=" language-bash"><code class="language-bash">gopm get -g golang.org/x/net  </code></pre><h3 id="使用goproxy"><a href="#使用goproxy" class="headerlink" title="使用goproxy"></a>使用goproxy</h3><p>Go的1.11版本以后 可以设置<code>GOPROXY</code>这个变量，来设置代理。 如果你自己有代理服务器就可以把这个环境变量设置成自己的代理。 首先开启<code>go module</code>支持:</p><p>在Mac/linux下执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> GO111MODULE<span class="token operator">=</span>on</code></pre><p>Windows平台执行：</p><pre class=" language-bash"><code class="language-bash">SET GO111MODULE<span class="token operator">=</span>on</code></pre><p>2019.6.10更新:goproxy.cn</p><p>我们这里以<a href="https://goproxy.cn为例：">https://goproxy.cn为例：</a></p><p>在Mac/linux下可以执行以下命令来设置：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> GOPROXY<span class="token operator">=</span>https://goproxy.cn</code></pre><p>Windows平台在cmd执行以下命令来设置：</p><pre class=" language-bash"><code class="language-bash">SET GOPROXY<span class="token operator">=</span><span class="token string">"https://goproxy.cn"</span></code></pre><p>或者在PowerShell中执行：</p><pre class=" language-bash"><code class="language-bash">C:\<span class="token operator">></span> <span class="token variable">$env</span>:GOPROXY <span class="token operator">=</span> <span class="token string">"https://goproxy.cn"</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> go get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go变量和变量类型</title>
      <link href="/golang/go-bian-liang-he-bian-liang-lei-xing/"/>
      <url>/golang/go-bian-liang-he-bian-liang-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="go中定义变量和变量类型："><a href="#go中定义变量和变量类型：" class="headerlink" title="go中定义变量和变量类型："></a>go中定义变量和变量类型：</h1><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。</p><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><table><thead><tr><th>类型</th><th>有无符号</th><th>占用存储空间</th><th>表示范围</th><th>备注</th></tr></thead><tbody><tr><td><code>int8</code></td><td><code>有</code></td><td><code>1字节</code></td><td><code>-2**7~2**7-1</code></td><td></td></tr><tr><td><code>int16</code></td><td><code>有</code></td><td><code>2字节</code></td><td><code>-2**15~2**15-1</code></td><td></td></tr><tr><td><code>int32</code></td><td><code>有</code></td><td><code>4字节</code></td><td><code>-2**31~2**31-1</code></td><td></td></tr><tr><td><code>int64</code></td><td><code>有</code></td><td><code>8,字节</code></td><td><code>-2**63~2**63-1</code></td><td></td></tr><tr><td><code>uint8</code></td><td><code>无</code></td><td><code>1字节</code></td><td><code>0~2**8-1</code></td><td></td></tr><tr><td><code>uint16</code></td><td><code>无</code></td><td><code>2字节</code></td><td><code>0~2**16-1</code></td><td></td></tr><tr><td><code>uint32</code></td><td><code>无</code></td><td><code>4字节</code></td><td><code>0~2**32-1</code></td><td></td></tr><tr><td><code>uint64</code></td><td><code>无</code></td><td><code>8字节</code></td><td><code>0~2**64-1</code></td><td></td></tr><tr><td><code>int</code></td><td><code>有</code></td><td><code>32位系统4字节</code><br><code>64位系统8字节</code></td><td><code>-2**31~2**31-1</code><br><code>-2**63~2**63-1</code></td><td></td></tr><tr><td><code>uint</code></td><td><code>无</code></td><td><code>32位系统4字节</code><br><code>64位系统8字节</code></td><td><code>0~2**32-1</code><br><code>0~2**64-1</code></td><td></td></tr><tr><td><code>rune</code></td><td><code>有</code></td><td><code>与int32一样</code></td><td><code>-2**31~2**31-1</code></td><td><code>等价int32</code><br><code>表示一个unicode码</code></td></tr><tr><td><code>byte</code></td><td><code>无</code></td><td><code>与uint8一样</code></td><td><code>0~2**8-1</code></td><td><code>当要存储字符时</code><br><code>使用byte</code></td></tr></tbody></table><p>整型的使用细节：</p><ol><li>golang整数类型分为：<code>有符号</code>和<code>无符号</code>，<code>int</code>和<code>uint</code>的大小和系统有关；</li><li><code>如果不指定，整数型数字默认int64</code></li><li>golang使用整数类型时，遵从保小不保大原则，即在保证程序正常运行的情况下，尽量使用占用空间小的数据类型；</li></ol><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表示范围</th></tr></thead><tbody><tr><td>单精度float32</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度float64</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p>说明：</p><ul><li>浮点数在机器中存在的形式：浮点数=符号位+指数位+尾数位（浮点数都是有符号的）11110000111.111111111111111111000</li><li>尾数部分可能丢失，造成精度损失；</li><li>浮点型的存储分为三个部分：符号位+指数位+尾数位；</li></ul><p>浮点型的使用细节：</p><ul><li>golang浮点类型有固定的范围和字段长度，不受操作系统的影响；</li><li>默认为float64类别；</li><li>浮点型常用两种形式表示：<ul><li>十进制：5.12、.512</li><li>科学记数法形式：5.1234E2、5.1234E-2</li></ul></li><li>通常使用float64，它精度更高；</li><li>浮点小数默认float64</li></ul><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>字符串是一串固定长度的字符连接起来的字符序列。golang没有专门的存储字符类型，如果要存储单个字符，用<code>byte</code>来保存。go的字符串是由单个字节连接起来的，它与传统的字符串是由字符组成的不同。</p><p>当我们直接输出字符<code>c1</code>,，得到的是它的<code>ASCII</code>值：<code>97</code>。要用格式化输出：<code>fmt.Printf("%c",c1)</code>。而当我们要存储中文时，此时不能够用<code>byte</code>类型了，即<code>ASCII</code>值大于<code>255</code>时，会显示溢出，我们要用<code>int</code>来存储：</p><blockquote><p>补：格式化输出代表含义</p><ul><li>%d：输出整型；</li><li>%f：输出浮点型；</li><li>%c：输出字符型；</li><li>%v：输出原变量值；</li><li>%T：输出变量的数据类型；</li><li>%t：输出布尔值：</li><li>%q：输出带双引号的字符串）</li></ul></blockquote><p>字符类型使用细节：（再也不用担忧编码的问题了，所有的编码都是utf-8）</p><ul><li>字符常量使用单引号括起来的单个字符；</li><li>go中允许使用转义字符<code>\</code>来将其后的字符转变为特殊字符型常量，例如<code>var c int = '\n'</code>；</li><li>字符使用utf-8编码；</li><li>go中，字符的本质是一个整数，直接输出时，会输出它对应的UTF-8编码的值；</li><li>可以直接给变量赋予某个数字，然后格式化输出<code>%c</code>，会输出该数字对应的<code>unicode字符</code>；</li><li>字符类型是可以进行运算的，相当于一个整数，因为它都对应<code>unicode码</code>；</li></ul><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>只允许取两个值：<code>true</code>和<code>false</code>；占用1个字节；主要用在逻辑运算；</p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p>go的字符串是由字节连接而成；</p><p>字符串的使用细节：</p><ol><li>go语言的字符串的字节使用utf-8编码；</li><li>与python一样，一旦字符串赋值了，就不能被更改；</li><li>两种表示形式<ul><li>双引号，会识别转义字符；</li><li>反引号，以字符串的原生形式输出，包括换行和特殊字符，可以实现防止攻击，输出源代码等</li></ul></li><li>字符串的拼接，当我们要拼接多行字符串时，要将加号留在每行末尾：（注意单个字符进行拼接是指对unicode值进行相加）</li></ol><h4 id="基本数据类型的默认值"><a href="#基本数据类型的默认值" class="headerlink" title="基本数据类型的默认值"></a>基本数据类型的默认值</h4><ul><li>整型：0</li><li>浮点型：0</li><li>字符串：””</li><li>布尔类型：false</li></ul><h4 id="基本数据类型之间的转换"><a href="#基本数据类型之间的转换" class="headerlink" title="基本数据类型之间的转换"></a>基本数据类型之间的转换</h4><p>golang和java、c不同，Go在不同类型变量之间赋值需要显示转换，也就是golang中数据类型<code>不能自动转换</code>；</p><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><p><code>T(v)</code>，即将变量v转换成T数据类型</p><h5 id="整数型之间的转换："><a href="#整数型之间的转换：" class="headerlink" title="整数型之间的转换："></a>整数型之间的转换：</h5><p>例如:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> n1 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><ul><li>数据类型转换可以从范围小–&gt;范围大，范围大–&gt;范围小；</li><li>被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化；</li><li>在转换中，比如将int64转成int8，编译时不会报错，只是转换的结果是按溢出处理，和我们希望的结果不一样；</li></ul><h5 id="基本数据类型和string之间的转换"><a href="#基本数据类型和string之间的转换" class="headerlink" title="基本数据类型和string之间的转换"></a>基本数据类型和string之间的转换</h5><ol><li><strong>fmt.Sprintf(“%参数”，表达式)</strong>：参数和表达式的类型要匹配；结果返回转换后的字符串；</li><li>使用<code>strconv</code>包</li></ol><blockquote><p>注意：要确保string类型要能够转换成有效的数据，即<code>hello</code>不能转换成布尔值、整型、浮点型</p></blockquote><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>声明变量一般用关键字<code>var</code><br><strong>代码如下：</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        a <span class="token operator">=</span> <span class="token number">6</span>        c <span class="token operator">=</span> <span class="token number">3006451967594537643</span>        f <span class="token operator">=</span> <span class="token string">"hello"</span>        h <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1346582948651325854</span>        i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">64325.94625184676581646</span>        <span class="token punctuation">)</span>    <span class="token keyword">var</span> e <span class="token builtin">bool</span>  <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> <span class="token builtin">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">18</span>    <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">"青岛啤酒"</span>    d <span class="token operator">:=</span> <span class="token number">3.1415926</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量a的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量b的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量c的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量d的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量e的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量f的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量g的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> g<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"变量h的类型是：%T \t 值是：%v \n"</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>输出如下：</strong><br>变量a的类型是：int   值是：6<br>变量b的类型是：int   值是：-18<br>变量c的类型是：int   值是：3006451967594537643<br>变量d的类型是：float64   值是：3.1415926<br>变量e的类型是：bool    值是：true<br>变量f的类型是：string    值是：hello<br>变量g的类型是：string    值是：青岛啤酒<br>变量h的类型是：int   值是：-1346582948651325854<br>变量i的类型是：float64   值是：-64325.94625184676</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go流程控制</title>
      <link href="/golang/go-liu-cheng-kong-zhi/"/>
      <url>/golang/go-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言基础之流程控制"><a href="#Go语言基础之流程控制" class="headerlink" title="Go语言基础之流程控制"></a>Go语言基础之流程控制</h2><p>流程控制是每种编程语言控制逻辑走向和执行次序的重要部分，流程控制可以说是一门语言的“经脉”。</p><p>Go语言中最常用的流程控制有<code>if</code>和<code>for</code>，而<code>switch</code>和<code>goto</code>主要是为了简化代码、降低重复代码而生的结构，属于扩展类的流程控制。</p><h3 id="if-else-分支结构"><a href="#if-else-分支结构" class="headerlink" title="if else(分支结构)"></a>if else(分支结构)</h3><h4 id="if条件判断基本写法"><a href="#if条件判断基本写法" class="headerlink" title="if条件判断基本写法"></a>if条件判断基本写法</h4><p>Go语言中if条件判断的格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> 表达式<span class="token number">1</span> <span class="token punctuation">{</span>    分支<span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> 表达式<span class="token number">2</span> <span class="token punctuation">{</span>    分支<span class="token number">2</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    分支<span class="token number">3</span><span class="token punctuation">}</span></code></pre><p>当<code>表达式1</code>的结果为<code>true</code>时，执行<code>分支1</code>，否则判断<code>表达式2</code>，如果满足则执行<code>分支2</code>，都不满足时，则执行<code>分支3</code>。 <code>if</code>判断中的<code>else if</code>和<code>else</code>都是可选的，可以根据实际需要进行选择。</p><p>Go语言规定与<code>if</code>匹配的左括号<code>{</code>必须与<code>if</code>和表达式放在同一行，<code>{</code>放在其他位置会触发编译错误。 同理，与<code>else</code>匹配的<code>{</code>也必须与<code>else</code>写在同一行，<code>else</code>也必须与上一个<code>if</code>或<code>else if</code>右边的大括号在同一行。</p><p>举个例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ifDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    score <span class="token operator">:=</span> <span class="token number">65</span>    <span class="token keyword">if</span> score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">></span> <span class="token number">75</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="if条件判断特殊写法"><a href="#if条件判断特殊写法" class="headerlink" title="if条件判断特殊写法"></a>if条件判断特殊写法</h4><p>if条件判断还有一种特殊的写法，可以在<code>if</code>表达式之前添加一个执行语句，再根据变量值进行判断，举个例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ifDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> score <span class="token operator">:=</span> <span class="token number">65</span><span class="token punctuation">;</span> score <span class="token operator">>=</span> <span class="token number">90</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> score <span class="token operator">></span> <span class="token number">75</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="for-循环结构"><a href="#for-循环结构" class="headerlink" title="for(循环结构)"></a>for(循环结构)</h3><p>Go语言中的所有循环类型均可以使用<code>for</code>关键字来完成。</p><p>for循环的基本格式如下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> 初始语句<span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>结束语句<span class="token punctuation">{</span>    循环体语句<span class="token punctuation">}</span></code></pre><p>条件表达式返回<code>true</code>时循环体不停地进行循环，直到条件表达式返回<code>false</code>时自动退出循环。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">forDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>for循环的初始语句可以被忽略，但是<strong>初始语句后的分号必须要写</strong>，例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">forDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>for循环的初始语句和结束语句都可以省略，例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">forDemo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        i<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种写法类似于其他编程语言中的<code>while</code>，在<code>while</code>后添加一个条件表达式，满足条件表达式时持续循环，否则结束循环。</p><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span>    循环体语句<span class="token punctuation">}</span></code></pre><p>for循环可以通过<code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。</p><h4 id="for-range-键值循环"><a href="#for-range-键值循环" class="headerlink" title="for range(键值循环)"></a>for range(键值循环)</h4><p>Go语言中可以使用<code>for range</code>遍历<code>数组</code>、<code>切片</code>、<code>字符串</code>、<code>map</code> 及<code>通道（channel）</code>。 通过<code>for range</code>遍历的返回值有以下规律：</p><ul><li>数组、切片、字符串返回索引和值。</li><li>map返回键和值。</li><li>通道（channel）只返回通道内的值。</li></ul><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><p>使用<code>switch</code>语句可方便地对大量的值进行条件判断。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">switchDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    finger <span class="token operator">:=</span> <span class="token number">3</span>    <span class="token keyword">switch</span> finger <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"大拇指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"食指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"中指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无名指"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"小拇指"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"无效的输入！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Go语言规定每个<code>switch</code>只能有一个<code>default</code>分支。</p><p>一个分支可以有多个值，多个<code>case</code>值中间使用英文逗号分隔。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testSwitch3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> n <span class="token operator">:=</span> <span class="token number">7</span><span class="token punctuation">;</span> n <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"奇数"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"偶数"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分支还可以使用表达式，这时候<code>switch</code>语句后面不需要再跟判断变量。例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">switchDemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">:=</span> <span class="token number">30</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> age <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"好好学习吧"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> age <span class="token operator">></span> <span class="token number">25</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"好好工作吧"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> age <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"好好享受吧"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"活着真好"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>fallthrough</code>语法可以执行满足条件的<code>case</code>的下一个<code>case</code>，是为了兼容C语言中的<code>case</code>设计的。简单说就是满足<code>a</code>的话，就把<code>a</code>和<code>b</code>一起打包送回去。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">switchDemo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token string">"a"</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> s <span class="token operator">==</span> <span class="token string">"a"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> s <span class="token operator">==</span> <span class="token string">"b"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> s <span class="token operator">==</span> <span class="token string">"c"</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><blockquote><p>a<br>b</p></blockquote><h4 id="goto-跳转到指定标签"><a href="#goto-跳转到指定标签" class="headerlink" title="goto(跳转到指定标签)"></a>goto(跳转到指定标签)</h4><p><code>goto</code>语句通过标签进行代码间的无条件跳转。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助。Go语言中使用<code>goto</code>语句能简化一些代码的实现过程。 例如双层嵌套的for循环要退出时：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gotoDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> breakFlag <span class="token builtin">bool</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置退出标签</span>                breakFlag <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v-%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 外层for循环判断</span>        <span class="token keyword">if</span> breakFlag <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>goto</code>语句能简化代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gotoDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置退出标签</span>                <span class="token keyword">goto</span> breakTag            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v-%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>    <span class="token comment" spellcheck="true">// 标签</span>breakTag<span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"结束for循环"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="break-跳出循环"><a href="#break-跳出循环" class="headerlink" title="break(跳出循环)"></a>break(跳出循环)</h4><p><code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。</p><p><code>break</code>语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的<code>for</code>、<code>switch</code>和 <code>select</code>的代码块上。 举个例子：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">breakDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>BREAKDEMO1<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span> BREAKDEMO1            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v-%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="continue-继续下次循环"><a href="#continue-继续下次循环" class="headerlink" title="continue(继续下次循环)"></a>continue(继续下次循环)</h4><p><code>continue</code>语句可以结束当前循环，开始下一次的循环迭代过程，仅限在<code>for</code>循环内使用。</p><p>在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。例如：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">continueDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>forloop1<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// forloop2:</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> forloop1            <span class="token punctuation">}</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v-%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言运算符</title>
      <link href="/golang/go-yu-yan-yun-suan-fu/"/>
      <url>/golang/go-yu-yan-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言基础之运算符"><a href="#Go语言基础之运算符" class="headerlink" title="Go语言基础之运算符"></a>Go语言基础之运算符</h2><p>运算符用于在程序运行时执行数学或逻辑运算。</p><p>Go 语言内置的运算符有：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>算数运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th><code>运算符</code></th><th><code>描述</code></th></tr></thead><tbody><tr><td><code>+</code></td><td><code>相加</code></td></tr><tr><td><code>-</code></td><td><code>相减</code></td></tr><tr><td><code>*</code></td><td><code>相乘</code></td></tr><tr><td><code>/</code></td><td><code>相除</code></td></tr><tr><td><code>%</code></td><td><code>求余</code></td></tr></tbody></table><p>注意：<code>++</code>自增和<code>--</code>自减在Go语言中是单独的语句，并不是运算符。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th><code>运算符</code></th><th><code>描述</code></th></tr></thead><tbody><tr><td><code>==</code></td><td>检查两个值是否<code>相等</code>，如果相等返回<code>True</code>否则返回<code>Fales</code>。</td></tr><tr><td><code>!=</code></td><td>检查两个值是否<code>不相等</code>，如果不相等返回<code>True</code>否则返回<code>Fales</code>。</td></tr><tr><td><code>&gt;</code></td><td>检查左边值是否<code>大于</code>右边值，如果是返回<code>True</code>否则返回<code>Fales</code>。</td></tr><tr><td><code>&gt;=</code></td><td>检查左边值是否<code>大于等于</code>右边值，如果是返回<code>True</code>否则返回<code>Fales</code>。</td></tr><tr><td><code>&lt;</code></td><td>检查左边值是否<code>小于</code>右边值，如果是返回<code>True</code>否则返回<code>Fales</code>。</td></tr><tr><td><code>&lt;=</code></td><td>检查左边值是否<code>小于等于</code>右边值，如果是返回<code>True</code>否则返回<code>Fales</code>。</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th><code>运算符</code></th><th><code>描述</code></th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑<code>AND</code>运算符。如果两边的操作数都是<code>True</code>，则为<code>True</code>，否则为<code>False</code>。</td></tr><tr><td><code>||</code></td><td>逻辑<code>OR</code>运算符。 如果两边的操作数有一个<code>True</code>，则为<code>True</code>，否则为<code>False</code>。</td></tr><tr><td><code>!</code></td><td>逻辑<code>NOT</code>运算符。 如果条件为<code>True</code>，则为<code>False</code>，否则为<code>True</code>。</td></tr></tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符对整数在内存中的二进制位进行操作。</p><table><thead><tr><th><code>运算符</code></th><th><code>描述</code></th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>参与运算的两数各对应的二进位相<code>与</code>。（两位均为1才为1）</td></tr><tr><td><code>|</code></td><td>参与运算的两数各对应的二进位相<code>或</code>。（两位有一个为1就为1）</td></tr><tr><td><code>^</code></td><td>参与运算的两数各对应的二进位相<code>异或</code>，当两对应的二进位相异时，结果为1。（两位不一样则为1）</td></tr><tr><td><code>&lt;&lt;</code></td><td><code>左移</code>n位就是乘以2的n次方。<code>a&lt;&lt;b</code>是把a的各二进位全部<code>左移</code>b位，高位丢弃，低位补0。</td></tr><tr><td><code>&gt;&gt;</code></td><td><code>右移</code>n位就是除以2的n次方。<code>a&gt;&gt;b</code>是把a的各二进位全部<code>右移</code>b位。</td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th><code>运算符</code></th><th><code>描述</code></th></tr></thead><tbody><tr><td><code>=</code></td><td>简单的<code>赋值</code>运算符，将一个表达式的值赋给一个左值</td></tr><tr><td><code>+=</code></td><td>相<code>加</code>后再<code>赋值</code></td></tr><tr><td><code>-=</code></td><td>相<code>减</code>后再<code>赋值</code></td></tr><tr><td><code>*=</code></td><td>相<code>乘</code>后再<code>赋值</code></td></tr><tr><td><code>/=</code></td><td>相<code>除</code>后再<code>赋值</code></td></tr><tr><td><code>%=</code></td><td><code>求余</code>后再<code>赋值</code></td></tr><tr><td><code>&lt;&lt;=</code></td><td><code>左移</code>后再<code>赋值</code></td></tr><tr><td><code>&gt;&gt;=</code></td><td><code>右移</code>后再<code>赋值</code></td></tr><tr><td><code>&amp;=</code></td><td>按位<code>与</code>后再<code>赋值</code></td></tr><tr><td><code>|=</code></td><td>按位<code>或</code>后再<code>赋值</code></td></tr><tr><td><code>^=</code></td><td>按位<code>异或</code>后再<code>赋值</code></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> Go运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晨星基金评级</title>
      <link href="/ji-jin/chen-xing-ji-jin-ping-ji/"/>
      <url>/ji-jin/chen-xing-ji-jin-ping-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="晨星基金评级"><a href="#晨星基金评级" class="headerlink" title="晨星基金评级"></a>晨星基金评级</h2><table><thead><tr><th>代码</th><th>名称</th><th>分类</th><th>三年</th><th>五年</th><th>回报</th></tr></thead><tbody><tr><td>519674</td><td>银河创新成长混合</td><td>激进</td><td>五星</td><td>四星</td><td>47.90</td></tr><tr><td>000751</td><td>嘉实新兴产业股票</td><td>股票</td><td>五星</td><td>五星</td><td>18.57</td></tr><tr><td>161903</td><td>万家行业优选混合 (LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>42.31</td></tr><tr><td>260108</td><td>景顺长城新兴成长混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.97</td></tr><tr><td>162605</td><td>景顺长城鼎益混合(LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>-0.11</td></tr><tr><td>000083</td><td>汇添富消费行业混合</td><td>激进</td><td>五星</td><td>五星</td><td>3.21</td></tr><tr><td>519732</td><td>交银定期支付双息平衡混合</td><td>混合</td><td>五星</td><td>五星</td><td>12.95</td></tr><tr><td>519712</td><td>交银阿尔法核心混合</td><td>激进</td><td>五星</td><td>五星</td><td>10.88</td></tr><tr><td>159928</td><td>汇添富中证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>2.35</td></tr><tr><td>160222</td><td>国泰国证食品饮料行业指数分级</td><td>股票</td><td>五星</td><td>五星</td><td>-1.31</td></tr><tr><td>110011</td><td>易方达中小盘混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.62</td></tr><tr><td>000595</td><td>嘉实泰和混合</td><td>激进</td><td>五星</td><td>五星</td><td>16.66</td></tr><tr><td>110022</td><td>易方达消费行业股票</td><td>股票</td><td>五星</td><td>五星</td><td>-1.28</td></tr><tr><td>000339</td><td>长城医疗保健混合</td><td>激进</td><td>五星</td><td>五星</td><td>23.34</td></tr><tr><td>519736</td><td>交银新成长混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.06</td></tr><tr><td>180012</td><td>银华富裕主题混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.78</td></tr><tr><td>512600</td><td>嘉实中证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>1.94</td></tr><tr><td>519697</td><td>交银优势行业混合</td><td>混合</td><td>五星</td><td>五星</td><td>11.24</td></tr><tr><td>163415</td><td>兴全商业模式优选混合(LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>12.67</td></tr><tr><td>510630</td><td>华夏上证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>2.32</td></tr><tr><td>070032</td><td>嘉实优化红利混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.24</td></tr><tr><td>000619</td><td>东方红产业升级灵活配置混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.99</td></tr><tr><td>519700</td><td>交银主题优选混合</td><td>激进</td><td>五星</td><td>五星</td><td>8.33</td></tr><tr><td>519688</td><td>交银精选混合</td><td>激进</td><td>五星</td><td>五星</td><td>4.96</td></tr><tr><td>110003</td><td>易方达上证50指数A</td><td>股票</td><td>五星</td><td>五星</td><td>-1.31</td></tr><tr><td>690007</td><td>民生加银景气行业混合</td><td>激进</td><td>五星</td><td>五星</td><td>6.08</td></tr><tr><td>519066</td><td>汇添富蓝筹稳健混合</td><td>激进</td><td>五星</td><td>五星</td><td>2.19</td></tr><tr><td>202023</td><td>南方优选成长混合A</td><td>混合</td><td>五星</td><td>五星</td><td>8.34</td></tr><tr><td>040008</td><td>华安策略优选混合</td><td>激进</td><td>五星</td><td>五星</td><td>-1.64</td></tr><tr><td>166002</td><td>中欧新蓝筹混合 -A</td><td>激进</td><td>五星</td><td>五星</td><td>7.21</td></tr><tr><td>519068</td><td>汇添富成长焦点混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.48</td></tr><tr><td>159905</td><td>工银深证红利ETF</td><td>股票</td><td>五星</td><td>五星</td><td>-0.75</td></tr><tr><td>159916</td><td>建信深证基本面60ETF</td><td>股票</td><td>五星</td><td>五星</td><td>1.51</td></tr><tr><td>165312</td><td>建信央视财经50指数分级</td><td>股票</td><td>五星</td><td>五星</td><td>2.25</td></tr><tr><td>481012</td><td>工银瑞信深证红利ETF联接A</td><td>股票</td><td>五星</td><td>五星</td><td>-0.61</td></tr><tr><td>217027</td><td>招商央视财经50指数A</td><td>股票</td><td>五星</td><td>五星</td><td>2.56</td></tr><tr><td>530015</td><td>建信深证基本面60ETF联接A</td><td>股票</td><td>五星</td><td>五星</td><td>1.55</td></tr><tr><td>519069</td><td>汇添富价值精选混合A</td><td>激进</td><td>五星</td><td>五星</td><td>3.34</td></tr><tr><td>270002</td><td>广发稳健增长混合</td><td>混合</td><td>五星</td><td>五星</td><td>6.60</td></tr><tr><td>450002</td><td>国富弹性市值混合</td><td>激进</td><td>五星</td><td>五星</td><td>0.20</td></tr><tr><td>540012</td><td>汇丰晋信恒生A股行业龙头指数A</td><td>股票</td><td>五星</td><td>五星</td><td>-1.19</td></tr><tr><td>163407</td><td>兴全沪深300指数增强(LOF)A</td><td>股票</td><td>五星</td><td>五星</td><td>0.87</td></tr><tr><td>160918</td><td>大成中小盘混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>25.14</td></tr><tr><td>460005</td><td>华泰柏瑞价值增长混合</td><td>激进</td><td>四星</td><td>五星</td><td>26.13</td></tr><tr><td>000136</td><td>民生加银策略精选混合</td><td>激进</td><td>四星</td><td>五星</td><td>26.59</td></tr><tr><td>519091</td><td>新华泛资源优势混合</td><td>激进</td><td>四星</td><td>五星</td><td>20.45</td></tr><tr><td>163406</td><td>兴全合润分级混合</td><td>激进</td><td>四星</td><td>五星</td><td>11.58</td></tr><tr><td>519704</td><td>交银先进制造混合</td><td>激进</td><td>四星</td><td>五星</td><td>17.81</td></tr><tr><td>180031</td><td>银华中小盘精选混合</td><td>激进</td><td>四星</td><td>五星</td><td>9.44</td></tr><tr><td>000527</td><td>南方新优享灵活配置混合A</td><td>激进</td><td>四星</td><td>五星</td><td>16.92</td></tr><tr><td>163412</td><td>兴全轻资产混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>8.70</td></tr><tr><td>000452</td><td>南方医药保健灵活配置混合</td><td>激进</td><td>四星</td><td>五星</td><td>16.86</td></tr><tr><td>000547</td><td>建信健康民生混合</td><td>激进</td><td>四星</td><td>五星</td><td>16.30</td></tr><tr><td>161219</td><td>国投瑞银新兴产业混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>9.59</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基金 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言数组和切片</title>
      <link href="/golang/go-yu-yan-shu-zu-he-qie-pian/"/>
      <url>/golang/go-yu-yan-shu-zu-he-qie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="数组学习和测试"><a href="#数组学习和测试" class="headerlink" title="数组学习和测试"></a>数组学习和测试</h2><h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><p>数组声明用<code>var name [3]int</code>来声明一个名字叫做<code>name</code>的数组，他有3个元素。数组声明中必须要用<code>[n]</code>或者<code>[...]</code>来确定数组内元素数量。<code>[...]</code>表示初始化数组是编译器根据你给的数据自动推导数字的元素数量。记住，数组必须要有元素数量，而且元素数量不能更改。不同元素数量的数组是两个数据类型，比如<code>[3]int</code>和<code>[4]int</code>是两个数据类型，好比<code>int</code>和<code>string</code>一样不能相互做逻辑运算。</p><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><p>声明数组的格式是：<br><code>var 数组名字 [元素数量] 数组类型</code>。</p><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>初始化一个数组可以用下面的代码来声明并初始化名字是<code>name</code>的数组，他有两个元素<code>"铁锤"</code>和<code>"钢蛋"</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token string">"铁锤"</span><span class="token punctuation">,</span><span class="token string">"钢蛋"</span><span class="token punctuation">}</span></code></pre><p>或者用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span></code></pre><p>来声明一个由编译器自动推导出有3个元素的数组<code>name</code>。还可以用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"铁柱"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"钢蛋"</span><span class="token punctuation">}</span></code></pre><p>来指定数组<code>name</code>的第<code>0</code>个元素保存<code>铁柱</code>，第<code>5</code>个元素保存<code>铁柱</code>来初始化数组。当然也可以用</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span></code></pre><p>这种简写方式声明并初始化数组。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>你可以用如下方法创建一个二维数组：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"钢锤"</span><span class="token punctuation">,</span> <span class="token string">"laobain"</span><span class="token punctuation">,</span> <span class="token string">"2B"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>或者：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"钢锤"</span><span class="token punctuation">,</span> <span class="token string">"laobain"</span><span class="token punctuation">,</span> <span class="token string">"2B"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>如果用自动推导元素数量的方式需要注意，编译器只能自动推导第一层的元素数量。用<code>name := [...][...]string{}</code>编译器直接报错，因为编译器只能推导第一层的<code>[...]</code>第二个中括号<code>[]</code>内必须明确的给定元素数量。</p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>数组遍历一般推荐用<code>for i,zhi := range name {}</code>来遍历数组，<code>i</code>取得数字<code>name</code>的索引，<code>zhi</code>取得数组<code>name</code>的数据。或者也可以用<code>for i:=0; i&lt;=9; i++{}</code>来遍历数组。</p><p>另外数组是值引用类型，因此赋值和传参数不会改变原数组的值。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span>name1 <span class="token operator">:=</span> namefmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v\n数组name1:%v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span>name1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"柱子"</span> <span class="token comment" spellcheck="true">//修改name1并不影响name</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v\n数组name1:%v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name1<span class="token punctuation">)</span></code></pre><p>再另外：<code>[n]*T</code>表示指针数组，<code>*[n]T</code>表示数组指针 。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片是基于数组做的封装，切片长度可变。声明切片是不需要在<code>[]</code>中定义元素数量。切片是引用类型，也就是说对切片进行操作，会改变底层数组的数据。</p><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 切片名字 <span class="token punctuation">[</span><span class="token punctuation">]</span>类型</code></pre><p>可以使用内置函数<code>len()</code>取得切片长度，用内置函数<code>cap()</code>取得切片容量。</p><h3 id="基于数组定义切片"><a href="#基于数组定义切片" class="headerlink" title="基于数组定义切片"></a>基于数组定义切片</h3><p>为数组<code>name</code>创建切片：</p><pre class=" language-go"><code class="language-go">qiepian <span class="token operator">:=</span> name <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>基于数组<code>name</code>的切片<code>qiepian</code>。切片的数据是数字<code>name</code>的第1个元素开始到第四个元素之前结束。左开右闭原则，<code>name[1:4]</code>的意思说明左边数字<code>1</code>的元素到右边数字索引<code>4</code>之前的元素。当然你还可以对切片再次切片<code>qiepian1:=qiepian[:2]</code>。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> qiepian<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>基于数组的切片如果超出原数组的长度<code>qiepian:=name[1:6]</code>编译器会报如下错误：</p><blockquote><p>invalid slice index 6 (out of bounds for 5-element array)</p></blockquote><p>如果切片<code>qiepian1</code>超出<code>qiepian</code>的长度译器会识别出来么？答案是不会，嘿嘿，虽然它爹是谷歌。编译是识别不出来，但是运行是会报错，比如修改为<code>qiepian1 := qiepian[1:5]</code>编译没问题，但是运行是会报错：</p><blockquote><p>panic: runtime error: slice bounds out of range [:5] wit<br>goroutine 1 [running]:main.main()<br>/data/data/com.termux/files/home/go/src/socold.com/soc<br>exit status 2</p></blockquote><p>修改切片<code>qiepian[2]</code>的数据。也就是修改底层数组<code>name</code>的数据。因为切片的值是引用类型，而且<code>qiepian</code>和<code>qiepian2</code>都是基于数组<code>name</code>。所以修改<code>qiepian[2]</code>的数据，就是修改底层数组<code>name</code>的数据。既然底层数组<code>name</code>的数据修改了，那么基于数组<code>name</code>的两个切片<code>qiepian</code>和<code>qiepian1</code>显示出来的数据都该改变。下面输出已然证实结论。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改切片'qiepian[2]'的数据。</span>qiepian<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gg"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>同理，对切片的在切片修改数据一样的道理，会修改底层数组<code>name</code>。上面代码把<code>qiepian1:=name[1:4]</code>改成<code>qiepian1:=qiepian[1:4]</code>效果一样滴。</p><p>用<code>append(qiepian,"mm")</code>来为切片<code>qiepian</code>添加一个元素<code>mm</code>时，如果原数组<code>name</code>容量够用，会直接修改数组<code>name</code>的数据，并为切片<code>qiepian</code>扩大一个容量。底层还是原数组<code>name</code>。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//原数组'name'容量够用的话直接添加元素。</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"'qiepian'添加元素'mm'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果添加元素时，原数组容量不够，那就为切片<code>qiepian</code>重新造一个数组。比如下面代码，为切片<code>qiepian</code>添加两个元素是，原数组容量肯定不够用。我们又修改了切片<code>qiepian1[0]</code>的数据为<code>AA</code>，输出显示切片<code>qiepian1</code>的底层数组还是<code>name</code>，因为下面三组数据只有数组<code>name</code>和切片<code>qiepian1</code>的数据改变了，切片<code>qiepian</code>的数据并没有发生变化，所以，系统为切片<code>qiepian</code>重新造了一个新的底层数组。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//现在肯定超出原数组'name'的容量了。</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"zz"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"'qiepian'添加元素'mm'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span>qiepian1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AA"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"修改'qiepian1[0]'的数据为'AA'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="切片添加元素"><a href="#切片添加元素" class="headerlink" title="切片添加元素"></a>切片添加元素</h3><p>为切片添加元素可以使用<code>append(qiepian)</code>为切片添加一个元素。也可以使用<code>for</code>为切片添加元素。添加元素是主要数据类型，不要搞错了。<code>append()</code>可以为没有初始化或者没有分配内存的切片初始化。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//为切片添加多个元素</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为切片添加三个元素0,2,3</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用for为切片添加元素</span>nameI <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nameI <span class="token punctuation">{</span>    qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意看'append(qiepian, s...)'。因为's'也是一个切片，里面有多个元素。's...'的意思是把's'中的元素拆开，添加到切片'qiepian'中。</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> s<span class="token operator">...</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">)</span></code></pre><h3 id="构造切片"><a href="#构造切片" class="headerlink" title="构造切片"></a>构造切片</h3><p>可以使用<code>make([]数据类型,元素数量,切片容量)</code>来构造一个切片。下面提供三种构造切片的方法。用<code>make()</code>构造的切片并申请内存空间。第二种<code>name</code>根据存储数据来动态扩容。一般推荐用<code>make()</code>来构造切片，一次申请到够用的空间，提高程序运行效率。第二种就麻烦了，存一个元素时申请一个数组，存三个元素时在申请一个底层数组，存10个元素是在更换一个底层数组，拖累程序运行效率。推荐一次直接到位的使用<code>make()</code>申请到够用的元素数量和容量。第三种<code>var name3 []string</code>只是声明切片，并没有分配到底层数组。和<code>name2</code>一样是动态扩容的切片。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>name2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> name3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v len:%v cap:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v len:%v cap:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name3:%v len:%v cap:%v \n"</span><span class="token punctuation">,</span> name3<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="切片不能直接比较"><a href="#切片不能直接比较" class="headerlink" title="切片不能直接比较"></a>切片不能直接比较</h3><p>我们不能使用<code>==</code>来直接比较两个切片中的元素全部相等。切片唯一合法的比较操作是和<code>nil</code>比较。一个<code>nil</code>的切片没有底层数组。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>name2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> name3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v len:%v cap:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v len:%v cap:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%t name2:%t name3:%t \n"</span><span class="token punctuation">,</span> name <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> name2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> name3 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></code></pre><p>上面代码<code>name</code>，<code>name2</code>，<code>name3</code>都没有保存数据，但是<code>name3</code>返回的是<code>true</code>，因为<code>name</code>只是声明了切片，并没有初始化，还没有底层数组，所以返回<code>true</code>。那怎么判断切片有没有保存数据呢，只能用<code>len(name)==0</code>来判断切片有没有数据。一个<code>nil</code>的切片没有底层数组。</p><h3 id="切片的拷贝"><a href="#切片的拷贝" class="headerlink" title="切片的拷贝"></a>切片的拷贝</h3><p>拷贝切片有两种方法，先说第一种最简单的赋值拷贝。赋值拷贝简单方便，但是有一个缺点，<code>name</code>和<code>name2</code>都属于同一个底层数组，所以修改<code>name2[2]</code>的数据，会导致底层数组的数据改变，相应的<code>name</code>也会改变数据。入下代码：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//用make()构造切片</span>name <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化切片name</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//赋值拷贝name到name2</span>name2 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//打印name和name2</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改name[2]的数据</span>name2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gg"</span><span class="token comment" spellcheck="true">//再次输出name和name2</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">)</span></code></pre><p>第二种办法使用内置函数<code>copy()</code>拷贝。用<code>copy()</code>相当于把切片<code>name</code>的底层数组也拷贝到了切片<code>name2</code>，虽然保存的数据相同，但是两个切片的底层数组不一样了。这样修改切片<code>name2</code>就不会改动<code>name</code>的数据了。用法：<code>copy(目标切片,数据来源切片)</code>。<code>copy()</code>不会帮切片申请内存和初始化。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//用make()构造切片</span>name <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化切片name</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用make()构造切片</span>name2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用copy()函数把切片'name'拷贝到'name2'</span><span class="token function">copy</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打印name和name2</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改name[2]的数据</span>name2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gg"</span><span class="token comment" spellcheck="true">//再次输出name和name2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"修改'name2[2]=gg'后："</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name2:%v \n"</span><span class="token punctuation">,</span> name2<span class="token punctuation">)</span></code></pre><h3 id="从切片中删除元素"><a href="#从切片中删除元素" class="headerlink" title="从切片中删除元素"></a>从切片中删除元素</h3><p>并没有删除切片元素的方法，但是我们可以用但是我们可以用切片的特性来删除切片元素。如下例：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//声明并初始化数组'name'</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出数组'name'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//声明并初始化切片'name1'</span>name1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//输出切片'name1'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"切片name1:%v \n"</span><span class="token punctuation">,</span> name1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除切片元素</span>name1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>name1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出数组'name'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出切片</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"切片name1:%v \n"</span><span class="token punctuation">,</span> name1<span class="token punctuation">)</span></code></pre><p>输出如下：</p><blockquote><p>数组name:[aa bb cc dd ee]<br>切片name1:[aa bb cc dd ee]<br>数组name:[aa cc dd ee ee]<br>切片name1:[aa cc dd ee]</p></blockquote><p>仔细看数组<code>name</code>的数据。<code>append()</code>函数删除元素实际并不是删除，而且添加元素，或者叫修改元素，Go语言没有真正的删除切片或者数组元素的办法。<code>name1=append(name1[:1],name1[2:]...)</code>语句等同于:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//声明并初始化数组'name'</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出数组'name'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//声明并初始化切片'name1'</span>name1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//输出切片'name1'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"切片name1:%v \n"</span><span class="token punctuation">,</span> name1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除切片元素</span><span class="token comment" spellcheck="true">// name1 = append(name1[:1], name1[2:]...)</span><span class="token comment" spellcheck="true">//上面语句等同于下面3行语句。</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//输出数组'name'</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出切片</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"切片name1:%v \n"</span><span class="token punctuation">,</span> name1<span class="token punctuation">)</span></code></pre><p>说白了，就是掩耳盗铃，我不看你就就是没有，就是删除成功了。自己骗自己，但是效果出来了啊。呵呵～～～</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> Go语言数组 </tag>
            
            <tag> Go切片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpaceVim官方文档</title>
      <link href="/golang/spacevim-guan-fang-wen-dang/"/>
      <url>/golang/spacevim-guan-fang-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>该层用于golang开发。 它还提供了其他特定于语言的键映射。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要使用此配置层，请使用以下命令更新自定义配置文件：</p><pre class=" language-yml"><code class="language-yml">[[layers]]  name = "lang#go"</code></pre><p>安装后，在vim中运行：<code>GoInstallBinaries</code>。<br>要启用标签栏支持，您需要安装<a href="https://github.com/jstemmer/gotags">gotags</a>：</p><pre><code>go get -u github.com/jstemmer/gotags</code></pre><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>自动完成</li><li>语法检查</li><li>转到定义</li><li>参考查找器</li></ul><h2 id="键绑定"><a href="#键绑定" class="headerlink" title="键绑定"></a>键绑定</h2><p><strong>导入键绑定：</strong></p><table><thead><tr><th><code>Key Bindings</code></th><th><code>Descriptions</code></th></tr></thead><tbody><tr><td><code>SPC c l</code></td><td><code>注释或取消注释当前行</code></td></tr><tr><td><code>SCP c p/P</code></td><td><code>注释或取消注释当前段落(上下空行之间的算段落)</code></td></tr><tr><td><code>u</code></td><td><code>撤销上一步操作</code></td></tr><tr><td><kbd>Ctrl</kbd>+<kbd>p</kbd></td><td><code>代码补全</code></td></tr><tr><td><code>z</code> <code>.</code></td><td><code>光标行处于屏幕中间</code></td></tr><tr><td><code>z</code> <code>-</code></td><td><code>光标行处于屏幕最底</code></td></tr><tr><td><code>z</code> <code>回车</code></td><td><code>光标行处于屏幕顶部</code></td></tr><tr><td><code>w</code></td><td><code>下一个单词首字母</code></td></tr><tr><td><code>d</code></td><td><code>上一个单词首字母</code></td></tr><tr><td><code>e</code></td><td><code>当前单词尾字母</code></td></tr><tr><td><code>SPC w F</code></td><td><code>新建标签</code></td></tr><tr><td><code>SPC t t</code></td><td><code>打开标签管理器</code></td></tr><tr><td><code>SPC w o</code></td><td><code>切换标签</code></td></tr><tr><td><code>g d</code></td><td><code>转到函数定义</code></td></tr><tr><td><code>g 0</code></td><td><code>跳到第一个标签</code></td></tr><tr><td><code>SPC l a</code></td><td><code>go alternate</code></td></tr><tr><td><code>SPC l b</code></td><td><code>go build</code></td></tr><tr><td><code>SPC l c</code></td><td><code>go coverage</code></td></tr><tr><td><code>SPC l d</code></td><td><code>go doc</code></td></tr><tr><td><code>SPC l D</code></td><td><code>go doc vertical</code></td></tr><tr><td><code>SPC l e</code></td><td><code>go rename</code></td></tr><tr><td><code>SPC l g</code></td><td><code>go definition</code></td></tr><tr><td><code>SPC l G</code></td><td><code>go generate</code></td></tr><tr><td><code>SPC l h</code></td><td><code>go info</code></td></tr><tr><td><code>SPC l i</code></td><td><code>go implements</code></td></tr><tr><td><code>SPC l I</code></td><td><code>implement stubs</code></td></tr><tr><td><code>SPC l k</code></td><td><code>add tags</code></td></tr><tr><td><code>SPC l K</code></td><td><code>remove tags</code></td></tr><tr><td><code>SPC l l</code></td><td><code>list declarations in file</code></td></tr><tr><td><code>SPC l m</code></td><td><code>format imports</code></td></tr><tr><td><code>SPC l M</code></td><td><code>add import</code></td></tr><tr><td><code>SPC l r</code></td><td><code>go run</code></td></tr><tr><td><code>SPC l s</code></td><td><code>fill struct</code></td></tr><tr><td><code>SPC l t</code></td><td><code>go test</code></td></tr><tr><td><code>SPC l v</code></td><td><code>freevars</code></td></tr><tr><td><code>SPC l x</code></td><td><code>go referrers</code></td></tr></tbody></table><h3 id="代码格式："><a href="#代码格式：" class="headerlink" title="代码格式："></a>代码格式：</h3><p>格式当前缓冲区的默认键绑定为<code>SPC b f</code>，并且此键绑定在<code>格式层</code>中定义。 您也可以使用<code>g =</code>缩进当前缓冲区。</p><p>要使新格式支持go文件，您应该具有<a href="http://golang.org/cmd/gofmt/">go-fmt</a>命令，或者安装<a href="https://godoc.org/golang.org/x/tools/cmd/goimports">goimports</a>。<code>go-fmt</code>由golang的默认安装提供，因此请确保已正确设置go环境。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> SpaceVim </tag>
            
            <tag> vim开发环境 </tag>
            
            <tag> go语言开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM正则表达式</title>
      <link href="/linux/vim-zheng-ze-biao-da-shi/"/>
      <url>/linux/vim-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="vim正则表达式"><a href="#vim正则表达式" class="headerlink" title="vim正则表达式"></a>vim正则表达式</h2><p>Vim中的正则表达式功能很强大，如果能自由运用，则可以完成很多难以想象的操作。如果你比较熟悉Perl的正规表达式，可以直接参照<a href="http://www.idv2.com/vimwiki/index.php?%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#perldiff">与Perl正则表达式的区别</a>一节。</p><h3 id="使用正则表达式的命令"><a href="#使用正则表达式的命令" class="headerlink" title="使用正则表达式的命令"></a>使用正则表达式的命令</h3><p>使用正则表达式的命令最常见的就是<code>/**</code>搜索命令。其格式如下：</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>另一个很有用的命令就是<code>:n1,n2s/*/*/gc</code>（替换）命令，将第一个*之间的正则表达式替换成第二个*之间的字符串。</p><p><code>:s/正则表达式/替换字符串/选项</code><br>在学习正则表达式时可以利用<code>/</code>命令来练习。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符是具有特殊意义的字符。使用元字符可以表达任意字符、行首、行 尾、某几个字符等意义。</p><h4 id="元字符一览"><a href="#元字符一览" class="headerlink" title="元字符一览"></a>元字符一览</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[abc]</code></td><td>匹配方括号中的任意一个字符。可以使用-表示字符范围。</td></tr><tr><td><code>[a-z0-9]</code></td><td>匹配小写字母和阿拉伯数字。</td></tr><tr><td><code>[^abc]</code></td><td>在方括号内开头使用<code>^</code>符号，表示匹配除方括号中字符之外的任意字符。</td></tr><tr><td><code>\d</code></td><td>匹配阿拉伯数字，等同于<code>[0-9]</code>。</td></tr><tr><td><code>\D</code></td><td>匹配阿拉伯数字之外的任意字符，等同于<code>[^0-9]</code>。</td></tr><tr><td><code>\x</code></td><td>匹配十六进制数字，等同于<code>[0-9A-Fa-f]</code>。</td></tr><tr><td><code>\X</code></td><td>匹配十六进制数字之外的任意字符，等同于<code>[^0-9A-Fa-f]</code>。</td></tr><tr><td><code>\w</code></td><td>匹配单词字母，等同于<code>[0-9A-Za-z_]</code>。</td></tr><tr><td><code>\W</code></td><td>匹配单词字母之外的任意字符，等同于<code>[^0-9A-Za-z_]</code>。</td></tr><tr><td><code>\t</code></td><td>匹配<kbd>TAB</kbd>字符。</td></tr><tr><td><code>\s</code></td><td>匹配空白字符，等同于<code>[\t]</code>。</td></tr><tr><td><code>\S</code></td><td>匹配非空白字符，等同于<code>[^\t]</code>。</td></tr></tbody></table><p>另外，如果要查找字符<code>*、.、/</code>等，则需要在前面用<code>\</code>符号，表示这不是元字符，而只是普通字符而已。</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\*</code></td><td>匹配<code>*</code>字符。</td></tr><tr><td><code>\.</code></td><td>匹配<code>.</code>字符。</td></tr><tr><td><code>\/</code></td><td>匹配<code>/</code>字符。</td></tr><tr><td><code>\\</code></td><td>匹配<code>\</code>字符。</td></tr><tr><td><code>\[</code></td><td>匹配<code>[</code>字符。</td></tr></tbody></table><h5 id="表示数量的元字符"><a href="#表示数量的元字符" class="headerlink" title="表示数量的元字符"></a>表示数量的元字符</h5><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配<code>0-任意</code>个</td></tr><tr><td><code>\+</code></td><td>匹配<code>1-任意</code>个</td></tr><tr><td><code>\?</code></td><td>匹配<code>0-1</code>个</td></tr><tr><td><code>\{n,m}</code></td><td>匹配<code>n-m</code>个</td></tr><tr><td><code>\{n}</code></td><td>匹配<code>n</code>个</td></tr><tr><td><code>\{n,}</code></td><td>匹配<code>n-任意</code></td></tr><tr><td><code>\{,m}</code></td><td>匹配<code>0-m个</code></td></tr></tbody></table><h5 id="表示位置的符号"><a href="#表示位置的符号" class="headerlink" title="表示位置的符号"></a>表示位置的符号</h5><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>$</code></td><td>匹配行尾</td></tr><tr><td><code>^</code></td><td>匹配行首</td></tr><tr><td><code>\&lt;</code></td><td>匹配单词词首</td></tr><tr><td><code>\&gt;</code></td><td>匹配单词词尾</td></tr></tbody></table><h5 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h5><p><code>/char\s\+[A-Za-z_]\w*;</code><br><strong>查找所有以char开头，之后是一个以上的空白，最后是一个标识符和分号。</strong></p><p><code>/\d\d:\d\d:\d\d</code><br><strong>查找如17:37:01格式的时间字符串</strong></p><p><code>:g/^\s*$/d</code><br><strong>删除只有空白的行</strong></p><p><code>:s/\&lt;four\&gt;/4/g</code><br><strong>将所有的four替换成4，但是fourteen中的four不替换</strong></p><h3 id="替换变量"><a href="#替换变量" class="headerlink" title="替换变量"></a>替换变量</h3><p>在正规表达式中使用<code>\(</code>和<code>\)</code>符号括起正规表达式，即可在后面使用<code>\1</code>、<code>\2</code>等变量来访问<code>\(</code>和<code>\)</code>中的内容。</p><h4 id="替换变量实例："><a href="#替换变量实例：" class="headerlink" title="替换变量实例："></a>替换变量实例：</h4><p><code>/\(a\+\)[^a]\+\1</code><br><strong>查找开头和结尾处a的个数相同的字符串，如aabbbaa，aaacccaaa，但是不匹配abbbaa</strong></p><p><code>:s/\(http:\/\/[-a-z\._~\+%\/]\+\)/&lt;a href="\1"&gt;\1&lt;\/a&gt;/</code><br><strong>将URL替换为</strong><code>&lt;a href="http://url"&gt;http://url&lt;/a&gt;</code><strong>的格式</strong></p><p><code>:s/\(\w\+\)\s\+\(\w\+\)/\2\t\1</code><br><strong>将data1，data2 修改为data2，data1</strong></p><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><p>在替换命令<code>:n1,n2s/*/#/</code>中可以使用函数表达式来书写替换内容，格式为:</p><p><strong>:s/替换字符串/=函数式</strong></p><p>在函数式中可以使用<code>submatch(1)</code>、<code>submatch(2)</code>等来引用<code>\1</code>、<code>\2</code>等的内容，而<code>submatch(0)</code>可以引用匹配的整个内容。</p><h5 id="函数式实例"><a href="#函数式实例" class="headerlink" title="函数式实例"></a>函数式实例</h5><p><code>:%s/\&lt;id\&gt;/\=line(".")</code><br><strong>将各行的id字符串替换为行号</strong></p><p><code>:%s/^\&lt;\w\+\&gt;/\=(line(".")-10) .".". submatch(1)</code><br><strong>将每行开头的单词替换为(行号-10).单词的格式，如第11行的</strong><code>word</code><strong>替换成</strong><code>1. word</code></p><h3 id="与Perl正则表达式的区别"><a href="#与Perl正则表达式的区别" class="headerlink" title="与Perl正则表达式的区别"></a>与Perl正则表达式的区别</h3><p>元字符的区别</p><table><thead><tr><th>Vim语法</th><th>Perl语法</th><th>含义</th></tr></thead><tbody><tr><td><code>\+</code></td><td><code>+</code></td><td><code>1-任意个</code></td></tr><tr><td><code>\?</code></td><td><code>?</code></td><td><code>0-1个</code></td></tr><tr><td><code>\{n,m}</code></td><td><code>{n,m}</code></td><td><code>n-m个</code></td></tr><tr><td><code>\(</code>和<code>\)</code></td><td><code>(和)</code></td><td><code>分组</code></td></tr></tbody></table><h3 id="vi-正则表达式练习"><a href="#vi-正则表达式练习" class="headerlink" title="vi 正则表达式练习"></a>vi 正则表达式练习</h3><p>闲言碎语不要讲…例子说明一切，比如下面这段我需要换成<code>ubb</code>标签</p><p>vim命令模式，输入:</p><p><code>:%s/.*src=”([^"]*)”[^&gt;]*&gt;/[img]1[/img]/g</code></p><p>替换为<br><code>[img ]gu.jpg[ /img]</code><br><code>[img ]os.jpg[ /img]</code><br><code>[img ]hu.jpg[ /img]</code><br><code>[img ]ang.jpg[ /img]</code></p><p>解释如下：</p><p><code>:</code><br><strong>命令执行状态</strong></p><p><code>%s</code><br><strong>表示查找并替换</strong></p><p><code>%s/a/b/g</code><br><strong>a被查找的字符串（正则匹配）；b要替换成的文字；g表示全局搜索替换（否则只处理找到的第一个结果）</strong></p><p><code>([^"]*)</code><br><strong>表示非引号的字符N个；外面()表示后面替换要用（用1,…,9等引用）</strong></p><p><code>[/img]</code><br><strong>/需要被转义</strong></p><p>与其它工具正则不一样的地方在于<code>()</code>也必须<code>()</code>，怪不得我老是弄不出来。</p><blockquote><p>相关资料：<br><a href="http://net.pku.edu.cn/~yhf/tao_regexps_zh.html">via</a>:<a href="http://net.pku.edu.cn/~yhf/tao_regexps_zh.html">http://net.pku.edu.cn/~yhf/tao_regexps_zh.html</a></p></blockquote><p>简单命令:</p><p><code>:%s/ */ /g</code>---把一个或者多个空格替换为一个空格。<br><code>:%s/ *$//</code>---去掉行尾的所有空格。<br><code>:%s/^/ /</code>---在每一行头上加入一个空格。<br><code>:%s/^[0-9][0-9]* //</code>---去掉行首的所有数字字符。<br><code>:%s/b[aeio]g/bug/g</code>---将所有的bag、beg、big和bog改为bug。<br><code>:%s/t([aou])g/h1t/g</code>---将所有tag、tog和tug分别改为hat、hot和hug（注意用group的用法和使用1引用前面被匹配的字符）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 正则表达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言占位符</title>
      <link href="/golang/go-yu-yan-zhan-wei-fu/"/>
      <url>/golang/go-yu-yan-zhan-wei-fu/</url>
      
        <content type="html"><![CDATA[<p>在这里按照占位符将被替换的变量类型划分，更方便查询和记忆。</p><h2 id="General（通用占位符）"><a href="#General（通用占位符）" class="headerlink" title="General（通用占位符）"></a>General（通用占位符）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%v</td><td>以默认的方式打印变量的值</td></tr><tr><td>%T</td><td>打印变量的类型</td></tr><tr><td>%%</td><td>字面上的百分号，并非值的占位符</td></tr></tbody></table><h2 id="Integer（整型）"><a href="#Integer（整型）" class="headerlink" title="Integer（整型）"></a>Integer（整型）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%+d</td><td>带符号的整型</td></tr><tr><td>%q</td><td>打印单引号</td></tr><tr><td>%o</td><td>不带零的八进制</td></tr><tr><td>%#o</td><td>带零的八进制</td></tr><tr><td>%x</td><td>小写的十六进制</td></tr><tr><td>%X</td><td>大写的十六进制</td></tr><tr><td>%#x</td><td>带0x的十六进制</td></tr><tr><td>%U</td><td>打印Unicode字符</td></tr><tr><td>%#U</td><td>打印带字符的Unicode</td></tr><tr><td>%b</td><td>打印整型的二进制</td></tr></tbody></table><h2 id="Integer-width（指定长度的整型，以5为例）"><a href="#Integer-width（指定长度的整型，以5为例）" class="headerlink" title="Integer width（指定长度的整型，以5为例）"></a>Integer width（指定长度的整型，以5为例）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%5d</td><td>整型长度为5，右对齐，左边留白</td></tr><tr><td>%-5d</td><td>左对齐右边留白</td></tr><tr><td>%05d</td><td>数字前面补零</td></tr></tbody></table><h2 id="Float（浮点数）"><a href="#Float（浮点数）" class="headerlink" title="Float（浮点数）"></a>Float（浮点数）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%f</td><td>(=%.6f) 6位小数点</td></tr><tr><td>%e</td><td>(=%.6e) 6位小数点（科学计数法）</td></tr><tr><td>%g</td><td>用最少的数字来表示</td></tr><tr><td>%.3g</td><td>最多3位数字来表示</td></tr><tr><td>%.3f</td><td>最多3位小数来表示</td></tr></tbody></table><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>正常输出字符串</td></tr><tr><td>%q</td><td>字符串带双引号，字符串中的引号带转义符</td></tr><tr><td>%#q</td><td>字符串带反引号，如果字符串内有反引号，就用双引号代替</td></tr><tr><td>%x</td><td>将字符串转换为小写的16进制格式</td></tr><tr><td>%X</td><td>将字符串转换为大写的16进制格式</td></tr><tr><td>% x</td><td>带空格的16进制格式</td></tr></tbody></table><h2 id="String-Width-指定长度的字符串，以5为例）"><a href="#String-Width-指定长度的字符串，以5为例）" class="headerlink" title="String Width (指定长度的字符串，以5为例）"></a>String Width (指定长度的字符串，以5为例）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%5s</td><td>最小宽度为5</td></tr><tr><td>%-5s</td><td>最小宽度为5（左对齐）</td></tr><tr><td>%.5s</td><td>最大宽度为5</td></tr><tr><td>%5.7s</td><td>最小宽度为5，最大宽度为7</td></tr><tr><td>%-5.7s</td><td>最小宽度为5，最大宽度为7（左对齐）</td></tr><tr><td>%5.3s</td><td>如果宽度大于3，则截断</td></tr><tr><td>%05s</td><td>如果宽度小于5，就会在字符串前面补零</td></tr></tbody></table><h2 id="Struct（结构体）"><a href="#Struct（结构体）" class="headerlink" title="Struct（结构体）"></a>Struct（结构体）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%v</td><td>以默认的方式打印变量的值</td></tr><tr><td>%+v</td><td>在打印结构体时，会添加字段名</td></tr><tr><td>%#v</td><td>在打印结构体时，会添加字段名和包名</td></tr></tbody></table><h2 id="Boolean（布尔值）"><a href="#Boolean（布尔值）" class="headerlink" title="Boolean（布尔值）"></a>Boolean（布尔值）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%t</td><td>打印true或false</td></tr></tbody></table><h2 id="Pointer（指针）"><a href="#Pointer（指针）" class="headerlink" title="Pointer（指针）"></a>Pointer（指针）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%p</td><td>带0x的指针</td></tr><tr><td>%#p</td><td>不带0x的指针</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> go语言 </tag>
            
            <tag> go语言占位符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建教程</title>
      <link href="/hexo/hexo-github-da-jian-jiao-cheng/"/>
      <url>/hexo/hexo-github-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo和Github的搭建"><a href="#Hexo和Github的搭建" class="headerlink" title="Hexo和Github的搭建"></a>Hexo和Github的搭建</h2><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h3 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h3><ul><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ul><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>为了把本地的网页文件上传到github上面去，需要用到工具。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以看一下。<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a></p><h5 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h5><p>到git官网上下载.exe文件,安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><div class="Donw_socold">        <a id="id" download="filename" href="https://git-scm.com/download/win">Download</a>        <span class="up">win-git</span>        <span class="down">win版Git</span>        </div><blockquote><p>顺便说一下，windows在git安装完后，就可以直接使用<code>git bash</code>来敲命令行了，不用自带的cmd，cmd有点难用。</p></blockquote><h5 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h5><p>对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><p>安装完成后在命令提示符中输入<code>git --version</code>来查看一下版本验证是否安装成功。</p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。</p><h5 id="windows：-1"><a href="#windows：-1" class="headerlink" title="windows："></a>windows：</h5><p>下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。<br>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h5 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h5><p>命令行安装:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> npma</code></pre><p>不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如图所示<br><img src="1.png" alt="linux安装node.js第一步" title="linux安装node.js第一步"><br>然后解压到你指定的文件夹即可，比如我解压到我系统的<code>/home/shw/MySoftwares</code>目录下了，如图:<br><img src="2.png" alt="linux安装node.js第二步" title="linux安装Node.js第二步"><br></p><blockquote><p>注意本压缩包是.tar.xz格式的，需要两次解压<br>配置一下环境变量</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/profile</code></pre><p>复制下面两行到刚打开的profile文件最底部(注意node的安装地址<code>/home/shw/MySoftwares/node-v12.8.0-linux-x64</code>换成自己的)：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> NODE_HOME<span class="token operator">=</span>/home/shw/MySoftwares/node-v12.8.0-linux-x64<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$NODE_HOME</span>/bin</code></pre><p>保存后退出，再执行下面命令将环境变量生效：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre><p>将目录软链接到全局环境下（命令后面的<code>/usr/local/bin/node</code>是固定的）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/node<span class="token function">sudo</span> <span class="token function">ln</span> -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm</code></pre><p>这样安装好了以后使用npm安装的包(比如：<code>ionic serve</code>)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令固定写法：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"export PATH=<span class="token variable"><span class="token variable">$(</span><span class="token function">npm</span> prefix -g<span class="token variable">)</span></span>/bin:<span class="token variable">$PATH</span>"</span> <span class="token operator">>></span> ~/.bashrc <span class="token operator">&amp;&amp;</span> <span class="token function">source</span> ~/.bashrc</code></pre><p>这样我们在所有用户，都可以使用npm，也可以使用npm安装的包的命令。成功的将nodejs安装并配置到全局环境下。安装完后，打开命令行终端，输入:</p><pre class=" language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v</code></pre><p>检查一下有没有安装成功</p><h5 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h5><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。比如我的博客文件都存放在<code>D:\Study\MyBlog</code>目录下。在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。定位到该目录下，输入<code>npm install -g hexo-cli</code>安装Hexo。可能会有几个报错，无视它就行。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><p>至此hexo就安装完了。接下来初始化一下hexo,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre class=" language-bash"><code class="language-bash">hexo init MyBlog</code></pre><p>这个MyBlog可以自己取什么名字都行，然后，接着输入<code>npm install</code>安装必备的组件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> MyBlog      //进入这个MyBlog文件夹<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹MyBlog目录下有：</p><ul><li><code>node_modules:</code>依赖包</li><li><code>public:</code>存放生成的页面</li><li><code>scaffolds</code>:生成文章的一些模板</li><li><code>source:</code>用来存放你的文章</li><li><code>themes:</code>主题**</li><li><code>_config.yml:</code>博客的配置文件**</li></ul><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，</p><pre class=" language-bash"><code class="language-bash">hexo ghexo server</code></pre><p>或者简写:<code>hexo s</code><br>然后浏览器打开<code>http://localhost:4000/</code>，就可以看到我们的博客啦，效果如下：<br><img src="3.png" alt="本地搭建Hexo预览" title="本地搭建Hexo预览"><br></p><h3 id="注册Github账号创建个人仓库"><a href="#注册Github账号创建个人仓库" class="headerlink" title="注册Github账号创建个人仓库"></a>注册Github账号创建个人仓库</h3><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><h4 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h4><p>打开<code>https://github.com/</code>，新建一个项目仓库<code>New repository</code>，如下所示：<br><img src="4.png" alt="注册Github账号" title="注册Github账号"><br><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，<code>README</code>初始化也要勾上。<br><img src="5.png" alt="创建仓库" title="创建仓库"><br>要创建一个和你用户名相同的仓库，后面加<code>.http://github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>http://xxxx.github.io</code>，其中<code>xxx</code>就是你注册<code>GitHub</code>的用户名。例如我的：<code>http://lingzhifeng.github.io</code>。</p><h4 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h4><p>生成SSH添加到GitHub，连接Github与本地。右键打开<code>git bash</code>，然后输入下面命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span></code></pre><p>这里的<code>yourname</code>输入你的<code>GitHub用户名</code>，<code>youremail</code>输入你<code>GitHub的邮箱</code>。这样GitHub才能知道你是不是对应它的账户。例如我的：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"shw2018"</span><span class="token function">git</span> config --global user.email <span class="token string">"hwsun@std.uestc.edu.cn"</span></code></pre><p>可以用以下两条，检查一下你有没有输对</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><p>然后创建SSH,一路回车，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的<code>私人秘钥</code>，不能给别人看的，<code>id_rsa.pub</code>是<code>公共秘钥</code>，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹，如果是linux系统你要输入<code>ls -a</code>才能看到这个文件夹。或者git bash中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。切记一个字符也不能少也不能多，哪怕是空格也不行。打开github，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：<br><img src="6.png" alt="上传公钥" title="上传公钥"><br>在git bash输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src="7.png" alt="验证连接" title="验证连接"><br></p><h4 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h4><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置：</p><pre class=" language-Yml"><code class="language-Yml">deploy:  type: git  repository: https://github.com/lingzhifeng/lingzhifeng.github.io  branch: master</code></pre><p><code>repository</code>修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><p>其中<code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code>顾名思义，生成静态文章，可以用<code>hexo g</code>缩写，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写。</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code>这个网站看到你的博客了！！<br><img src="8.png" alt="部署成功" title="部署成功"><br></p><h3 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h3><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><blockquote><p>不过，这一步不是必要的，如果目前还不想买域名可以先跳过，继续看后面的，以后想买域名了在还看这块</p></blockquote><p>首先你得购买一个专属域名，xx云都能买，看你个人喜好了。这篇以腾讯云为例，腾讯云官网购买：<br><img src="9.png" alt="腾讯云官网买域名" title="腾讯官网买域名"><br><br>然后实名认证后进入腾讯云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，如下图所示：<br><img src="10.png" alt="腾讯云控制台" title="腾讯云控制台"><br><br>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src="11.png" alt="github绑域名" title="github绑域名"><br><br>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\Study\MyBlog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g、hexo d</code>上传到github。过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！</p><h3 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h3><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。然后输入<code>hexo new post "article title"</code>，新建一篇文章。然后打开<code>D:\Study\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。你可以会直接在<code>vscode</code>里面编写<code>markdown</code>文件，可以实时预览，也可以用用其他编辑md文件的软件的工具编写。编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的<code>github.io</code>主页就能看到发布的文章啦。</p><p>到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。</p><h2 id="第二部分-定制"><a href="#第二部分-定制" class="headerlink" title="第二部分 定制"></a>第二部分 定制</h2><p>我们要定制自己的博客的话，首先就要来了解一下Hexo博客的一些目录和文件的作用，以及如何平滑更换漂亮的主题模板并加入自己的定制源代码实现个性化定制</p><h3 id="Hexo相关目录文件"><a href="#Hexo相关目录文件" class="headerlink" title="Hexo相关目录文件"></a>Hexo相关目录文件</h3><h4 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h4><p>从上图可以看出，博客的目录结构如下：</p><pre class=" language-Yml"><code class="language-Yml">- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。我们平时写文章只需要关注<code>source\_posts</code>这个文件夹就行了。</p><h3 id="hexo基本配置"><a href="#hexo基本配置" class="headerlink" title="hexo基本配置"></a>hexo基本配置</h3><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p>参数描述:<code>title</code>-网站标题、<code>subtitle</code>-网站副标题、<code>description</code>-网站描述、<code>author</code>-您的名字、<code>language</code>-网站使用的语言、<code>timezone</code>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>,<code>Japan</code>,和<code>UTC</code>。其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><p>参数描述：<code>url</code>-网址、<code>root</code>-网站根目录、<code>permalink</code>-文章的永久链接格式、<code>permalink_defaults</code>-永久链接中各部分的默认值。</p><ul><li>在这里，你需要把url改成你的网站域名。</li><li>permalink，也就是你生成某个文章时的那个链接格式。</li></ul><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。<br>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><blockquote><p>参数结果</p><ul><li>:year/:month/:day/:title/<br>2019/08/10/hello-world</li><li>:year-:month-:day-:title.html<br>2019-08-10-hello-world.html </li><li>:category/:title{foo,bar}<br>{foo,bar}/hello-world</li></ul></blockquote><p>再往下翻，中间这些都默认就好了。</p><pre class=" language-Yml"><code class="language-Yml">theme: landscap</code></pre><p><code>theme</code>就是选择什么主题，也就是在<code>themes</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>themes</code>文件夹下，再修改这个主题参数就可以了。</p><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p><code>Front-matter</code>是md文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class=" language-Yml"><code class="language-Yml">title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44</code></pre><p>上面这个是预先定义的参数，您可在模板中使用这些参数值并加以利用。<br>参数描述：<code>layout</code>-布局、<code>title</code>-标题、<code>date</code>-建立日期、<code>updated</code>-更新日期、<code>comments</code>-开启文章的评论功能、<code>tags</code>-标签（不适用于分页）、<code>categories</code>-分类（不适用于分页）、<code>permalink</code>-覆盖文章网址。<br>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。</p><pre class=" language-Yml"><code class="language-Yml">---title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44author: So Coldimg: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---</code></pre><h4 id="layout-布局"><a href="#layout-布局" class="headerlink" title="layout(布局)"></a>layout(布局)</h4><h5 id="post-默认布局"><a href="#post-默认布局" class="headerlink" title="post(默认布局)"></a>post(默认布局)</h5><p>当你每一次使用代码</p><pre class=" language-bash"><code class="language-bash">hexo new XXX</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。Hexo有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。而new这个命令其实是：</p><pre class=" language-html"><code class="language-html">hexo new [layout] "title"</code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><p>如果你想另起一页，那么可以使用</p><pre class=" language-bash"><code class="language-bash">hexo new page newpage</code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<code>http://xxx.xxx/newpage</code>。</p><h5 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h5><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class=" language-bash"><code class="language-bash">hexo new draft newdraft</code></pre><p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class=" language-bash"><code class="language-bash">hexo server --draft</code></pre><p>在本地端口中开启服务预览。<br>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre class=" language-bash"><code class="language-bash">hexo publish draft newdraft</code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>我们在了解Hexo博客文件基础之后，知道主题文件就放在<code>themes</code>文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。网上大多数主题都是github排名第一的Next主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：<code>hexo-theme-matery</code>，地址在<a href="https://github.com/blinkfox/hexo-theme-matery">传送门</a>。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。</p><blockquote><p>当然，人各有异，这个主题风格也不一定是你喜欢，那么你也可以跟着这教程类似的方法替换成你喜欢的就行了。<br><strong>特性：</strong></p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>他的介绍文档写得非常的详细，还有中英文两个版本。</li></ul><p>效果图如下：<br><img src="12.png" alt="Hexo主题Matery效果图" title="Hexo主题Matery效果图"><br><br>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。不过有些地方有些地方可以根据你自己的习惯和喜好修改一下， 下面记录一下我这个博客修改了的一些地方。</p><h4 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h4><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class=" language-Json"><code class="language-Json">---title: {{ title }}date: {{ date }}author:img:coverImg:top: falsecover: falsetoc: truemathjax: falsepassword:summary:tags:categories:---</code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h4 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h4><p>原来的主题没有404页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class=" language-Json"><code class="language-Json">title: 404date: 2019-08-5 16:41:10type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("</code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h4><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class="card"&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('myCV')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h3 id="数学公式渲染和代码高亮"><a href="#数学公式渲染和代码高亮" class="headerlink" title="数学公式渲染和代码高亮"></a>数学公式渲染和代码高亮</h3><h4 id="解决mathjax与代码高亮的冲突"><a href="#解决mathjax与代码高亮的冲突" class="headerlink" title="解决mathjax与代码高亮的冲突"></a>解决mathjax与代码高亮的冲突</h4><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了<code>mathjax</code>，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决<code>markdown</code>和<code>mathjax</code>的语法冲突），那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了。</p><h4 id="加数学公式显示"><a href="#加数学公式显示" class="headerlink" title="加数学公式显示"></a>加数学公式显示</h4><p>打开<code>/themes/matery/layout</code>中的<code>post.ejs</code>文件，在最下方粘贴如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config<span class="token punctuation">=</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于<code>markdown</code>语法与<code>mathjax</code>语法存在冲突，所以还需要修改源文件。打开<code>/node_modules/marked/lib</code>中的<code>marked.js</code>文件，第<code>539</code>行的<code>escape:</code>处替换成：</p><pre class=" language-Js"><code class="language-Js">escape: /^$[`*\[\]()#$+\-.!_>])/</code></pre><p>第<code>553</code>行的<code>em:</code>处替换成：</p><pre class=" language-Js"><code class="language-Js">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong><br>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p><pre class=" language-Tex"><code class="language-Tex">$y = f(x)$</code></pre><p>行间公式：</p><p>\[y = {f_{ {g_1}}}(x)\]</p><p>代码：</p><pre class=" language-Tex"><code class="language-Tex">\\[y = {f_{ {g_1}}}(x)\\]</code></pre><p>注意上面花括号之间有空格！</p><h4 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h4><p>修改<code>/themes/matery/layout/_partial</code>中的<code>footer.ejs</code>，在最后加上：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span>javascript</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后在合适的地方（比如<code>copyright</code>声明后面）加上下面的代码就行了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sitetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h4 id="修改不蒜子初始化计数"><a href="#修改不蒜子初始化计数" class="headerlink" title="修改不蒜子初始化计数"></a>修改不蒜子初始化计数</h4><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，我们在<code>/themes/matery/layout/_partial</code>里的<code>footer.ejs</code>文件最后加上：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 50ms周期检测函数</span>        <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化首次数据</span>        <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加上初始数据</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止检测</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后把上面几行有段代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>修改为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其实就是增加了两个<code>style='display:none'</code>而已。</p><h4 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h4><p>其实三步就行了，不用像网上有些教程那么复杂。</p><h5 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><h5 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><p>这里的动漫模型可以改，只需要下载对应模型就行了，你可以官方仓库去看有哪些模型，下载你喜欢的就行。</p><h5 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h5><p>在根目录配置文件中添加如下代码：</p><pre class=" language-yml"><code class="language-yml">live2d:    enable: true    scriptFrom: local    pluginRootPath: live2dw/    pluginJsPath: lib/    pluginModelPath: assets/    tagMode: false    log: false    model:        use: live2d-widget-model-shizuku    display:        position: right        width: 150        height: 300    mobile:        show: false    react:        opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，这个动漫人物最好不要和不蒜子同时使用，不然不蒜子会显示不出来。至于解决办法后续更新。</p><h5 id="解决动漫人物和不蒜子不能同时使用的bug（2019-08-11）："><a href="#解决动漫人物和不蒜子不能同时使用的bug（2019-08-11）：" class="headerlink" title="解决动漫人物和不蒜子不能同时使用的bug（2019.08.11）："></a>解决动漫人物和不蒜子不能同时使用的bug（2019.08.11）：</h5><p>打开<code>themes\matery\layout\_partial</code>中的<code>footer.ejs</code>，将本站总访问量和访客数的代码改为如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>变化就在下面两句，将源代码对应字段后面的<code>&lt;/span&gt;</code>写在前面了。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h5 id="又出新Bug"><a href="#又出新Bug" class="headerlink" title="又出新Bug"></a>又出新Bug</h5><p>发现按照上面改了过后，又出现一个新bug：文章头部的阅读次数不显示了，解决办法：（2019.08.11）：<br>打开<code>themes\matery\layout\_partial</code>中的<code>post-detail.ejs</code>，找到对应代码字段：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_page_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info-break-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-eye fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('readCount')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>:<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>修改为下面的就可以了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-eye fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('readCount')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>:<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><h4 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h4><p>由于这个主题自带了<code>gittalk</code>、<code>gitment</code>、<code>valine</code>等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是<code>gittalk</code>，如下：<br><img src="13.png" alt="Gittalk评论插件" title="Gittalk评论插件"><br>当然也可以用其他评论插件，只需要配置对应项就是了，不是自带的可以照着网上的教程自己弄一个，类似的文章有很多，可以搜索关键字就行了。</p><h4 id="添加网易云音乐BGM"><a href="#添加网易云音乐BGM" class="headerlink" title="添加网易云音乐BGM"></a>添加网易云音乐BGM</h4><p>写文章的时候，想插入一段BGM怎么办？<br>其实我们可以借助一些在线音乐的外链播放方式，首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<img src="14.png" alt="网易云网页版" title="网易云网页版"><br>可能你会遇到问题，比如点击生成外链会提示你由于版权原因，不能生成，那么可以用下面办法目前还有效，不知道后面会不会失效</p><h5 id="查找源代码"><a href="#查找源代码" class="headerlink" title="查找源代码"></a>查找源代码</h5><p>(以 Chrome为例，其他浏览器类似) 打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查）<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>i</kbd>；</p><h5 id="找到链接路径"><a href="#找到链接路径" class="headerlink" title="找到链接路径"></a>找到链接路径</h5><p>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/2/20707408/</code><br><img src="15.png" alt="找到链接路径" title="找到链接路径"></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>然后在浏览器地址栏修改歌单链接，示例：<code>http://music.163.com/#//outchain/2/20707408/</code>然后就转到外链设置页面了。</p><h5 id="复制Html代码"><a href="#复制Html代码" class="headerlink" title="复制Html代码"></a>复制Html代码</h5><p>复制如下代码：<br><img src="16.png" alt="复制Html代码" title="复制Html代码"><br>粘贴到文章对应位置就行了，为了美观，设置一下居中，具体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里粘贴刚刚复制的代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="博客音乐板块"><a href="#博客音乐板块" class="headerlink" title="博客音乐板块"></a>博客音乐板块</h4><p>如果我们自己写博客写疲劳了，想放松一下听听歌又不想切出博客主页，那么我们可以自己定制一个博客音乐播放界面，把自己喜欢的歌曲都放进来，这里用到是Aplayer插件，但是歌曲来源需要我们自己定义，但是，因为各大音乐平台，由于版权原因，很多歌曲是不支持外链播放的，难道我们就必须每首歌下载然后上传云空间，再获取词曲封面么？这就比较麻烦了。其实不然，研究了半个小时，我发现可以采取下面的办法，很方便：</p><ul><li>首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在地址栏拿到音乐ID号</li><li>然后通过下面网址：<code>http://music.163.com/song/media/outer/url?id=XXXXXX.mp3</code>，<code>XXXXXX</code>就是歌曲<code>ID</code>号，每一首歌我们只需要换掉这个<code>ID</code>号就行了,就相当于每一首的外链了。</li><li>最后封面图也可以按<kbd>F12</kbd>去找页面元素的链接，填到对应的<code>musics.jason</code>文件中就可以，批量填入，听到好听的歌曲随时更换随时新增，很方便。</li></ul><p>操作如下图：<br><img src="17.png" alt="添加歌曲外链" title="添加歌曲外链"></p><h4 id="增加emoji支持"><a href="#增加emoji支持" class="headerlink" title="增加emoji支持"></a>增加emoji支持</h4><p>为博客新增对<code>emoji</code>表情的支持，使用到了<code>hexo-filter-github-emojis</code>的<code>Hexo</code>插件来支持<code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法<code>::</code>（例如：<code>:smile:</code>、<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在<code>Hexo</code>根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>执行<code>hexo clean &amp;&amp; hexo g</code>重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。如下图：<br><img src="18.gif" alt="emoji演示" title="emoji演示"></p><h4 id="Valine评论模块修改"><a href="#Valine评论模块修改" class="headerlink" title="Valine评论模块修改"></a>Valine评论模块修改</h4><p><code>matery</code>主题已经集成<code>Valine</code>评论模块，在主题配置文件<code>.yml</code>中配置相应的字段就行了。<code>enable: true</code>，<code>XXX</code>字段是需要自己注册登录<code>leancloud</code>官网，创建应用然后获取<code>appId</code>和<code>appKey</code>，其他参数根据自己的需求修改就是，如下：</p><pre class=" language-yml"><code class="language-yml">valine:  enable: true  appId: XXXXXXXXXXXXXXXXXXXXX  appKey: XXXXXXXXXXXXXXXXXXXX  notify: true  verify: true  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder</code></pre><p>注意：<code>Valine</code>用在<code>matery</code>主题上有个bug就是第一条评论位置会错位。如下图：<br><img src="19.png" alt="Valine Bug" title="Valine Bug"><br>解决办法：<kbd>F12<kbd>开发者模式，控制台定位bug位置，修改参数，调整对应主题源文件参数，得以解决，如下图示：<br><img src="20.png" alt="定位Bug" title="定位Bug"><br><img src="21.png" alt="解决Bug" title="解决Bug"></kbd></kbd></p><h4 id="添加博客动态标签"><a href="#添加博客动态标签" class="headerlink" title="添加博客动态标签"></a>添加博客动态标签</h4><p>原理就是给博客增加一个事件判断，如下图所示：<br><img src="40.png" alt="添加博客动态标签1" title="添加博客动态标签1"><br><img src="41.png" alt="添加博客动态标签2" title="添加博客动态标签2"><br>打开博客主题文件夹，路径：<code>themes/matery/layout/layout.ejs</code>，在对应位置添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后<code>hexo clean &amp;&amp; hexo g</code>即可。</p><h4 id="添加鼠标点击烟花爆炸效果"><a href="#添加鼠标点击烟花爆炸效果" class="headerlink" title="添加鼠标点击烟花爆炸效果"></a>添加鼠标点击烟花爆炸效果</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>fireworks.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/footer.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.fireworks.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 鼠标点击烟花爆炸动效fireworks:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/fireworks.js">Download</a>        <span class="up">fireworks.js</span>        <span class="down">烟花特效</span> </div><h4 id="添加页面樱花飘落动效"><a href="#添加页面樱花飘落动效" class="headerlink" title="添加页面樱花飘落动效"></a>添加页面樱花飘落动效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>sakura.js</code>，并添加如下代码,然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.sakura.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/sakura.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-html"><code class="language-html"># 页面樱花飘落动效sakura:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/sakura.js">Download</a>        <span class="up">sakura.js</span>        <span class="down">樱花动效</span>        </div><h4 id="添加鼠标点击文字特效"><a href="#添加鼠标点击文字特效" class="headerlink" title="添加鼠标点击文字特效"></a>添加鼠标点击文字特效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>wenzi.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.wenzi.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/wenzi.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 页面鼠标点击文字特效wenzi:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/wenzi.js">Download</a>        <span class="up">wenzi.js</span>        <span class="down">文字特效</span> </div><h4 id="添加页面雪花飘落动效"><a href="#添加页面雪花飘落动效" class="headerlink" title="添加页面雪花飘落动效"></a>添加页面雪花飘落动效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>xuehuapiaoluo.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.xuehuapiaoluo.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/xuehuapiaoluo.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 页面樱花飘落动效xuehuapiaoluo:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/xuehuapiaoluo.js">Download</a>        <span class="up">xuehuapiao.js</span>        <span class="down">雪花特效</span> </div><h4 id="添加博客天气插件"><a href="#添加博客天气插件" class="headerlink" title="添加博客天气插件"></a>添加博客天气插件</h4><p>在搜寻插件的过程中无意间用 google 搜到的一个网站，使用非常简单，在这里附上插件添加的方法：<br><strong>中国天气网：</strong><a href="https://cj.weather.com.cn/plugin/pc">https://cj.weather.com.cn/plugin/pc</a><br>选择<strong>自定义插件</strong>—&gt;<strong>自定义样式</strong>——&gt;<strong>生成代码</strong>，然后会生成这样一段代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Weather Widget --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'your FID'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/float/static/js/r.js?v<span class="token punctuation">=</span>1111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在<code>/themes/matery/source/layout/_widget</code>新建文件<code>weather.ejs</code>，把上面生成的代码添加进入,可以设置只有桌面端显示,如下修改:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 天气接口  洪卫 shw2018 add 2019.09.09 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1tFpFZ5Mtj'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;script type="text/javascript" src="https://apip.weatherdt.com/float/static/js/r.js?v=1111">&lt;/script> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>  <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="https://apip.weatherdt.com/float/static/js/r.js?v=1111">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后在<code>/themes/matery/layout/_partial/layout.ejs</code>中添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 天气接口控件  洪卫 shw2018 add <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">09</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>weather<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/weather'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 天气接口插件weather:  enable: true</code></pre><p>展示效果可以参考我的主页<br>当然,如果你不想搞这么复杂,可以直接将下面代码插入<code>/themes/matery/layout/_partial/layout.ejs</code>中即可使用:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1tFpFZ5Mtj'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/float/static/js/r.js?v<span class="token punctuation">=</span>1111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="修复-Valine-头像不显示问题"><a href="#修复-Valine-头像不显示问题" class="headerlink" title="修复 Valine 头像不显示问题"></a>修复 Valine 头像不显示问题</h4><p>关于头像显示问题，先去注册<code>Gravatar</code>，之前看文档说是七天的同步时间，结果一直也没有显示头像，检查查看头像链接，发现把<code>&amp;v=1.3.x</code>去掉就可以了，于是下载<code>js</code>文件<code>valine</code>，下载后然后编辑，搜索关键字<code>&amp;v=</code>，找到<code>g.params=”?d=”+i.indexOf(a&gt;-1?a:”mp”)+”&amp;v=”+o+d</code>，将<code>"&amp;v="+o+d</code>删除即可，然后在<code>Gravatar</code>拿到头像的<code>url</code>填上去就行了：</p><pre class=" language-yml"><code class="language-yml">valine:  enable: true  appId:  appKey:  notify: true  verify: true  visitor: true  # avatar: 'mp' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  avatar: https://s.gravatar.com/avatar/0007991f99268c04f1aa4cdd9bea93b4?s=80  pageSize: 10  placeholder: '没有Github账号的在这里留言评论～' # Comment Box placeholder</code></pre><p>原因就是链接后跟了个<code>&amp;v=1.3.x</code>，解决就是将这段删掉就可以了，具体到<code>Valine.mini.js</code>文件就是删掉<code>&amp;v="+o+d</code>即可。</p><h4 id="增加二级菜单"><a href="#增加二级菜单" class="headerlink" title="增加二级菜单"></a>增加二级菜单</h4><p>都知道，我们标题栏宽度有限，我们项目一多了，就放不下了，这时候你肯定就需要一个二级菜单来拆分一下项目，既可以减少标题栏项目数，使之更加清爽，又可以间项目分类，逻辑清晰。<br>好了，如果你用的<code>matery</code>主题，那么废话不多说，直接上教程，其实需要修改的就四个地方：<code>matery.css/matery.js/navgation.ejs/mobile-nav.ejs</code></p><h5 id="先找文件夹"><a href="#先找文件夹" class="headerlink" title="先找文件夹"></a>先找文件夹</h5><p>首先在<code>/themes/matery/layout/_partial</code>中找到<code>mobile-nav.ejs</code>，找到下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成下面的：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性 洪卫 shw2018 modify <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">17</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-nav-item"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>                      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"left: 25px; position: absolute;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                       <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                       <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h5 id="修改第二处"><a href="#修改第二处" class="headerlink" title="修改第二处"></a>修改第二处</h5><p>在<code>/themes/matery/layout/_partial</code>中找到<code>navagtion.ejs</code>，找到下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成下面的：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性 洪卫 shw2018 modify <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">17</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right nav-menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down nav-item"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-down"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sub-nav menus_item_child "</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                      <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"margin-top: -20px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h5 id="该第三处"><a href="#该第三处" class="headerlink" title="该第三处"></a>该第三处</h5><p>在<code>/themes/matery/source/css</code>中找到<code>matery.css</code>，在最后添加下面这段代码：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 二级菜单样式定义 洪卫 shw2018 add 2019.09.17 */</span><span class="token selector"><span class="token class">.nav-menu</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">77</span>px<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li a </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">138</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-show</span> i<span class="token attribute">[aria-hidden=true]</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* position: relative; */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">245</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span>>a<span class="token pseudo-element">:before</span>,<span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">65</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-item</span> li<span class="token pseudo-class">:hover</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="改第四处"><a href="#改第四处" class="headerlink" title="改第四处"></a>改第四处</h5><p>在<code>/themes/matery/source/js</code>中找到<code>matery.js</code>，在最后一个<code>});</code>前添加下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 增加二级菜单功能 洪卫 shw2018 add 2019.09.17</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav-menu>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.nav-item.nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item>a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item.m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>在<code>主题配置文件.yml</code>修改标题栏内容，按下面格式更改:</p><pre class=" language-yml"><code class="language-yml">  标题一级:    url: /XXX    icon: fa-XXXX    children:      -        name: 标题二级1        url: /XXX/XXX        icon: fa-XXXX      -        name: 标题二级2        url: /XXX/XXX        icon: fa-XXXX</code></pre><h5 id="建立存放目录"><a href="#建立存放目录" class="headerlink" title="建立存放目录"></a>建立存放目录</h5><p>在<code>source</code>文件夹新建对应的标题目录，并放<code>index.md</code>模板就行了。到这一步就大功告成了，快去体验吧。</p><div class="Donw_socold">        <a id="id" download="filename" href="https://baidu.com">点我下载</a>        <span class="up">下提示矿框</span>        <span class="down">上提示框</span>        </div><h2 id="第三部分-优化"><a href="#第三部分-优化" class="headerlink" title="第三部分 优化"></a>第三部分 优化</h2><p>hexo添加各种优化功能，比如SEO优化等。</p><h3 id="网站SEO优化"><a href="#网站SEO优化" class="headerlink" title="网站SEO优化"></a>网站SEO优化</h3><p>网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好。</p><blockquote><p><strong>SEO</strong>是由英文<code>Search Engine Optimization</code>缩写而来， 中文意译为“<strong>搜索引擎优化</strong>”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><h4 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h4><p>首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src="22.png" alt="查看是否被搜索引擎收录" title="查看是否被搜索引擎收录"></p><h5 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h5><p>登录百度站长搜索资源平台：<code>http://zhanzhang.baidu.com</code>，只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击<a href="http://zhanzhang.baidu.com/site/siteadd">添加网站</a>然后输入你的站点地址。</p><blockquote><p>注意，这里需要输入我们自己购买的域名,不能使用<code>xxx.github.io</code>之类的二级域名.因为github是不允许百度的<code>spider</code>（蜘蛛）爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名。<br><img src="23.png" alt="向百度站长提交自己的网站" title="向百度站长提交自己的网站"><br>在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：</p></blockquote><ul><li>文件验证。</li><li>html标签验证</li><li><strong>CNAME解析验证</strong>（推荐使用）</li></ul><p><img src="24.png" alt="验证网站所有权" title="验证网站所有权"><br>其实使用哪一种方式都可以，都是比较简单的。</p><blockquote><p>但是一定要注意，使用文件验证文件存放的位置需要放在<code>sourc</code>文件夹下，如果是<code>html</code>文件那么hexo就会将其编译，所以必须要在<code>html</code>头部加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是<code>txt</code>格式的就不需要）<br>其他两种方式也是很简单的，个人<code>推荐文件验证</code>和<code>CNAME验证</code>，<code>CNAME验证</code>最为简单，只需加一条解析就好~<br><img src="25.png" alt="添加解析记录" title="添加解析记录"><br><img src="26.png" alt="验证通过" title="验证通过"></p></blockquote><h5 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h5><p>我们需要使用npm自动生成网站的<code>sitemap</code>，然后将生成的<code>sitemap</code>提交到百度和其他搜索引擎</p><h6 id="安装sitemap插件"><a href="#安装sitemap插件" class="headerlink" title="安装sitemap插件"></a>安装sitemap插件</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save</code></pre><h6 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h6><p>在<code>根目录配置文件.yml</code>中修改<code>url</code>为你的站点地址</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'# url: https://lingzhifeng.github.io/url: https://socold.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><p>执行完<code>hexo g</code>命令之后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml</code>文件，可以通过：<code>https://socold.com/baidusitemap.xml</code>, 查看该文件是否生成，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p><h5 id="向百度提交链接"><a href="#向百度提交链接" class="headerlink" title="向百度提交链接"></a>向百度提交链接</h5><p>然后我们就可以将我们生成的<code>sitemap</code>文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和<code>sitemap</code></p><blockquote><p>如何选择链接提交方式</p><ul><li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap</code>中，然后将<code>sitemap</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li><li>手动提交：一次性提交链接给百度，可以使用此种方式。</li></ul></blockquote><p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法。<strong>从效率上来说：</strong><br><strong>主动推送</strong>&gt;<strong>自动推送</strong>&gt;<strong>sitemap</strong><br><img src="27.png" alt="链接提交" title="链接提交"></p><h6 id="设置主动推送"><a href="#设置主动推送" class="headerlink" title="设置主动推送"></a>设置主动推送</h6><p>安装插件<code>hexo-baidu-url-submit</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save</code></pre><p>然后再根目录的配置文件中新增字段</p><pre class=" language-yml"><code class="language-yml">baidu_url_submit:  count: 80             # 提交最新的一个链接  host: socold.com # 在百度站长平台中注册的域名  token: xxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt  # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>再加入新的<code>deploy</code>：</p><pre class=" language-bash"><code class="language-bash">deploy:- type: baidu_url_submitter</code></pre><p>如图所示：<br><img src="28.png" alt="配置主动推送插件" title="配置主动推送插件"></p><blockquote><p>注意,这里多个<code>type</code>的写法应该这么写<code>- type</code>,前面那个<code>type</code>是我推送到<code>Github</code>与<code>Coding</code>的page页面的配置,后面再讲这个。</p></blockquote><p>密钥的获取位置在网页抓取中的链接提交这一块,如下所示:<br><img src="29.png" alt="获取token" title="获取token"><br>这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了。推送成功时,会有如下终端提示：<br><img src="30.png" alt="主动推送成功" title="主动推送成功"><br>各种不同的推送反馈字段说明在这里查看,一般来说,推送失败基本都是地址不相符造成的,我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h6 id="设置自动推送"><a href="#设置自动推送" class="headerlink" title="设置自动推送"></a>设置自动推送</h6><p>在主题配置文件下设置,将<code>baidu_push</code>设置为<code>true</code>:</p><pre class=" language-yml"><code class="language-yml"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true</code></pre><p>然后主题文件目录加入下面代码，一般在目录<code>/themes/matery/layout/_partial</code>中的<code>head.ejs</code>中加入下面JS代码（有可能你的目录不是这样，原理类似），这样全站都有了：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>baidu_push<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>这样每次访问博客中的页面就会自动向百度提交<code>sitemap</code></p><h6 id="sitemap方式"><a href="#sitemap方式" class="headerlink" title="sitemap方式"></a>sitemap方式</h6><p>将我们上一步生成的<code>sitemap</code>文件提交到百度就可以了~<br><img src="31.png" alt="将sitemap提交到百度" title="将sitemap提交到百度"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果。在百度搜索<code>site:sunhwee.com</code>已经可以搜索到结果<br><img src="32.png" alt="站点已被百度收录" title="站点已被百度收录"></p><h4 id="让google收录你的站点"><a href="#让google收录你的站点" class="headerlink" title="让google收录你的站点"></a>让google收录你的站点</h4><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的。<a href="https://www.google.com/webmasters/">google站点平台：</a><br><a href="https://www.google.com/webmasters/">https://www.google.com/webmasters/</a></p><ul><li>注册账号</li><li>验证站点</li><li>提交sitemap</li></ul><blockquote><p>向<code>google</code>添加<code>sitemap</code>后: 进入<code>Google Search Console</code>-<code>抓取</code>-<code>站点地图</code>,点击<code>「添加/测试站点地图」</code>,输入你的博客网址. 若无报错则站点地图提交成功</p></blockquote><p><img src="35.png" alt="sitemap提交成功" title="sitemap提交成功"><br>一步一步来就好，过不了过久就可以被google收录了<br><img src="36.png" alt="站点已被google收录" title="站点已被google收录"><br><img src="37.png" alt="站点已被google收录" title="站点已被google收录"><br><img src="38.png" alt="站点已被google收录" title="站点已被google收录"></p><h6 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt:"></a>提交 robots.txt:</h6><p><code>robots.txt</code>是一种存放于网站根目录下的<code>ASCII</code>编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<code>robots.txt</code>放在博客目录下的<code>source</code>文件夹中，博客生成后在站点目录<code>/public/</code>下。我的<code>robots.txt</code>文件内容如下：</p><pre class=" language-yml"><code class="language-yml">User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /about/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/</code></pre><p><code>robots.txt</code>文件更新至网站后可进入<strong>Google Search Console</strong>-<strong>抓取</strong>-<strong>robots.txt</strong>测试工具进行测试。这里部分参考自Hexo博客搜索<a href="https://fedoryx.github.io/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2-SEO-%E4%BC%98%E5%8C%96-%E8%B0%B7%E6%AD%8C%E7%AF%87/">SEO优化-谷歌篇</a></p><h4 id="让其他搜索引擎收录你的站点"><a href="#让其他搜索引擎收录你的站点" class="headerlink" title="让其他搜索引擎收录你的站点"></a>让其他搜索引擎收录你的站点</h4><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的，大家就自行选择添加哈，这里就不再赘述了~</p><h4 id="优化你的url"><a href="#优化你的url" class="headerlink" title="优化你的url"></a>优化你的url</h4><p>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：<code>sitename/year/mounth/day/title</code>四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章url</p><h5 id="改成英文标题"><a href="#改成英文标题" class="headerlink" title="改成英文标题"></a>改成英文标题</h5><p>我们可以将url直接改成<code>sitename/title</code>的形式，并且<code>title</code>最好是用英文，在根目录的配置文件下修改<code>permalink</code>如下：</p><pre class=" language-yml"><code class="language-yml">url: https://socold.com root: /permalink: :title.htmlpermalink_defaults:</code></pre><h5 id="安装插件用中文拼音标题"><a href="#安装插件用中文拼音标题" class="headerlink" title="安装插件用中文拼音标题"></a>安装插件用中文拼音标题</h5><p>插件<code>hexo-abbrlink</code>实现了这个功能，它将原来的URL地址重新进行了进制转换和再编码。执行一下命令以安装<code>hexo-abbrlink</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>配置博客<code>根目录下的_config.yml</code>文件。</p><pre class=" language-yml"><code class="language-yml"># permalink: :title/permalink: archives/:abbrlink.htmlabbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: hex    # 进制：dec(default) and hex</code></pre><p>运行<code>hexo clean</code>和<code>hexo g</code>命令来重新生成文件看看，可以清楚的看到，URL结构成功变为了3层。</p><h4 id="其他seo优化"><a href="#其他seo优化" class="headerlink" title="其他seo优化"></a>其他seo优化</h4><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上<code>keyword</code>和<strong>描述</strong>。<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置<code>nofollow</code>标签，避免<code>spider</code>爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为<code>spider</code>会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样<code>spider</code>是很有可能爬到我们中的站点的，so….</p><ul><li>网站外链的推广度、数量和质量</li><li>网站的内链足够强大</li><li>网站的原创质量</li><li>网站的年龄时间</li><li>网站的更新频率（更新次数越多越好）</li><li>网站的服务器</li><li>网站的流量：流量越高网站的权重越高</li><li>网站的关键词排名：关键词排名越靠前，网站的权重越高</li><li>网站的收录数量：网站百度收录数量越多，网站百度权重越高</li><li>网站的浏览量及深度：用户体验越好，网站的百度权重越高</li></ul><h3 id="优化代码块样式"><a href="#优化代码块样式" class="headerlink" title="优化代码块样式"></a>优化代码块样式</h3><p>由于代码高亮插件<code>prism_plugin</code>的样式没有行号显示和代码块整体复制功能，不是很方便，为了优化观感和易用性，我们可以对其进行修改：</p><h4 id="给代码块开启行号"><a href="#给代码块开启行号" class="headerlink" title="给代码块开启行号"></a>给代码块开启行号</h4><p>我们在<code>配置文件.yml</code>中找到<code>prism_plugin</code>配置项<code>line_number: false（# default false）</code>改为<code>true</code>，开启行号，但是在我们这个<code>matery</code>主题中中是无效的，有bug需要改一下<code>matery.css</code>样式参数,在第95行位置将：</p><pre class=" language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>改为：</p><pre class=" language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">3.3</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注释掉紧接着的<code>code</code>代码块里面的<code>font-size</code>项，如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">code </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata, Monaco, Consolas, <span class="token string">'Courier New'</span>, Courier, monospace<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*font-size: 0.91rem;*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e96900</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f8f8f8</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>好了这下可以显示行号了，如图：<br><img src="39.png" alt="显示行号" title="显示行号"></p><h4 id="添加代码块复制功能"><a href="#添加代码块复制功能" class="headerlink" title="添加代码块复制功能"></a>添加代码块复制功能</h4><h3 id="优化网站加载速度"><a href="#优化网站加载速度" class="headerlink" title="优化网站加载速度"></a>优化网站加载速度</h3><h4 id="优化图片加载"><a href="#优化图片加载" class="headerlink" title="优化图片加载"></a>优化图片加载</h4><p><code>issue</code>问题：优化网站加载逻辑问题：图片最后加载，加入图片懒加载方法。</p><p><code>hexo-lazyload-image</code>的作用原理是讲你博客里面<code>img标签</code>的<code>src属性</code>替换为一个<code>loading image</code>，把真实的图片地址放在<code>data-origin</code>属性下面。然后当你的网页翻到那张图片时（也就是图片在窗口中完全可见时），他会有一段js用<code>data-origin</code>的内容替换src，达到懒加载的目的。</p><p>一般情况下懒加载和<code>gallery</code>插件会发生冲突，比如按照我上面所说，最终结果就会变成，可能只有第一张图片在<code>gallery</code>中打开是原图，右翻左翻都会是那张<code>loading image</code>，需要你掌握js，可以修改<code>matery.js</code>里面的内容，甚至可能换一个<code>gallery</code>，比如<code>photosiwpe</code>之类的。</p><p>解决方法：修改<code>/themes/matery/source/js中的matery.js</code>文件</p><p>第103行：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#articleContent, #myGallery'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightGallery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    selector<span class="token punctuation">:</span> <span class="token string">'.img-item'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启用字幕</span>    subHtmlSelectorRelative<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    showThumbByDefault<span class="token punctuation">:</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">//这句加上</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>后面加上：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再装个插件<code>https://github.com/Troy-Yang/hexo-lazyload-image</code>。在博客<code>根目录配置.yml</code>文件加入对应字段，如下：</p><pre class=" language-yml"><code class="language-yml"># lazyload configuration  2019.08.23lazyload:  enable: true  onlypost: false  loadingImg:     # eg ./images/loading.gif</code></pre><p>好了，这样实现了博客网站的图片懒加载。</p><h4 id="Gulp实现代码压缩"><a href="#Gulp实现代码压缩" class="headerlink" title="Gulp实现代码压缩"></a>Gulp实现代码压缩</h4><p>Gulp实现代码压缩，以提升网页加载速度。</p><h5 id="安装Gulp插件和5个功能模块"><a href="#安装Gulp插件和5个功能模块" class="headerlink" title="安装Gulp插件和5个功能模块"></a>安装Gulp插件和5个功能模块</h5><p>首先我们需要安装Gulp插件和5个功能模块，依次运行下面的两条命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp --save  <span class="token comment" spellcheck="true">#安装gulp</span><span class="token comment" spellcheck="true"># 安装功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save</code></pre><h5 id="建立js文件"><a href="#建立js文件" class="headerlink" title="建立js文件"></a>建立js文件</h5><p>接下来在博客的<code>根目录</code>下新建<code>gulpfile.js</code>文件，并复制下面的内容到文件中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo      <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        watch<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo    <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo      <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        watch<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>    compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>    <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>    <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span>      <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>    unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token punctuation">{</span>    collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>    collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值  &lt;input checked="true"/> ==> &lt;input /></span>    removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值    &lt;input id="" /> ==> &lt;input /></span>    removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>    removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>    removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>    minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>    minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>    minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/uploads 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number  默认：3  取值范围：0-7（优化等级）</span>    progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>    interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>    multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>  <span class="token string">"build"</span><span class="token punctuation">,</span>  gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    <span class="token string">"clean"</span><span class="token punctuation">,</span>    <span class="token string">"generate"</span><span class="token punctuation">,</span>    <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>    <span class="token string">"compressCss"</span><span class="token punctuation">,</span>    <span class="token string">"compressJs"</span><span class="token punctuation">,</span>    <span class="token string">"compressImage"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>  <span class="token string">"default"</span><span class="token punctuation">,</span>  gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    <span class="token string">"clean"</span><span class="token punctuation">,</span>    <span class="token string">"generate"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></code></pre><h5 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h5><p>最后<code>hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</code>就可以了。</p><p>注意，很可能你会运行到第三步，也就是运行<code>gulp</code>压缩命令时会报错，如图所示：<br><img src="42.png" alt="Gulp运行错误" title="Gulp运行错误"><br>那是因为<code>gulp</code>安装的本地版本和<code>hexo</code>自带的<code>版本不对应</code>导致，第三步gulp压缩可以用下面命令强制使用本地版本：</p><pre class=" language-bash"><code class="language-bash">node ./node_modules/gulp/bin/gulp.js</code></pre><h4 id="Github-Coding-Pages-双部署"><a href="#Github-Coding-Pages-双部署" class="headerlink" title="Github &amp; Coding Pages 双部署"></a>Github &amp; Coding Pages 双部署</h4><p><code>thub &amp; Coding Pages</code>双部署,对国内,国外用户进行分流访问,以提升网站的访问速度.<code>Github Pages</code>的部署前面已经说了,这里就讲一讲<code>Coding Pages</code>如何部署。其实与<code>Github Pages</code>也类似,先到<code>coding</code>官网注册,创建一个与用户名同名的仓库,添加仓库地址到配置文件中,在<code>根目录_config.yml</code>对应地方添加如下:</p><pre class=" language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git  repo:    github: https://github.com/shw2018/shw2018.github.io.git  # github 仓库地址    coding: https://git.dev.tencent.com/sunhwee/sunhwee.git   # coding 仓库地址  branch: master- type: baidu_url_submitter</code></pre><p>把本地生成<code>SSH公匙</code>添加到<code>Coding</code>这一步看我前面的教程,原理类似.然后<code>hexo clean &amp;&amp;　hexo g &amp;&amp; hexo d</code>部署上去就是了．当然，部署上去后，你需要开启'page`服务.</p><p>你可以在<code>pages</code>设置里面自定义域名，区域名解析控制台，添加两条<code>CNAME</code>记录，将域名指向<code>RepoName.coding.me</code>就可以的，申请<code>ssl</code>证书，强制开启https</p><h5 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题:"></a>可能遇到的问题:</h5><p><strong>coding pages申请ssl证书总是提示：错误</strong></p><p>这里提一句，如果你是<code>github pages</code>和<code>coding pages</code>双部署，用同一个域名的话，可以将<code>xxx.github.io</code>解析成 境外,<code>xxx.coding.me</code>解析成默认,这个时候如果你之前就申请过<code>ssl</code>证书的话，再在<code>coding</code>里面申请<code>ssl证书</code>会一直提示失败,解决办法：</p><blockquote><p>先去域名解析控制台，将境外解析的两条<code>CNAME</code>记录 暂停,过个五六分钟，回到<code>coding</code>点击申请ssl,很快就会提示，申请成功！刚好我过程中遇到了这个问题，所以把它记下来，方便后面的小伙伴看到．</p></blockquote><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><h3 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h3><p>有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在<code>github</code>博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在<code>博客根目录</code>下。</p><p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m "xxx"</code>，最后<code>git push origin hexo</code>提交就行了。具体效果可以看我的博客源文件仓库：传送门。</p><p>大家也可以先用下文hexo安装方法安装完hexo，然后直接<code>git clone -b hexo https://github.com/shw2018/shw2018.github.io.git</code>克隆我的所有源文件，这是我目前修改完的基本没bug的定制化的博客，可以直接拿来用。</p><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> blog </tag>
            
            <tag> 免费博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gocui中文文档</title>
      <link href="/golang/gocui-zhong-wen-wen-dang/"/>
      <url>/golang/gocui-zhong-wen-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="package-gocui"><a href="#package-gocui" class="headerlink" title="package gocui"></a>package gocui</h2><p><code>import "github.com/jroimartin/gocui"</code><br>软件包gocui允许创建控制台用户界面。<br>创建一个新的GUI：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">,</span> err <span class="token operator">:=</span> gocui<span class="token punctuation">.</span><span class="token function">NewGui</span><span class="token punctuation">(</span>gocui<span class="token punctuation">.</span>OutputNormal<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> g<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置GUI管理器和键绑定 </span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">MainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> gocui<span class="token punctuation">.</span>ErrQuit <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>        <span class="token punctuation">}</span></code></pre><p>设置GUI管理器：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span><span class="token function">SetManager</span><span class="token punctuation">(</span>mgr1<span class="token punctuation">,</span> mgr2<span class="token punctuation">)</span></code></pre><p>管理人员负责GUI的布局，并可用于构建小部件。 在GUI主循环的每次迭代中，将执行每个已配置管理器的Layout功能。 管理器用于设置和更新应用程序的主视图，可以在执行期间自由更改它们。 另外，重要的是要提到对每个报告的事件（按键，鼠标事件，窗口大小调整等）执行主循环迭代。</p><p> GUI由视图组成，您可以将其视为缓冲区。 视图实现了io.ReadWriter接口，因此，如果您要修改它们的内容，则可以只写它们。 读取同样有效。</p><p> 使用绝对坐标创建和初始化视图：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetView</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> gocui<span class="token punctuation">.</span>ErrUnknownView <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"This is a new view"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>也可以使用相对坐标创建视图：</p><pre class=" language-go"><code class="language-go">maxX<span class="token punctuation">,</span> maxY <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetView</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> maxX<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> maxY<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> maxX<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> maxY<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>配置按键绑定：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetKeybinding</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>KeyEnter<span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>ModNone<span class="token punctuation">,</span> fcn<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span></code></pre><p>gocui实现了对鼠标的完全支持，可以通过以下方式启用它：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span>Mouse <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>鼠标事件的处理方式与其他任何键绑定一样：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetKeybinding</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>MouseLeft<span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>ModNone<span class="token punctuation">,</span> fcn<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span></code></pre><p>重要信息：只能以三种方式创建，销毁或更新视图：从管理器中的Layout函数，从键绑定回调或通过<code>* Gui.Update（）</code>。 原因是它允许gocui是并发安全的。 因此，如果要从goroutine更新GUI，则必须使用<code>* Gui.Update（）</code>。 例如：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>g <span class="token operator">*</span>gocui<span class="token punctuation">.</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    v<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"Writing from different goroutines"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>默认情况下，gocui提供基本的编辑模式。 可以扩展和定制此模式，以创建新的编辑器并将其分配给<code>* View.Editor</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> DefaultEditor Editor <span class="token operator">=</span> <span class="token function">EditorFunc</span><span class="token punctuation">(</span>simpleEditor<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">simpleEditor</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ch <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mod <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditWrite</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">case</span> key <span class="token operator">==</span> KeySpace<span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditWrite</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> key <span class="token operator">==</span> KeyBackspace <span class="token operator">||</span> key <span class="token operator">==</span> KeyBackspace2<span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditDelete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>彩色文字：<br>视图允许使用ANSI颜色添加彩色文本。 例如：</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"\x1b[0;31mHello world"</span><span class="token punctuation">)</span></code></pre><p>有关更多信息，请参见文件夹<code>_examples /</code>中的示例。</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><h4 id="Constants-常数"><a href="#Constants-常数" class="headerlink" title="Constants(常数)"></a>Constants(常数)</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    ColorDefault Attribute <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorDefault<span class="token punctuation">)</span>    ColorBlack             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorBlack<span class="token punctuation">)</span>    ColorRed               <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorRed<span class="token punctuation">)</span>    ColorGreen             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorGreen<span class="token punctuation">)</span>    ColorYellow            <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorYellow<span class="token punctuation">)</span>    ColorBlue              <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorBlue<span class="token punctuation">)</span>    ColorMagenta           <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorMagenta<span class="token punctuation">)</span>    ColorCyan              <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorCyan<span class="token punctuation">)</span>    ColorWhite             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorWhite<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>颜色属性：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    AttrBold      Attribute <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrBold<span class="token punctuation">)</span>    AttrUnderline           <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrUnderline<span class="token punctuation">)</span>    AttrReverse             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrReverse<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>文字样式属性：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// OutputNormal提供8色终端模式。</span>    OutputNormal <span class="token operator">=</span> <span class="token function">OutputMode</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>OutputNormal<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Output256提供256色终端模式。</span>    Output256 <span class="token operator">=</span> <span class="token function">OutputMode</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>Output256<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>特殊键：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    KeyF1         Key <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF1<span class="token punctuation">)</span>    KeyF2             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF2<span class="token punctuation">)</span>    KeyF3             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF3<span class="token punctuation">)</span>    KeyF4             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF4<span class="token punctuation">)</span>    KeyF5             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF5<span class="token punctuation">)</span>    KeyF6             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF6<span class="token punctuation">)</span>    KeyF7             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF7<span class="token punctuation">)</span>    KeyF8             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF8<span class="token punctuation">)</span>    KeyF9             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF9<span class="token punctuation">)</span>    KeyF10            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF10<span class="token punctuation">)</span>    KeyF11            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF11<span class="token punctuation">)</span>    KeyF12            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF12<span class="token punctuation">)</span>    KeyInsert         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyInsert<span class="token punctuation">)</span>    KeyDelete         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyDelete<span class="token punctuation">)</span>    KeyHome           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyHome<span class="token punctuation">)</span>    KeyEnd            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEnd<span class="token punctuation">)</span>    KeyPgup           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyPgup<span class="token punctuation">)</span>    KeyPgdn           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyPgdn<span class="token punctuation">)</span>    KeyArrowUp        <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowUp<span class="token punctuation">)</span>    KeyArrowDown      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowDown<span class="token punctuation">)</span>    KeyArrowLeft      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowLeft<span class="token punctuation">)</span>    KeyArrowRight     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowRight<span class="token punctuation">)</span>    MouseLeft      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseLeft<span class="token punctuation">)</span>    MouseMiddle    <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseMiddle<span class="token punctuation">)</span>    MouseRight     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseRight<span class="token punctuation">)</span>    MouseRelease   <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseRelease<span class="token punctuation">)</span>    MouseWheelUp   <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseWheelUp<span class="token punctuation">)</span>    MouseWheelDown <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseWheelDown<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>按键组合</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    KeyCtrlTilde      Key <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlTilde<span class="token punctuation">)</span>    KeyCtrl2              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl2<span class="token punctuation">)</span>    KeyCtrlSpace          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlSpace<span class="token punctuation">)</span>    KeyCtrlA              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlA<span class="token punctuation">)</span>    KeyCtrlB              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlB<span class="token punctuation">)</span>    KeyCtrlC              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlC<span class="token punctuation">)</span>    KeyCtrlD              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlD<span class="token punctuation">)</span>    KeyCtrlE              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlE<span class="token punctuation">)</span>    KeyCtrlF              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlF<span class="token punctuation">)</span>    KeyCtrlG              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlG<span class="token punctuation">)</span>    KeyBackspace          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyBackspace<span class="token punctuation">)</span>    KeyCtrlH              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlH<span class="token punctuation">)</span>    KeyTab                <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyTab<span class="token punctuation">)</span>    KeyCtrlI              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlI<span class="token punctuation">)</span>    KeyCtrlJ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlJ<span class="token punctuation">)</span>    KeyCtrlK              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlK<span class="token punctuation">)</span>    KeyCtrlL              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlL<span class="token punctuation">)</span>    KeyEnter              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEnter<span class="token punctuation">)</span>    KeyCtrlM              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlM<span class="token punctuation">)</span>    KeyCtrlN              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlN<span class="token punctuation">)</span>    KeyCtrlO              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlO<span class="token punctuation">)</span>    KeyCtrlP              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlP<span class="token punctuation">)</span>    KeyCtrlQ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlQ<span class="token punctuation">)</span>    KeyCtrlR              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlR<span class="token punctuation">)</span>    KeyCtrlS              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlS<span class="token punctuation">)</span>    KeyCtrlT              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlT<span class="token punctuation">)</span>    KeyCtrlU              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlU<span class="token punctuation">)</span>    KeyCtrlV              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlV<span class="token punctuation">)</span>    KeyCtrlW              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlW<span class="token punctuation">)</span>    KeyCtrlX              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlX<span class="token punctuation">)</span>    KeyCtrlY              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlY<span class="token punctuation">)</span>    KeyCtrlZ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlZ<span class="token punctuation">)</span>    KeyEsc                <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEsc<span class="token punctuation">)</span>    KeyCtrlLsqBracket     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlLsqBracket<span class="token punctuation">)</span>    KeyCtrl3              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl3<span class="token punctuation">)</span>    KeyCtrl4              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl4<span class="token punctuation">)</span>    KeyCtrlBackslash      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlBackslash<span class="token punctuation">)</span>    KeyCtrl5              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl5<span class="token punctuation">)</span>    KeyCtrlRsqBracket     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlRsqBracket<span class="token punctuation">)</span>    KeyCtrl6              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl6<span class="token punctuation">)</span>    KeyCtrl7              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl7<span class="token punctuation">)</span>    KeyCtrlSlash          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlSlash<span class="token punctuation">)</span>    KeyCtrlUnderscore     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlUnderscore<span class="token punctuation">)</span>    KeySpace              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeySpace<span class="token punctuation">)</span>    KeyBackspace2         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyBackspace2<span class="token punctuation">)</span>    KeyCtrl8              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl8<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Variables（变量）"><a href="#Variables（变量）" class="headerlink" title="Variables（变量）"></a>Variables（变量）</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// ErrQuit用于确定MainLoop是否成功完成。</span>    ErrQuit <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ErrUnknownView允许断言是否初始化了View。</span>    ErrUnknownView <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown view"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="type-Attribute（类型属性）"><a href="#type-Attribute（类型属性）" class="headerlink" title="type Attribute（类型属性）"></a>type Attribute（类型属性）</h4><p>属性表示终端属性，例如颜色，字体样式等。可以使用按位或（|）进行组合。 请注意，不可能组合多个颜色属性。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Attribute termbox<span class="token punctuation">.</span>Attribute</code></pre><h4 id="type-Editor-类型编辑器）"><a href="#type-Editor-类型编辑器）" class="headerlink" title="type Editor(类型编辑器）"></a>type Editor(类型编辑器）</h4><p>gocui编辑器必须满足编辑器界面。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Editor <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Edit</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>DefaultEditor是默认编辑器。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> DefaultEditor Editor <span class="token operator">=</span> <span class="token function">EditorFunc</span><span class="token punctuation">(</span>simpleEditor<span class="token punctuation">)</span></code></pre><h4 id="type-EditorFunc-类型EditorFunc"><a href="#type-EditorFunc-类型EditorFunc" class="headerlink" title="type EditorFunc (类型EditorFunc)"></a>type EditorFunc (类型EditorFunc)</h4><p>EditorFunc类型是一个适配器，允许将普通功能用作编辑器。 如果f是具有适当签名的函数，则EditorFunc（f）是调用f的Editor对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> EditorFunc <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span></code></pre><h5 id="func-f-EditorFunc-Edit-v-42-View-key-Key-ch-rune-mod-Modifier"><a href="#func-f-EditorFunc-Edit-v-42-View-key-Key-ch-rune-mod-Modifier" class="headerlink" title="func (f EditorFunc) Edit(v *View, key Key, ch rune, mod Modifier)"></a>func (f EditorFunc) Edit(v *View, key Key, ch rune, mod Modifier)</h5><p>编辑通话</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f EditorFunc<span class="token punctuation">)</span> <span class="token function">Edit</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span></code></pre><h4 id="type-Gui"><a href="#type-Gui" class="headerlink" title="type Gui"></a>type Gui</h4><p>Gui代表整个用户界面，包括视图，布局和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Gui <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BgColor和FgColor允许配置GUI的背景和前景色。</span>    BgColor<span class="token punctuation">,</span> FgColor Attribute    <span class="token comment" spellcheck="true">//SelBgColor和SelFgColor允许配置当前视图框架的背景和前景色。</span>    SelBgColor<span class="token punctuation">,</span> SelFgColor Attribute    <span class="token comment" spellcheck="true">// 如果“高光”为true，则将使用Sel {Bg，Fg} Colors绘制当前视图的框架。</span>    Highlight <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Cursor为true，则启用光标。</span>    Cursor <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Mouse为true，则将启用鼠标事件。</span>    Mouse <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果InputEsc为true，则当ESC序列在缓冲区中并且与任何已知序列都不匹配时，ESC表示KeyEsc。</span>    InputEsc <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果ASCII为true，则使用ASCII代替unicode绘制界面。 使用ASCII更可移植。</span>    ASCII <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">//包含已过滤或未导出的字段</span><span class="token punctuation">}</span></code></pre><h5 id="func-NewGui-mode-OutputMode-42-Gui-error"><a href="#func-NewGui-mode-OutputMode-42-Gui-error" class="headerlink" title="func NewGui(mode OutputMode) (*Gui, error)"></a>func NewGui(mode OutputMode) (*Gui, error)</h5><p>NewGui返回具有给定输出模式的新Gui对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewGui</span><span class="token punctuation">(</span>mode OutputMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Close"><a href="#func-g-42-Gui-Close" class="headerlink" title="func (g *Gui) Close()"></a>func (g *Gui) Close()</h5><p>关闭完成库。 在成功初始化之后并且不再需要gocui时应调用它。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-CurrentView-42-View"><a href="#func-g-42-Gui-CurrentView-42-View" class="headerlink" title="func (g *Gui) CurrentView() *View"></a>func (g *Gui) CurrentView() *View</h5><p>CurrentView返回当前焦点视图，如果没有视图拥有焦点，则返回nil。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">CurrentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>View</code></pre><h5 id="func-g-42-Gui-DeleteKeybinding-viewname-string-key-interface-mod-Modifier-error"><a href="#func-g-42-Gui-DeleteKeybinding-viewname-string-key-interface-mod-Modifier-error" class="headerlink" title="func (g *Gui) DeleteKeybinding(viewname string, key interface{}, mod Modifier) error"></a>func (g *Gui) DeleteKeybinding(viewname string, key interface{}, mod Modifier) error</h5><p>func (*Gui) DeleteKeybinding(删除绑定键）<br>DeleteKeybinding删除一个键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteKeybinding</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-DeleteKeybindings-viewname-string"><a href="#func-g-42-Gui-DeleteKeybindings-viewname-string" class="headerlink" title="func (g *Gui) DeleteKeybindings(viewname string)"></a>func (g *Gui) DeleteKeybindings(viewname string)</h5><p>删除键绑定删除视图的所有键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteKeybindings</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-DeleteView-name-string-error"><a href="#func-g-42-Gui-DeleteView-name-string-error" class="headerlink" title="func (g *Gui) DeleteView(name string) error"></a>func (g *Gui) DeleteView(name string) error</h5><p>DeleteView按名称删除视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-MainLoop-error"><a href="#func-g-42-Gui-MainLoop-error" class="headerlink" title="func (g *Gui) MainLoop() error"></a>func (g *Gui) MainLoop() error</h5><p>MainLoop运行主循环，直到返回错误。 成功完成后应返回ErrQuit。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">MainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-Rune-x-y-int-rune-error"><a href="#func-g-42-Gui-Rune-x-y-int-rune-error" class="headerlink" title="func (g *Gui) Rune(x, y int) (rune, error)"></a>func (g *Gui) Rune(x, y int) (rune, error)</h5><p>符文返回给定位置的单元格中包含的符文。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Rune</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">rune</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetCurrentView-name-string-42-View-error"><a href="#func-g-42-Gui-SetCurrentView-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetCurrentView(name string) (*View, error)"></a>func (g *Gui) SetCurrentView(name string) (*View, error)</h5><p>SetCurrentView将焦点赋予给定视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetCurrentView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetKeybinding-viewname-string-key-interface-mod-Modifier-handler-func-42-Gui-42-View-error-error"><a href="#func-g-42-Gui-SetKeybinding-viewname-string-key-interface-mod-Modifier-handler-func-42-Gui-42-View-error-error" class="headerlink" title="func (g *Gui) SetKeybinding(viewname string, key interface{}, mod Modifier, handler func(*Gui, *View) error) error"></a>func (g *Gui) SetKeybinding(viewname string, key interface{}, mod Modifier, handler func(*Gui, *View) error) error</h5><p>SetKeybinding创建一个新的键绑定。 如果viewname等于“”（空字符串），则绑定将应用于所有视图。 密钥必须是符文或密钥。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetKeybinding</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">,</span> <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-SetManager-managers-…Manager"><a href="#func-g-42-Gui-SetManager-managers-…Manager" class="headerlink" title="func (g *Gui) SetManager(managers …Manager)"></a>func (g *Gui) SetManager(managers …Manager)</h5><p>SetManager设置给定的GUI管理器。 它将删除所有视图和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetManager</span><span class="token punctuation">(</span>managers <span class="token operator">...</span>Manager<span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetManagerFunc-manager-func-42-Gui-error"><a href="#func-g-42-Gui-SetManagerFunc-manager-func-42-Gui-error" class="headerlink" title="func (g *Gui) SetManagerFunc(manager func(*Gui) error)"></a>func (g *Gui) SetManagerFunc(manager func(*Gui) error)</h5><p>SetManagerFunc设置给定的管理器功能。 它将删除所有视图和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetManagerFunc</span><span class="token punctuation">(</span>manager <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetRune-x-y-int-ch-rune-fgColor-bgColor-Attribute-error"><a href="#func-g-42-Gui-SetRune-x-y-int-ch-rune-fgColor-bgColor-Attribute-error" class="headerlink" title="func (g *Gui) SetRune(x, y int, ch rune, fgColor, bgColor Attribute) error"></a>func (g *Gui) SetRune(x, y int, ch rune, fgColor, bgColor Attribute) error</h5><p>SetRune在相对于终端左上角的给定点写入一个符文。 它检查该位置是否有效并应用给定的颜色。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetRune</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> fgColor<span class="token punctuation">,</span> bgColor Attribute<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-SetView-name-string-x0-y0-x1-y1-int-42-View-error"><a href="#func-g-42-Gui-SetView-name-string-x0-y0-x1-y1-int-42-View-error" class="headerlink" title="func (g *Gui) SetView(name string, x0, y0, x1, y1 int) (*View, error)"></a>func (g *Gui) SetView(name string, x0, y0, x1, y1 int) (*View, error)</h5><p>SetView创建一个新视图，其左上角为（x0，y0），右下角为（x1，y1）。 如果已经存在相同名称的视图，则其尺寸将更新； 否则，返回错误ErrUnknownView，该错误允许断言View是否必须初始化。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetViewOnBottom-name-string-42-View-error"><a href="#func-g-42-Gui-SetViewOnBottom-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetViewOnBottom(name string) (*View, error)"></a>func (g *Gui) SetViewOnBottom(name string) (*View, error)</h5><p>SetViewOnBottom将给定视图设置在现有视图的底部。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetViewOnBottom</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetViewOnTop-name-string-42-View-error"><a href="#func-g-42-Gui-SetViewOnTop-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetViewOnTop(name string) (*View, error)"></a>func (g *Gui) SetViewOnTop(name string) (*View, error)</h5><p>SetViewOnTop将给定视图设置在现有视图之上。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetViewOnTop</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Size-x-y-int"><a href="#func-g-42-Gui-Size-x-y-int" class="headerlink" title="func (g *Gui) Size() (x, y int)"></a>func (g *Gui) Size() (x, y int)</h5><p>Size返回终端的大小。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Update-f-func-42-Gui-error"><a href="#func-g-42-Gui-Update-f-func-42-Gui-error" class="headerlink" title="func (g *Gui) Update(f func(*Gui) error)"></a>func (g *Gui) Update(f func(*Gui) error)</h5><p>Update执行传递的函数。 可以从goroutine安全地调用此方法以更新GUI。 重要的是要注意，传递的函数不会立即执行，而是会添加到用户事件队列中。 鉴于Update产生了一个goroutine，因此不能保证处理用户事件的顺序。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-View-name-string-42-View-error"><a href="#func-g-42-Gui-View-name-string-42-View-error" class="headerlink" title="func (g *Gui) View(name string) (*View, error)"></a>func (g *Gui) View(name string) (*View, error)</h5><p>视图返回指向给定名称的视图的指针，如果不存在具有该名称的视图，则返回错误ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">View</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-ViewByPosition-x-y-int-42-View-error"><a href="#func-g-42-Gui-ViewByPosition-x-y-int-42-View-error" class="headerlink" title="func (g *Gui) ViewByPosition(x, y int) (*View, error)"></a>func (g *Gui) ViewByPosition(x, y int) (*View, error)</h5><p>ViewByPosition返回指向与给定位置匹配的视图的指针，如果该位置的视图不存在，则返回错误ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">ViewByPosition</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-ViewPosition-name-string-x0-y0-x1-y1-int-err-error"><a href="#func-g-42-Gui-ViewPosition-name-string-x0-y0-x1-y1-int-err-error" class="headerlink" title="func (g *Gui) ViewPosition(name string) (x0, y0, x1, y1 int, err error)"></a>func (g *Gui) ViewPosition(name string) (x0, y0, x1, y1 int, err error)</h5><p>ViewPosition返回具有给定名称的视图的坐标，如果不存在具有该名称的视图，则返回ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">ViewPosition</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Views-42-View"><a href="#func-g-42-Gui-Views-42-View" class="headerlink" title="func (g *Gui) Views() []*View"></a>func (g *Gui) Views() []*View</h5><p>视图返回GUI中的所有视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Views</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>View</code></pre><h4 id="type-Key"><a href="#type-Key" class="headerlink" title="type Key"></a>type Key</h4><p>键代表特殊键或组合键。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Key termbox<span class="token punctuation">.</span>Key</code></pre><h4 id="type-Manager"><a href="#type-Manager" class="headerlink" title="type Manager"></a>type Manager</h4><p>经理负责GUI的布局，可用于构建小部件。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Manager <span class="token keyword">interface</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次重新绘制GUI时都会调用布局，该布局必须包含基本视图及其初始化。</span>        <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span>        <span class="token punctuation">}</span></code></pre><h4 id="type-ManagerFunc"><a href="#type-ManagerFunc" class="headerlink" title="type ManagerFunc"></a>type ManagerFunc</h4><p>ManagerFunc类型是一种适配器，允许将普通功能用作Manager。 如果f是具有适当签名的函数，则ManagerFunc（f）是调用f的Manager对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ManagerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-f-ManagerFunc-Layout-g-42-Gui-error"><a href="#func-f-ManagerFunc-Layout-g-42-Gui-error" class="headerlink" title="func (f ManagerFunc) Layout(g *Gui) error"></a>func (f ManagerFunc) Layout(g *Gui) error</h5><p>布局调用f（g）</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f ManagerFunc<span class="token punctuation">)</span> <span class="token function">Layout</span><span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h4 id="type-Modifier"><a href="#type-Modifier" class="headerlink" title="type Modifier"></a>type Modifier</h4><p>修饰符允许定义特殊的按键组合。 定义新的键绑定时，可以将它们与“键”或“符文”结合使用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Modifier termbox<span class="token punctuation">.</span>Modifier</code></pre><p>修饰符。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    ModNone Modifier <span class="token operator">=</span> <span class="token function">Modifier</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    ModAlt           <span class="token operator">=</span> <span class="token function">Modifier</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ModAlt<span class="token punctuation">)</span>    <span class="token punctuation">)</span></code></pre><h4 id="type-OutputMode"><a href="#type-OutputMode" class="headerlink" title="type OutputMode"></a>type OutputMode</h4><p>OutputMode表示终端的输出模式（8或256色）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> OutputMode termbox<span class="token punctuation">.</span>OutputMode</code></pre><h4 id="type-View"><a href="#type-View" class="headerlink" title="type View"></a>type View</h4><p>视图是一个窗口。 它维护自己的内部缓冲区和光标位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> View <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BgColor和FgColor允许配置视图的背景和前景色。</span>    BgColor<span class="token punctuation">,</span> FgColor Attribute    <span class="token comment" spellcheck="true">// SelBgColor和SelFgColor用于配置选定线的突出显示时的背景色和前景色。</span>    SelBgColor<span class="token punctuation">,</span> SelFgColor Attribute    <span class="token comment" spellcheck="true">// 如果Editable为true，则击键将添加到视图的内部缓冲区的光标位置。</span>    Editable <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 编辑器允许定义管理版本模式的编辑器，包括键绑定或光标行为。 默认情况下使用DefaultEditor。</span>    Editor Editor    <span class="token comment" spellcheck="true">// 覆盖启用或禁用视图的覆盖模式。</span>    Overwrite <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果“高光”为true，则Sel {Bg，Fg} Colors将用于光标位置下方的行。</span>    Highlight <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Frame为true，则将在视图周围绘制边框。</span>    Frame <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Wrap为true，则写入到此View的内容长于其宽度时将自动进行包装。 如果为true，则将忽略视图的x起点。</span>    Wrap <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Autoscroll为true，则在文本溢出时，视图将自动向下滚动。 如果为true，则将忽略视图的y起点。</span>    Autoscroll <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Frame为true，则Title可以为视图配置标题。</span>    Title <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 如果Mask为true，则View将显示遮罩而不是实际内容</span>    Mask <span class="token builtin">rune</span>    <span class="token comment" spellcheck="true">// 包含过滤或未导出的字段</span><span class="token punctuation">}</span></code></pre><h5 id="func-v-42-View-Buffer-string"><a href="#func-v-42-View-Buffer-string" class="headerlink" title="func (v *View) Buffer() string"></a>func (v *View) Buffer() string</h5><p>Buffer返回一个字符串，其中包含视图内部缓冲区的内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-BufferLines-string"><a href="#func-v-42-View-BufferLines-string" class="headerlink" title="func (v *View) BufferLines() []string"></a>func (v *View) BufferLines() []string</h5><p>BufferLines返回视图内部缓冲区中的行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">BufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Clear"><a href="#func-v-42-View-Clear" class="headerlink" title="func (v *View) Clear()"></a>func (v *View) Clear()</h5><p>清除清空视图的内部缓冲区。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Cursor-x-y-int"><a href="#func-v-42-View-Cursor-x-y-int" class="headerlink" title="func (v *View) Cursor() (x, y int)"></a>func (v *View) Cursor() (x, y int)</h5><p>光标返回视图的光标位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditDelete-back-bool"><a href="#func-v-42-View-EditDelete-back-bool" class="headerlink" title="func (v *View) EditDelete(back bool)"></a>func (v *View) EditDelete(back bool)</h5><p>EditDelete删除光标位置的符文。 back确定方向。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditDelete</span><span class="token punctuation">(</span>back <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditNewLine"><a href="#func-v-42-View-EditNewLine" class="headerlink" title="func (v *View) EditNewLine()"></a>func (v *View) EditNewLine()</h5><p>EditNewLine在光标下插入新行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditWrite</span><span class="token punctuation">(</span>ch <span class="token builtin">rune</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditWrite-ch-rune"><a href="#func-v-42-View-EditWrite-ch-rune" class="headerlink" title="func (v *View) EditWrite(ch rune)"></a>func (v *View) EditWrite(ch rune)</h5><p>EditWrite在光标位置写入一个符文。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditWrite</span><span class="token punctuation">(</span>ch <span class="token builtin">rune</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Line-y-int-string-error"><a href="#func-v-42-View-Line-y-int-string-error" class="headerlink" title="func (v *View) Line(y int) (string, error)"></a>func (v *View) Line(y int) (string, error)</h5><p>Line返回一个字符串，该字符串的视图内部缓冲区的线位于与点（x，y）对应的位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Line</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-MoveCursor-dx-dy-int-writeMode-bool"><a href="#func-v-42-View-MoveCursor-dx-dy-int-writeMode-bool" class="headerlink" title="func (v *View) MoveCursor(dx, dy int, writeMode bool)"></a>func (v *View) MoveCursor(dx, dy int, writeMode bool)</h5><p>MoveCursor会考虑线/视图的宽度来移动光标，并在必要时替换原点。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">MoveCursor</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy <span class="token builtin">int</span><span class="token punctuation">,</span> writeMode <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Name-string"><a href="#func-v-42-View-Name-string" class="headerlink" title="func (v *View) Name() string"></a>func (v *View) Name() string</h5><p>名称返回视图的名称。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Origin-x-y-int"><a href="#func-v-42-View-Origin-x-y-int" class="headerlink" title="func (v *View) Origin() (x, y int)"></a>func (v *View) Origin() (x, y int)</h5><p>原点返回视图的原点位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Read-p-byte-n-int-err-error"><a href="#func-v-42-View-Read-p-byte-n-int-err-error" class="headerlink" title="func (v *View) Read(p []byte) (n int, err error)"></a>func (v *View) Read(p []byte) (n int, err error)</h5><p>读取将数据读入p。 它返回读入p的字节数。 在EOF，err将为io.EOF。 在Rewind（）之后调用Read（）可使高速缓存用视图的内容刷新。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Rewind"><a href="#func-v-42-View-Rewind" class="headerlink" title="func (v *View) Rewind()"></a>func (v *View) Rewind()</h5><p>Rewind将下一个Read的偏移量设置为0，这也会刷新read缓存。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-SetCursor-x-y-int-error"><a href="#func-v-42-View-SetCursor-x-y-int-error" class="headerlink" title="func (v *View) SetCursor(x, y int) error"></a>func (v *View) SetCursor(x, y int) error</h5><p>SetCursor设置视图在给定点相对于视图的光标位置。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">SetCursor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-v-42-View-SetOrigin-x-y-int-error"><a href="#func-v-42-View-SetOrigin-x-y-int-error" class="headerlink" title="func (v *View) SetOrigin(x, y int) error"></a>func (v *View) SetOrigin(x, y int) error</h5><p>SetOrigin设置视图内部缓冲区的原点位置，因此从此点开始打印缓冲区，这意味着它已与原点连接。 它可以用于仅通过增加和减少ox和oy来实现水平和垂直滚动。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">SetOrigin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-v-42-View-Size-x-y-int"><a href="#func-v-42-View-Size-x-y-int" class="headerlink" title="func (v *View) Size() (x, y int)"></a>func (v *View) Size() (x, y int)</h5><p>大小返回视图中可见列和行的数量。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-ViewBuffer-string"><a href="#func-v-42-View-ViewBuffer-string" class="headerlink" title="func (v *View) ViewBuffer() string"></a>func (v *View) ViewBuffer() string</h5><p>ViewBuffer返回一个字符串，其中包含显示给用户的视图缓冲区的内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">ViewBufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-ViewBufferLines-string"><a href="#func-v-42-View-ViewBufferLines-string" class="headerlink" title="func (v *View) ViewBufferLines() []string"></a>func (v *View) ViewBufferLines() []string</h5><p>ViewBufferLines返回视图的内部缓冲区中显示给用户的行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">ViewBufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Word-x-y-int-string-error"><a href="#func-v-42-View-Word-x-y-int-string-error" class="headerlink" title="func (v *View) Word(x, y int) (string, error)"></a>func (v *View) Word(x, y int) (string, error)</h5><p>Word返回一个字符串，该字符串的视图内部缓冲区的单词位于与点（x，y）对应的位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Word</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Write-p-byte-n-int-err-error"><a href="#func-v-42-View-Write-p-byte-n-int-err-error" class="headerlink" title="func (v *View) Write(p []byte) (n int, err error)"></a>func (v *View) Write(p []byte) (n int, err error)</h5><p>写操作将字节切片追加到视图的内部缓冲区中。 由于View实现io.Writer接口，因此可以将其作为fmt.Fprintf，fmt.Fprintln，io.Copy等函数的参数传递。必须调用Clear来清除视图的缓冲区。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><blockquote><p>gocui 是一个 Go 语言用来开发控制台应用的 UI 工具包。手工翻译自GoDoc，如有错误，欢迎及时提出。致谢～～<br>GoDoc: <a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a><br>项目地址： <a href="https://github.com/jroimartin/gocui">https://github.com/jroimartin/gocui</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> golang </tag>
            
            <tag> gocui </tag>
            
            <tag> 命令行界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdow语法教程</title>
      <link href="/hexo/markdow-yu-fa-jiao-cheng/"/>
      <url>/hexo/markdow-yu-fa-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-Material主题配置测试"><a href="#Hexo-Material主题配置测试" class="headerlink" title="Hexo+Material主题配置测试"></a>Hexo+Material主题配置测试</h2><h3 id="markdown的标题写法"><a href="#markdown的标题写法" class="headerlink" title="markdown的标题写法"></a>markdown的标题写法</h3><h4 id="一到六级标题写法"><a href="#一到六级标题写法" class="headerlink" title="一到六级标题写法"></a>一到六级标题写法</h4><p>标题用“<code>#</code>+<code>空格</code>”来写，一级标题一个<code>#</code>号，二级标题<code>##</code>，最多支持六级标题。一点要记得在<code>#</code>后面加上一个<code>空格</code>。代码如下：</p><pre class=" language-Yml"><code class="language-Yml"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>显示效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="一级二级标题另外一种写法"><a href="#一级二级标题另外一种写法" class="headerlink" title="一级二级标题另外一种写法"></a>一级二级标题另外一种写法</h4><p>另外一种写法是在标题内容的下一行对应的位置用<code>======</code>号或者<code>------</code>标识出来。这种方法只能写一级和二级标题，如需其它级别标题请用<code>#</code>号加空格的方法。显示效果如下：</p><h1 id="用＝标识出来的一级标题"><a href="#用＝标识出来的一级标题" class="headerlink" title="用＝标识出来的一级标题"></a>用＝标识出来的一级标题</h1><h2 id="用-标识出来的二级标题"><a href="#用-标识出来的二级标题" class="headerlink" title="用-标识出来的二级标题"></a>用-标识出来的二级标题</h2><p>代码如下：</p><pre><code>用＝标识出来的一级标题====================用-标识出来的二级标题----------------------</code></pre><h2 id="段落字体写法"><a href="#段落字体写法" class="headerlink" title="段落字体写法"></a>段落字体写法</h2><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车。</strong></p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体写法有如下几种：</p><pre><code>`红色高亮`__粗体___斜体____粗斜体___~删除线~&lt;u&gt;下划线&lt;/u&gt;</code></pre><p><code>红色高亮</code><br><strong>粗体</strong><br><em>斜体</em><br><strong><em>粗斜体</em></strong><br><del>删除线</del><br><u>下划线</u><br>另外单独说一下，粗体，斜体，粗斜体用到的下划线<code>_</code>也可以用星号<code>*</code>来标识。他俩的区别就是列表，下划线<code>_</code>可以在列表内使用包括无序列表和有序列表，星号如果在列表内使用就会跳出列表，效果相当于标题。切记。<br>以上代码都可以画分割线</p><h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code>符号 ，然后后面紧跟一个<code>空格</code>符号：</p><pre><code>&gt; 这里是区块引用&gt; 区块引用&gt; &gt; 多级区块引用</code></pre><p>显示效果如下：</p><blockquote><p>这里是区块引用<br>区块引用</p><blockquote><p>多级区块引用</p></blockquote></blockquote><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>超链接这样使用<code>[显示文字](链接地址)</code>或者<code>&lt;链接地址&gt;</code>。如下：</p><pre><code>我是第一种超链接[谷歌](https://www.google.com)一般人打不开的。我是第二种链接，谷歌的网址是&lt;https://www.google.com&gt;吗？？</code></pre><p>显示效果如下：<br>我是第一种超链接<a href="https://www.google.com">谷歌</a>一般人打不开的。<br>我是第二种链接，谷歌的网址是<a href="https://www.google.com">https://www.google.com</a>吗？？</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>文章内容添加图片这样写<code>![alt 属性文本](图片地址 "可选标题)</code>。如下代码：</p><pre><code>![好看的奶](IM064636.jpg "可选标题")这里测试文章内容插入图片。图片如下![美女1.JPG](1.jpg "美女")图片插入完成。</code></pre><p>显示效果如下：<br><img src="IM064636.jpg" alt="好看的奶" title="可选标题"><br>这里测试文章内容插入图片。图片如下<img src="1.jpg" alt="美女1.JPG" title="美女">图片插入完成。</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>看表格的代码，主意第三行文字和第四行数字，不一定要对齐，但是对齐的话比较好看，在一个出来BUG容易定位修改。下面看代码：</p><pre><code>|左对齐|这里是居中|右对齐||:-----|:--------:|-----:||左|中|右||111111|2222222222|333333|</code></pre><p>显示效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">这里是居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr><tr><td align="left">111111</td><td align="center">2222222222</td><td align="right">333333</td></tr></tbody></table><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre><code>__加粗__\_\_正常显示\_\_</code></pre><p>显示效果如下：<br><strong>加粗</strong><br>**正常显示**<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>{}</td><td>花括号</td><td>[]</td><td>放括号</td></tr><tr><td>()</td><td>小括号</td><td>\</td><td>反斜杠</td></tr><tr><td>`</td><td>反引号</td><td>*</td><td>星号</td></tr><tr><td>_</td><td>下划线</td><td>#</td><td>井号</td></tr><tr><td>+</td><td>加号</td><td>-</td><td>减号</td></tr><tr><td>!</td><td>英文叹号</td><td>.</td><td>英文句号</td></tr></tbody></table><h4 id="特殊技巧"><a href="#特殊技巧" class="headerlink" title="特殊技巧"></a>特殊技巧</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：&lt;kbd&gt;，&lt;b&gt;，&lt;i&gt;，&lt;em&gt;，&lt;sup&gt;，&lt;sub&gt;，&lt;br&gt;等。这里就不再演示了，有想法的自己去试试吧。<br>想想还是演示一下吧，反正闲着也是闲着。代码如下：</p><pre><code>下标&lt;sub&gt;8&lt;/sub&gt;上标&lt;sup&gt;TM&lt;/sup&gt;&lt;em&gt;强调斜体&lt;/em&gt;&lt;i&gt;普通斜体&lt;/i&gt;&lt;b&gt;加粗&lt;/b&gt;换&lt;br&gt;行&lt;kbd&gt;Ctrl&lt;/kbd&gt;</code></pre><p>演示效果如下：<br>下标<sub>8</sub><br>上标<sup>TM</sup><br><em>强调斜体</em><br><i>普通斜体</i><br><b>加粗</b><br>换<br>行<br><kbd>Ctrl</kbd></p><h2 id="有关列表用法"><a href="#有关列表用法" class="headerlink" title="有关列表用法"></a>有关列表用法</h2><p>列表分有序列表和无序列表，先说无序列表吧。无序列表用<code>*</code>、<code>+</code>或者<code>-</code>等符号在加上一个<code>空格</code>来表示。有序列表就有数字加一个英文句号<code>1.</code>在跟上一个空格来表示。代码如下：</p><pre><code>+ 无序列表* 无序列表- 无序列表1. 有序列表3. 有序列表</code></pre><p>显示效果：</p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li></ol><p>细心的你一定发现了，代码最后一行的有序列表，明明是3，为啥显示出来变2了？这是因为markdown会自动给你排序，你的<code>3.</code>只是告诉markdown这是一个有序列表，markdown会自动给你排序的。关键是同一级别里面的第一项有序列表的写法，如果第一个有序列表你就写<code>8.</code>，那他就会认为这是从第八项开始列表，你写的第二项不管是数字几，都会显示<code>9.</code>。你搞明白了吗？</p><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套也很方便，只要在下一级列表前面加上一个TAB键就可以了。有序列表和无序列表写法一样。代码如下：<br>显示效果：</p><ol><li>我这里第一项有序列表就写8了</li><li>第二项有序列表写2了<ul><li>这是二级列表了</li></ul><ul><li>二级列表</li></ul><ul><li>二级列表</li></ul></li><li>第三项写99了昂</li></ol><p>显示效果如下：</p><pre><code>1. 我这里第一项有序列表就写8了2. 第二项有序列表写2了    * 这是二级列表了    - 二级列表    + 二级列表9. 第三项写99了昂</code></pre><p>另外，其实吧，加空格也能显示二级列表，4个以上的空格就能显示二级列表了。这里用的TAB键，因为我还要退出列表啊。我空一行退出一级列表，这里的二级列表我空两行就能退出来了。要是用4个空格写的话，我需要空四行才能推倒一级列表，在空四行才能退出列表。我自己都记不住写到内容在哪一级列表内了。不让TAB方便。所以还是建议用TAB键来写多级列表。</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>分隔线用5个以上的<code>*</code>、<code>-</code>、<code>_</code>来表示。如下：</p><pre><code>------_________* * * * *- - - - -_ _ _ _ _</code></pre><p>显示效果如下：</p><hr><hr><hr><hr><hr><p>以上代码都可以画分割线</p><h2 id="引用区块加列表"><a href="#引用区块加列表" class="headerlink" title="引用区块加列表"></a>引用区块加列表</h2><p>这个也不难，看效果：</p><blockquote><p>这里是引用区块</p><ul><li>这里是列表</li><li>引用区块</li><li>引用区块</li></ul></blockquote><p>代码如下：</p><pre><code>&gt; 这里是引用区块&gt; + 这里是列表&gt; + 引用区块&gt; + 引用区块</code></pre><p>一定要记住，一级列表用一个空行退出，二级列表用两个空行退出。哪怕你在代码块或者引用区块的列表都算。因为markdown比较笨，他分不出代码块里的列表是用来显示的。这算一个Bug吗？应该算吧。这也我为啥要把列表和列表嵌套写在最后面的原因，真的记不住自己到底写了多少级列表用了多少个空格。<br>在来试试列表里面的引用区块吧。</p><ul><li>列表第一项</li><li>列表第二项<blockquote><p>引用区块<br>引用区块第二行</p></blockquote></li><li>列表第三项</li></ul><p>代码是这样写的：</p><pre><code>+ 列表第一项+ 列表第二项&gt; 引用区块&gt; 引用区块第二行+ 列表第三项</code></pre><h2 id="关于代码块"><a href="#关于代码块" class="headerlink" title="关于代码块"></a>关于代码块</h2><p>差点忘记代码块的写法，用三个反引号来写代码块，看代码如下：</p><pre class=" language-html"><code class="language-html">```这里是代码...```</code></pre><h2 id="下载按钮代码"><a href="#下载按钮代码" class="headerlink" title="下载按钮代码"></a>下载按钮代码</h2><p>找了一个下载按钮的代码，看着不赖就收了。呵呵。先看看效果吧。使用的时候代码上下个空一行。</p><div class="Donw_socold"><a id="id" download="filename" href="####">Download</a><span class="up">上提示框</span><span class="down">下提示框</span></div><p>代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Donw_socold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>####<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>不知道写啥了，在放一张图片引狼吧。嘿嘿<br><img src="2.jpg" alt="引狼" title="引狼"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdow </tag>
            
            <tag> Hexo </tag>
            
            <tag> Material </tag>
            
            <tag> Hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
