<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>晨星基金评级</title>
      <link href="/ji-jin/chen-xing-ji-jin-ping-ji/"/>
      <url>/ji-jin/chen-xing-ji-jin-ping-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="晨星基金评级"><a href="#晨星基金评级" class="headerlink" title="晨星基金评级"></a>晨星基金评级</h2><table><thead><tr><th>代码</th><th>名称</th><th>分类</th><th>三年</th><th>五年</th><th>回报</th></tr></thead><tbody><tr><td>519674</td><td>银河创新成长混合</td><td>激进</td><td>五星</td><td>四星</td><td>47.90</td></tr><tr><td>000751</td><td>嘉实新兴产业股票</td><td>股票</td><td>五星</td><td>五星</td><td>18.57</td></tr><tr><td>161903</td><td>万家行业优选混合 (LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>42.31</td></tr><tr><td>260108</td><td>景顺长城新兴成长混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.97</td></tr><tr><td>162605</td><td>景顺长城鼎益混合(LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>-0.11</td></tr><tr><td>000083</td><td>汇添富消费行业混合</td><td>激进</td><td>五星</td><td>五星</td><td>3.21</td></tr><tr><td>519732</td><td>交银定期支付双息平衡混合</td><td>混合</td><td>五星</td><td>五星</td><td>12.95</td></tr><tr><td>519712</td><td>交银阿尔法核心混合</td><td>激进</td><td>五星</td><td>五星</td><td>10.88</td></tr><tr><td>159928</td><td>汇添富中证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>2.35</td></tr><tr><td>160222</td><td>国泰国证食品饮料行业指数分级</td><td>股票</td><td>五星</td><td>五星</td><td>-1.31</td></tr><tr><td>110011</td><td>易方达中小盘混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.62</td></tr><tr><td>000595</td><td>嘉实泰和混合</td><td>激进</td><td>五星</td><td>五星</td><td>16.66</td></tr><tr><td>110022</td><td>易方达消费行业股票</td><td>股票</td><td>五星</td><td>五星</td><td>-1.28</td></tr><tr><td>000339</td><td>长城医疗保健混合</td><td>激进</td><td>五星</td><td>五星</td><td>23.34</td></tr><tr><td>519736</td><td>交银新成长混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.06</td></tr><tr><td>180012</td><td>银华富裕主题混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.78</td></tr><tr><td>512600</td><td>嘉实中证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>1.94</td></tr><tr><td>519697</td><td>交银优势行业混合</td><td>混合</td><td>五星</td><td>五星</td><td>11.24</td></tr><tr><td>163415</td><td>兴全商业模式优选混合(LOF)</td><td>激进</td><td>五星</td><td>五星</td><td>12.67</td></tr><tr><td>510630</td><td>华夏上证主要消费ETF</td><td>股票</td><td>五星</td><td>五星</td><td>2.32</td></tr><tr><td>070032</td><td>嘉实优化红利混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.24</td></tr><tr><td>000619</td><td>东方红产业升级灵活配置混合</td><td>激进</td><td>五星</td><td>五星</td><td>5.99</td></tr><tr><td>519700</td><td>交银主题优选混合</td><td>激进</td><td>五星</td><td>五星</td><td>8.33</td></tr><tr><td>519688</td><td>交银精选混合</td><td>激进</td><td>五星</td><td>五星</td><td>4.96</td></tr><tr><td>110003</td><td>易方达上证50指数A</td><td>股票</td><td>五星</td><td>五星</td><td>-1.31</td></tr><tr><td>690007</td><td>民生加银景气行业混合</td><td>激进</td><td>五星</td><td>五星</td><td>6.08</td></tr><tr><td>519066</td><td>汇添富蓝筹稳健混合</td><td>激进</td><td>五星</td><td>五星</td><td>2.19</td></tr><tr><td>202023</td><td>南方优选成长混合A</td><td>混合</td><td>五星</td><td>五星</td><td>8.34</td></tr><tr><td>040008</td><td>华安策略优选混合</td><td>激进</td><td>五星</td><td>五星</td><td>-1.64</td></tr><tr><td>166002</td><td>中欧新蓝筹混合 -A</td><td>激进</td><td>五星</td><td>五星</td><td>7.21</td></tr><tr><td>519068</td><td>汇添富成长焦点混合</td><td>激进</td><td>五星</td><td>五星</td><td>1.48</td></tr><tr><td>159905</td><td>工银深证红利ETF</td><td>股票</td><td>五星</td><td>五星</td><td>-0.75</td></tr><tr><td>159916</td><td>建信深证基本面60ETF</td><td>股票</td><td>五星</td><td>五星</td><td>1.51</td></tr><tr><td>165312</td><td>建信央视财经50指数分级</td><td>股票</td><td>五星</td><td>五星</td><td>2.25</td></tr><tr><td>481012</td><td>工银瑞信深证红利ETF联接A</td><td>股票</td><td>五星</td><td>五星</td><td>-0.61</td></tr><tr><td>217027</td><td>招商央视财经50指数A</td><td>股票</td><td>五星</td><td>五星</td><td>2.56</td></tr><tr><td>530015</td><td>建信深证基本面60ETF联接A</td><td>股票</td><td>五星</td><td>五星</td><td>1.55</td></tr><tr><td>519069</td><td>汇添富价值精选混合A</td><td>激进</td><td>五星</td><td>五星</td><td>3.34</td></tr><tr><td>270002</td><td>广发稳健增长混合</td><td>混合</td><td>五星</td><td>五星</td><td>6.60</td></tr><tr><td>450002</td><td>国富弹性市值混合</td><td>激进</td><td>五星</td><td>五星</td><td>0.20</td></tr><tr><td>540012</td><td>汇丰晋信恒生A股行业龙头指数A</td><td>股票</td><td>五星</td><td>五星</td><td>-1.19</td></tr><tr><td>163407</td><td>兴全沪深300指数增强(LOF)A</td><td>股票</td><td>五星</td><td>五星</td><td>0.87</td></tr><tr><td>160918</td><td>大成中小盘混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>25.14</td></tr><tr><td>460005</td><td>华泰柏瑞价值增长混合</td><td>激进</td><td>四星</td><td>五星</td><td>26.13</td></tr><tr><td>000136</td><td>民生加银策略精选混合</td><td>激进</td><td>四星</td><td>五星</td><td>26.59</td></tr><tr><td>519091</td><td>新华泛资源优势混合</td><td>激进</td><td>四星</td><td>五星</td><td>20.45</td></tr><tr><td>163406</td><td>兴全合润分级混合</td><td>激进</td><td>四星</td><td>五星</td><td>11.58</td></tr><tr><td>519704</td><td>交银先进制造混合</td><td>激进</td><td>四星</td><td>五星</td><td>17.81</td></tr><tr><td>180031</td><td>银华中小盘精选混合</td><td>激进</td><td>四星</td><td>五星</td><td>9.44</td></tr><tr><td>000527</td><td>南方新优享灵活配置混合A</td><td>激进</td><td>四星</td><td>五星</td><td>16.92</td></tr><tr><td>163412</td><td>兴全轻资产混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>8.70</td></tr><tr><td>000452</td><td>南方医药保健灵活配置混合</td><td>激进</td><td>四星</td><td>五星</td><td>16.86</td></tr><tr><td>000547</td><td>建信健康民生混合</td><td>激进</td><td>四星</td><td>五星</td><td>16.30</td></tr><tr><td>161219</td><td>国投瑞银新兴产业混合(LOF)</td><td>激进</td><td>四星</td><td>五星</td><td>9.59</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基金 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言数组和切片</title>
      <link href="/golang/go-yu-yan-shu-zu-he-qie-pian/"/>
      <url>/golang/go-yu-yan-shu-zu-he-qie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="数组学习和测试"><a href="#数组学习和测试" class="headerlink" title="数组学习和测试"></a>数组学习和测试</h2><h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><p>数组声明用<code>var name [3]int</code>来声明一个名字叫做<code>name</code>的数组，他有3个元素。数组声明中必须要用<code>[n]</code>或者<code>[...]</code>来确定数组内元素数量。<code>[...]</code>表示初始化数组是编译器根据你给的数据自动推导数字的元素数量。记住，数组必须要有元素数量，而且元素数量不能更改。不同元素数量的数组是两个数据类型，比如<code>[3]int</code>和<code>[4]int</code>是两个数据类型，好比<code>int</code>和<code>string</code>一样不能相互做逻辑运算。</p><h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><p>声明数组的格式是：<br><code>var 数组名字 [元素数量] 数组类型</code>。</p><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>初始化一个数组可以用下面的代码来声明并初始化名字是<code>name</code>的数组，他有两个元素<code>"铁锤"</code>和<code>"钢蛋"</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token string">"铁锤"</span><span class="token punctuation">,</span><span class="token string">"钢蛋"</span><span class="token punctuation">}</span></code></pre><p>或者用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span></code></pre><p>来声明一个由编译器自动推导出有3个元素的数组<code>name</code>。还可以用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">"铁柱"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"钢蛋"</span><span class="token punctuation">}</span></code></pre><p>来指定数组<code>name</code>的第<code>0</code>个元素保存<code>铁柱</code>，第<code>5</code>个元素保存<code>铁柱</code>来初始化数组。当然也可以用</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span></code></pre><p>这种简写方式声明并初始化数组。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>你可以用如下方法创建一个二维数组：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"钢锤"</span><span class="token punctuation">,</span> <span class="token string">"laobain"</span><span class="token punctuation">,</span> <span class="token string">"2B"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>或者：</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"钢锤"</span><span class="token punctuation">,</span> <span class="token string">"laobain"</span><span class="token punctuation">,</span> <span class="token string">"2B"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>如果用自动推导元素数量的方式需要注意，编译器只能自动推导第一层的元素数量。用<code>name := [...][...]string{}</code>编译器直接报错，因为编译器只能推导第一层的<code>[...]</code>第二个中括号<code>[]</code>内必须明确的给定元素数量。</p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>数组遍历一般推荐用<code>for i,zhi := range name {}</code>来遍历数组，<code>i</code>取得数字<code>name</code>的索引，<code>zhi</code>取得数组<code>name</code>的数据。或者也可以用<code>for i:=0; i&lt;=9; i++{}</code>来遍历数组。</p><p>另外数组是值引用类型，因此赋值和传参数不会改变原数组的值。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"铁蛋"</span><span class="token punctuation">,</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">}</span>name1 <span class="token operator">:=</span> namefmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v\n数组name1:%v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span>name1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"柱子"</span> <span class="token comment" spellcheck="true">//修改name1并不影响name</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"数组name:%v\n数组name1:%v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name1<span class="token punctuation">)</span></code></pre><p>再另外：<code>[n]*T</code>表示指针数组，<code>*[n]T</code>表示数组指针 。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片是基于数组做的封装，切片长度可变。声明切片是不需要在’[]’中定义元素数量。切片是引用类型，也就是说对切片进行操作，会改变底层数组的数据。</p><h3 id="切片定义"><a href="#切片定义" class="headerlink" title="切片定义"></a>切片定义</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> 切片名字 <span class="token punctuation">[</span><span class="token punctuation">]</span>类型</code></pre><p>可以使用内置函数<code>len()</code>取得切片长度，用内置函数<code>cap()</code>取得切片容量。</p><h3 id="基于数组定义切片"><a href="#基于数组定义切片" class="headerlink" title="基于数组定义切片"></a>基于数组定义切片</h3><p>为数组<code>name</code>创建切片：</p><pre class=" language-go"><code class="language-go">qiepian <span class="token operator">:=</span> name <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>基于数组<code>name</code>的切片<code>qiepian</code>。切片的数据是数字<code>name</code>的第1个元素开始到第四个元素之前结束。左开右闭原则，<code>name[1:4]</code>的意思说明左边数字<code>1</code>的元素到右边数字索引<code>4</code>之前的元素。当然你还可以对切片再次切片<code>qiepian1:=qiepian[:2]</code>。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> qiepian<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>基于数组的切片如果超出原数组的长度<code>qiepian:=name[1:6]</code>编译器会报如下错误：</p><blockquote><p>invalid slice index 6 (out of bounds for 5-element array)</p></blockquote><p>如果切片<code>qiepian1</code>超出<code>qiepian</code>的长度译器会识别出来么？答案是不会，嘿嘿，虽然它爹是谷歌。编译是识别不出来，但是运行是会报错，比如修改为<code>qiepian1 := qiepian[1:5]</code>编译没问题，但是运行是会报错：</p><blockquote><p>panic: runtime error: slice bounds out of range [:5] wit<br>goroutine 1 [running]:main.main()<br>/data/data/com.termux/files/home/go/src/socold.com/soc<br>exit status 2</p></blockquote><p>修改切片<code>qiepian[2]</code>的数据。也就是修改底层数组<code>name</code>的数据。因为切片的值是引用类型，而且<code>qiepian</code>和<code>qiepian2</code>都是基于数组<code>name</code>。所以修改<code>qiepian[2]</code>的数据，就是修改底层数组<code>name</code>的数据。既然底层数组<code>name</code>的数据修改了，那么基于数组<code>name</code>的两个切片<code>qiepian</code>和<code>qiepian1</code>显示出来的数据都该改变。下面输出已然证实结论。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//修改切片'qiepian[2]'的数据。</span>qiepian<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"gg"</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>同理，对切片的在切片修改数据一样的道理，会修改底层数组<code>name</code>。上面代码把<code>qiepian1:=name[1:4]</code>改成<code>qiepian1:=qiepian[1:4]</code>效果一样滴。</p><p>用<code>append(qiepian,"mm")</code>来为切片<code>qiepian</code>添加一个元素<code>mm</code>时，如果原数组<code>name</code>容量够用，会直接修改数组<code>name</code>的数据，并为切片<code>qiepian</code>扩大一个容量。底层还是原数组<code>name</code>。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//原数组'name'容量够用的话直接添加元素。</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"'qiepian'添加元素'mm'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果添加元素时，原数组容量不够，那就为切片<code>qiepian</code>重新造一个数组。比如下面代码，为切片<code>qiepian</code>添加两个元素是，原数组容量肯定不够用。我们又修改了切片<code>qiepian1[0]</code>的数据为<code>AA</code>，输出显示切片<code>qiepian1</code>的底层数组还是<code>name</code>，因为下面三组数据只有数组<code>name</code>和切片<code>qiepian1</code>的数据改变了，切片<code>qiepian</code>的数据并没有发生变化，所以，系统为切片<code>qiepian</code>重新造了一个新的底层数组。</p><pre class=" language-go"><code class="language-go">name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">}</span>qiepian <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//切片'qiepian'是基于数组'name'的切片</span>qiepian1 <span class="token operator">:=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//切片1'qiepian1'也是基于数组'name'的切片。</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//现在肯定超出原数组'name'的容量了。</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"mm"</span><span class="token punctuation">)</span>qiepian <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">,</span> <span class="token string">"zz"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"'qiepian'添加元素'mm'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span>qiepian1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AA"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"修改'qiepian1[0]'的数据为'AA'"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> qiepian<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"qiepian1:\n %v \n 类型：%T 长度：%v 容量：%v \n"</span><span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> qiepian1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>qiepian1<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
            <tag> Go语言数组 </tag>
            
            <tag> Go切片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpaceVim官方文档</title>
      <link href="/golang/spacevim-guan-fang-wen-dang/"/>
      <url>/golang/spacevim-guan-fang-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>该层用于golang开发。 它还提供了其他特定于语言的键映射。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要使用此配置层，请使用以下命令更新自定义配置文件：</p><pre class=" language-yml"><code class="language-yml">[[layers]]  name = "lang#go"</code></pre><p>安装后，在vim中运行：<code>GoInstallBinaries</code>。<br>要启用标签栏支持，您需要安装<a href="https://github.com/jstemmer/gotags" target="_blank" rel="noopener">gotags</a>：</p><pre><code>go get -u github.com/jstemmer/gotags</code></pre><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>自动完成</li><li>语法检查</li><li>转到定义</li><li>参考查找器</li></ul><h2 id="键绑定"><a href="#键绑定" class="headerlink" title="键绑定"></a>键绑定</h2><p><strong>导入键绑定：</strong></p><table><thead><tr><th><code>Key Bindings</code></th><th><code>Descriptions</code></th></tr></thead><tbody><tr><td><code>SPC c l</code></td><td><code>注释或取消注释当前行</code></td></tr><tr><td>`SCP c p/P</td><td><code>注释或取消注释当前段落(上下空行之间的算段落)</code></td></tr><tr><td><code>u</code></td><td><code>撤销上一步操作</code></td></tr><tr><td><kbd>Ctrl</kbd>+<kbd>p</kbd></td><td><code>代码补全</code></td></tr><tr><td><code>z</code> <code>.</code></td><td><code>光标行处于屏幕中间</code></td></tr><tr><td><code>z</code> <code>-</code></td><td><code>光标行处于屏幕最底</code></td></tr><tr><td><code>z</code> <code>回车</code></td><td><code>光标行处于屏幕顶部</code></td></tr><tr><td><code>w</code></td><td><code>下一个单词首字母</code></td></tr><tr><td><code>d</code></td><td><code>上一个单词首字母</code></td></tr><tr><td><code>e</code></td><td><code>当前单词尾字母</code></td></tr><tr><td><code>SPC w F</code></td><td><code>新建标签</code></td></tr><tr><td><code>SPC t t</code></td><td><code>打开标签管理器</code></td></tr><tr><td><code>SPC w o</code></td><td><code>切换标签</code></td></tr><tr><td><code>g d</code></td><td><code>转到函数定义</code></td></tr><tr><td><code>g 0</code></td><td><code>跳到第一个标签</code></td></tr><tr><td><code>SPC l a</code></td><td><code>go alternate</code></td></tr><tr><td><code>SPC l b</code></td><td><code>go build</code></td></tr><tr><td><code>SPC l c</code></td><td><code>go coverage</code></td></tr><tr><td><code>SPC l d</code></td><td><code>go doc</code></td></tr><tr><td><code>SPC l D</code></td><td><code>go doc vertical</code></td></tr><tr><td><code>SPC l e</code></td><td><code>go rename</code></td></tr><tr><td><code>SPC l g</code></td><td><code>go definition</code></td></tr><tr><td><code>SPC l G</code></td><td><code>go generate</code></td></tr><tr><td><code>SPC l h</code></td><td><code>go info</code></td></tr><tr><td><code>SPC l i</code></td><td><code>go implements</code></td></tr><tr><td><code>SPC l I</code></td><td><code>implement stubs</code></td></tr><tr><td><code>SPC l k</code></td><td><code>add tags</code></td></tr><tr><td><code>SPC l K</code></td><td><code>remove tags</code></td></tr><tr><td><code>SPC l l</code></td><td><code>list declarations in file</code></td></tr><tr><td><code>SPC l m</code></td><td><code>format imports</code></td></tr><tr><td><code>SPC l M</code></td><td><code>add import</code></td></tr><tr><td><code>SPC l r</code></td><td><code>go run</code></td></tr><tr><td><code>SPC l s</code></td><td><code>fill struct</code></td></tr><tr><td><code>SPC l t</code></td><td><code>go test</code></td></tr><tr><td><code>SPC l v</code></td><td><code>freevars</code></td></tr><tr><td><code>SPC l x</code></td><td><code>go referrers</code></td></tr></tbody></table><h3 id="代码格式："><a href="#代码格式：" class="headerlink" title="代码格式："></a>代码格式：</h3><p>格式当前缓冲区的默认键绑定为<code>SPC b f</code>，并且此键绑定在<code>格式层</code>中定义。 您也可以使用<code>g =</code>缩进当前缓冲区。</p><p>要使新格式支持go文件，您应该具有<a href="http://golang.org/cmd/gofmt/" target="_blank" rel="noopener">go-fmt</a>命令，或者安装<a href="https://godoc.org/golang.org/x/tools/cmd/goimports" target="_blank" rel="noopener">goimports</a>。<code>go-fmt</code>由golang的默认安装提供，因此请确保已正确设置go环境。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> SpaceVim </tag>
            
            <tag> vim开发环境 </tag>
            
            <tag> go语言开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM正则表达式</title>
      <link href="/linux/vim-zheng-ze-biao-da-shi/"/>
      <url>/linux/vim-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="vim正则表达式"><a href="#vim正则表达式" class="headerlink" title="vim正则表达式"></a>vim正则表达式</h2><p>Vim中的正则表达式功能很强大，如果能自由运用，则可以完成很多难以想象的操作。如果你比较熟悉Perl的正规表达式，可以直接参照<a href="http://www.idv2.com/vimwiki/index.php?%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F#perldiff" target="_blank" rel="noopener">与Perl正则表达式的区别</a>一节。</p><h3 id="使用正则表达式的命令"><a href="#使用正则表达式的命令" class="headerlink" title="使用正则表达式的命令"></a>使用正则表达式的命令</h3><p>使用正则表达式的命令最常见的就是<code>/**</code>搜索命令。其格式如下：</p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>另一个很有用的命令就是<code>:n1,n2s/*/*/gc</code>（替换）命令，将第一个*之间的正则表达式替换成第二个*之间的字符串。</p><p><code>:s/正则表达式/替换字符串/选项</code><br>在学习正则表达式时可以利用<code>/</code>命令来练习。</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符是具有特殊意义的字符。使用元字符可以表达任意字符、行首、行 尾、某几个字符等意义。</p><h4 id="元字符一览"><a href="#元字符一览" class="headerlink" title="元字符一览"></a>元字符一览</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[abc]</code></td><td>匹配方括号中的任意一个字符。可以使用-表示字符范围。</td></tr><tr><td><code>[a-z0-9]</code></td><td>匹配小写字母和阿拉伯数字。</td></tr><tr><td><code>[^abc]</code></td><td>在方括号内开头使用<code>^</code>符号，表示匹配除方括号中字符之外的任意字符。</td></tr><tr><td><code>\d</code></td><td>匹配阿拉伯数字，等同于<code>[0-9]</code>。</td></tr><tr><td><code>\D</code></td><td>匹配阿拉伯数字之外的任意字符，等同于<code>[^0-9]</code>。</td></tr><tr><td><code>\x</code></td><td>匹配十六进制数字，等同于<code>[0-9A-Fa-f]</code>。</td></tr><tr><td><code>\X</code></td><td>匹配十六进制数字之外的任意字符，等同于<code>[^0-9A-Fa-f]</code>。</td></tr><tr><td><code>\w</code></td><td>匹配单词字母，等同于<code>[0-9A-Za-z_]</code>。</td></tr><tr><td><code>\W</code></td><td>匹配单词字母之外的任意字符，等同于<code>[^0-9A-Za-z_]</code>。</td></tr><tr><td><code>\t</code></td><td>匹配<kbd>TAB</kbd>字符。</td></tr><tr><td><code>\s</code></td><td>匹配空白字符，等同于<code>[\t]</code>。</td></tr><tr><td><code>\S</code></td><td>匹配非空白字符，等同于<code>[^\t]</code>。</td></tr></tbody></table><p>另外，如果要查找字符<code>*、.、/</code>等，则需要在前面用<code>\</code>符号，表示这不是元字符，而只是普通字符而已。</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\*</code></td><td>匹配<code>*</code>字符。</td></tr><tr><td><code>\.</code></td><td>匹配<code>.</code>字符。</td></tr><tr><td><code>\/</code></td><td>匹配<code>/</code>字符。</td></tr><tr><td><code>\\</code></td><td>匹配<code>\</code>字符。</td></tr><tr><td><code>\[</code></td><td>匹配<code>[</code>字符。</td></tr></tbody></table><h5 id="表示数量的元字符"><a href="#表示数量的元字符" class="headerlink" title="表示数量的元字符"></a>表示数量的元字符</h5><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配<code>0-任意</code>个</td></tr><tr><td><code>\+</code></td><td>匹配<code>1-任意</code>个</td></tr><tr><td><code>\?</code></td><td>匹配<code>0-1</code>个</td></tr><tr><td><code>\{n,m}</code></td><td>匹配<code>n-m</code>个</td></tr><tr><td><code>\{n}</code></td><td>匹配<code>n</code>个</td></tr><tr><td><code>\{n,}</code></td><td>匹配<code>n-任意</code></td></tr><tr><td><code>\{,m}</code></td><td>匹配<code>0-m个</code></td></tr></tbody></table><h5 id="表示位置的符号"><a href="#表示位置的符号" class="headerlink" title="表示位置的符号"></a>表示位置的符号</h5><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>$</code></td><td>匹配行尾</td></tr><tr><td><code>^</code></td><td>匹配行首</td></tr><tr><td><code>\&lt;</code></td><td>匹配单词词首</td></tr><tr><td><code>\&gt;</code></td><td>匹配单词词尾</td></tr></tbody></table><h5 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h5><p><code>/char\s\+[A-Za-z_]\w*;</code><br><strong>查找所有以char开头，之后是一个以上的空白，最后是一个标识符和分号。</strong></p><p><code>/\d\d:\d\d:\d\d</code><br><strong>查找如17:37:01格式的时间字符串</strong></p><p><code>:g/^\s*$/d</code><br><strong>删除只有空白的行</strong></p><p><code>:s/\&lt;four\&gt;/4/g</code><br><strong>将所有的four替换成4，但是fourteen中的four不替换</strong></p><h3 id="替换变量"><a href="#替换变量" class="headerlink" title="替换变量"></a>替换变量</h3><p>在正规表达式中使用<code>\(</code>和<code>\)</code>符号括起正规表达式，即可在后面使用<code>\1</code>、<code>\2</code>等变量来访问<code>\(</code>和<code>\)</code>中的内容。</p><h4 id="替换变量实例："><a href="#替换变量实例：" class="headerlink" title="替换变量实例："></a>替换变量实例：</h4><p><code>/\(a\+\)[^a]\+\1</code><br><strong>查找开头和结尾处a的个数相同的字符串，如aabbbaa，aaacccaaa，但是不匹配abbbaa</strong></p><p><code>:s/\(http:\/\/[-a-z\._~\+%\/]\+\)/&lt;a href="\1"&gt;\1&lt;\/a&gt;/</code><br><strong>将URL替换为</strong><code>&lt;a href="http://url"&gt;http://url&lt;/a&gt;</code><strong>的格式</strong></p><p><code>:s/\(\w\+\)\s\+\(\w\+\)/\2\t\1</code><br><strong>将data1，data2 修改为data2，data1</strong></p><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><p>在替换命令<code>:n1,n2s/*/#/</code>中可以使用函数表达式来书写替换内容，格式为:</p><p><strong>:s/替换字符串/=函数式</strong></p><p>在函数式中可以使用<code>submatch(1)</code>、<code>submatch(2)</code>等来引用<code>\1</code>、<code>\2</code>等的内容，而<code>submatch(0)</code>可以引用匹配的整个内容。</p><h5 id="函数式实例"><a href="#函数式实例" class="headerlink" title="函数式实例"></a>函数式实例</h5><p><code>:%s/\&lt;id\&gt;/\=line(".")</code><br><strong>将各行的id字符串替换为行号</strong></p><p><code>:%s/^\&lt;\w\+\&gt;/\=(line(".")-10) .".". submatch(1)</code><br><strong>将每行开头的单词替换为(行号-10).单词的格式，如第11行的</strong><code>word</code><strong>替换成</strong><code>1. word</code></p><h3 id="与Perl正则表达式的区别"><a href="#与Perl正则表达式的区别" class="headerlink" title="与Perl正则表达式的区别"></a>与Perl正则表达式的区别</h3><p>元字符的区别</p><table><thead><tr><th>Vim语法</th><th>Perl语法</th><th>含义</th></tr></thead><tbody><tr><td><code>\+</code></td><td><code>+</code></td><td><code>1-任意个</code></td></tr><tr><td><code>\?</code></td><td><code>?</code></td><td><code>0-1个</code></td></tr><tr><td><code>\{n,m}</code></td><td><code>{n,m}</code></td><td><code>n-m个</code></td></tr><tr><td><code>\(</code>和<code>\)</code></td><td><code>(和)</code></td><td><code>分组</code></td></tr></tbody></table><h3 id="vi-正则表达式练习"><a href="#vi-正则表达式练习" class="headerlink" title="vi 正则表达式练习"></a>vi 正则表达式练习</h3><p>闲言碎语不要讲…例子说明一切，比如下面这段我需要换成<code>ubb</code>标签</p><p>vim命令模式，输入:</p><p><code>:%s/.*src=”([^"]*)”[^&gt;]*&gt;/[img]1[/img]/g</code></p><p>替换为<br><code>[img ]gu.jpg[ /img]</code><br><code>[img ]os.jpg[ /img]</code><br><code>[img ]hu.jpg[ /img]</code><br><code>[img ]ang.jpg[ /img]</code></p><p>解释如下：</p><p><code>:</code><br><strong>命令执行状态</strong></p><p><code>%s</code><br><strong>表示查找并替换</strong></p><p><code>%s/a/b/g</code><br><strong>a被查找的字符串（正则匹配）；b要替换成的文字；g表示全局搜索替换（否则只处理找到的第一个结果）</strong></p><p><code>([^"]*)</code><br><strong>表示非引号的字符N个；外面()表示后面替换要用（用1,…,9等引用）</strong></p><p><code>[/img]</code><br><strong>/需要被转义</strong></p><p>与其它工具正则不一样的地方在于<code>()</code>也必须<code>()</code>，怪不得我老是弄不出来。</p><blockquote><p>相关资料：<br><a href="http://net.pku.edu.cn/~yhf/tao_regexps_zh.html" target="_blank" rel="noopener">via</a>:<a href="http://net.pku.edu.cn/~yhf/tao_regexps_zh.html" target="_blank" rel="noopener">http://net.pku.edu.cn/~yhf/tao_regexps_zh.html</a></p></blockquote><p>简单命令:</p><p><code>:%s/ */ /g</code>---把一个或者多个空格替换为一个空格。<br><code>:%s/ *$//</code>---去掉行尾的所有空格。<br><code>:%s/^/ /</code>---在每一行头上加入一个空格。<br><code>:%s/^[0-9][0-9]* //</code>---去掉行首的所有数字字符。<br><code>:%s/b[aeio]g/bug/g</code>---将所有的bag、beg、big和bog改为bug。<br><code>:%s/t([aou])g/h1t/g</code>---将所有tag、tog和tug分别改为hat、hot和hug（注意用group的用法和使用1引用前面被匹配的字符）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 正则表达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言占位符</title>
      <link href="/golang/go-yu-yan-zhan-wei-fu/"/>
      <url>/golang/go-yu-yan-zhan-wei-fu/</url>
      
        <content type="html"><![CDATA[<p>在这里按照占位符将被替换的变量类型划分，更方便查询和记忆。</p><h2 id="General（通用占位符）"><a href="#General（通用占位符）" class="headerlink" title="General（通用占位符）"></a>General（通用占位符）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%v</td><td>以默认的方式打印变量的值</td></tr><tr><td>%T</td><td>打印变量的类型</td></tr><tr><td>%%</td><td>字面上的百分号，并非值的占位符</td></tr></tbody></table><h2 id="Integer（整型）"><a href="#Integer（整型）" class="headerlink" title="Integer（整型）"></a>Integer（整型）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%+d</td><td>带符号的整型</td></tr><tr><td>%q</td><td>打印单引号</td></tr><tr><td>%o</td><td>不带零的八进制</td></tr><tr><td>%#o</td><td>带零的八进制</td></tr><tr><td>%x</td><td>小写的十六进制</td></tr><tr><td>%X</td><td>大写的十六进制</td></tr><tr><td>%#x</td><td>带0x的十六进制</td></tr><tr><td>%U</td><td>打印Unicode字符</td></tr><tr><td>%#U</td><td>打印带字符的Unicode</td></tr><tr><td>%b</td><td>打印整型的二进制</td></tr></tbody></table><h2 id="Integer-width（指定长度的整型，以5为例）"><a href="#Integer-width（指定长度的整型，以5为例）" class="headerlink" title="Integer width（指定长度的整型，以5为例）"></a>Integer width（指定长度的整型，以5为例）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%5d</td><td>整型长度为5，右对齐，左边留白</td></tr><tr><td>%-5d</td><td>左对齐右边留白</td></tr><tr><td>%05d</td><td>数字前面补零</td></tr></tbody></table><h2 id="Float（浮点数）"><a href="#Float（浮点数）" class="headerlink" title="Float（浮点数）"></a>Float（浮点数）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%f</td><td>(=%.6f) 6位小数点</td></tr><tr><td>%e</td><td>(=%.6e) 6位小数点（科学计数法）</td></tr><tr><td>%g</td><td>用最少的数字来表示</td></tr><tr><td>%.3g</td><td>最多3位数字来表示</td></tr><tr><td>%.3f</td><td>最多3位小数来表示</td></tr></tbody></table><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>正常输出字符串</td></tr><tr><td>%q</td><td>字符串带双引号，字符串中的引号带转义符</td></tr><tr><td>%#q</td><td>字符串带反引号，如果字符串内有反引号，就用双引号代替</td></tr><tr><td>%x</td><td>将字符串转换为小写的16进制格式</td></tr><tr><td>%X</td><td>将字符串转换为大写的16进制格式</td></tr><tr><td>% x</td><td>带空格的16进制格式</td></tr></tbody></table><h2 id="String-Width-指定长度的字符串，以5为例）"><a href="#String-Width-指定长度的字符串，以5为例）" class="headerlink" title="String Width (指定长度的字符串，以5为例）"></a>String Width (指定长度的字符串，以5为例）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%5s</td><td>最小宽度为5</td></tr><tr><td>%-5s</td><td>最小宽度为5（左对齐）</td></tr><tr><td>%.5s</td><td>最大宽度为5</td></tr><tr><td>%5.7s</td><td>最小宽度为5，最大宽度为7</td></tr><tr><td>%-5.7s</td><td>最小宽度为5，最大宽度为7（左对齐）</td></tr><tr><td>%5.3s</td><td>如果宽度大于3，则截断</td></tr><tr><td>%05s</td><td>如果宽度小于5，就会在字符串前面补零</td></tr></tbody></table><h2 id="Struct（结构体）"><a href="#Struct（结构体）" class="headerlink" title="Struct（结构体）"></a>Struct（结构体）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%v</td><td>以默认的方式打印变量的值</td></tr><tr><td>%+v</td><td>在打印结构体时，会添加字段名</td></tr><tr><td>%#v</td><td>在打印结构体时，会添加字段名和包名</td></tr></tbody></table><h2 id="Boolean（布尔值）"><a href="#Boolean（布尔值）" class="headerlink" title="Boolean（布尔值）"></a>Boolean（布尔值）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%t</td><td>打印true或false</td></tr></tbody></table><h2 id="Pointer（指针）"><a href="#Pointer（指针）" class="headerlink" title="Pointer（指针）"></a>Pointer（指针）</h2><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%p</td><td>带0x的指针</td></tr><tr><td>%#p</td><td>不带0x的指针</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> go语言 </tag>
            
            <tag> go语言占位符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建教程</title>
      <link href="/hexo/hexo-github-da-jian-jiao-cheng/"/>
      <url>/hexo/hexo-github-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo和Github的搭建"><a href="#Hexo和Github的搭建" class="headerlink" title="Hexo和Github的搭建"></a>Hexo和Github的搭建</h2><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h3 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h3><ul><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ul><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>为了把本地的网页文件上传到github上面去，需要用到工具。Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git非常强大，建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以看一下。<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></p><h5 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h5><p>到git官网上下载.exe文件,安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><div class="Donw_socold">        <a id="id" download="filename" href="https://git-scm.com/download/win" target="_blank" rel="noopener">Download</a>        <span class="up">win-git</span>        <span class="down">win版Git</span>        </div><blockquote><p>顺便说一下，windows在git安装完后，就可以直接使用<code>git bash</code>来敲命令行了，不用自带的cmd，cmd有点难用。</p></blockquote><h5 id="linux"><a href="#linux" class="headerlink" title="linux:"></a>linux:</h5><p>对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><p>安装完成后在命令提示符中输入<code>git --version</code>来查看一下版本验证是否安装成功。</p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>Hexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。</p><h5 id="windows：-1"><a href="#windows：-1" class="headerlink" title="windows："></a>windows：</h5><p>下载稳定版或者最新版都可以Node.js，安装选项全部默认，一路点击Next。<br>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h5 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h5><p>命令行安装:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> npma</code></pre><p>不过不推荐命令行安装，有时候有问题，建议直接到官网去下载编译好的压缩文件，如图所示<br><img src="1.png" alt="linux安装node.js第一步" title="linux安装node.js第一步"><br>然后解压到你指定的文件夹即可，比如我解压到我系统的<code>/home/shw/MySoftwares</code>目录下了，如图:<br><img src="2.png" alt="linux安装node.js第二步" title="linux安装Node.js第二步"><br></p><blockquote><p>注意本压缩包是.tar.xz格式的，需要两次解压<br>配置一下环境变量</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/profile</code></pre><p>复制下面两行到刚打开的profile文件最底部(注意node的安装地址<code>/home/shw/MySoftwares/node-v12.8.0-linux-x64</code>换成自己的)：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> NODE_HOME<span class="token operator">=</span>/home/shw/MySoftwares/node-v12.8.0-linux-x64<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$NODE_HOME</span>/bin</code></pre><p>保存后退出，再执行下面命令将环境变量生效：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre><p>将目录软链接到全局环境下（命令后面的<code>/usr/local/bin/node</code>是固定的）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/node /usr/local/bin/node<span class="token function">sudo</span> <span class="token function">ln</span> -s /home/shw/MySoftwares/node-v12.8.0-linux-x64/npm /usr/local/bin/npm</code></pre><p>这样安装好了以后使用npm安装的包(比如：<code>ionic serve</code>)，使用包的命令时可能会提示找不到命令，没关系，在用户目录下终端执行下面命令固定写法：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"export PATH=<span class="token variable"><span class="token variable">$(</span><span class="token function">npm</span> prefix -g<span class="token variable">)</span></span>/bin:<span class="token variable">$PATH</span>"</span> <span class="token operator">>></span> ~/.bashrc <span class="token operator">&amp;&amp;</span> <span class="token function">source</span> ~/.bashrc</code></pre><p>这样我们在所有用户，都可以使用npm，也可以使用npm安装的包的命令。成功的将nodejs安装并配置到全局环境下。安装完后，打开命令行终端，输入:</p><pre class=" language-bash"><code class="language-bash">node -v<span class="token function">npm</span> -v</code></pre><p>检查一下有没有安装成功</p><h5 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h5><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。比如我的博客文件都存放在<code>D:\Study\MyBlog</code>目录下。在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。定位到该目录下，输入<code>npm install -g hexo-cli</code>安装Hexo。可能会有几个报错，无视它就行。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><p>至此hexo就安装完了。接下来初始化一下hexo,即初始化我们的网站，输入<code>hexo init</code>初始化文件夹</p><pre class=" language-bash"><code class="language-bash">hexo init MyBlog</code></pre><p>这个MyBlog可以自己取什么名字都行，然后，接着输入<code>npm install</code>安装必备的组件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> MyBlog      //进入这个MyBlog文件夹<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹MyBlog目录下有：</p><ul><li><code>node_modules:</code>依赖包</li><li><code>public:</code>存放生成的页面</li><li><code>scaffolds</code>:生成文章的一些模板</li><li><code>source:</code>用来存放你的文章</li><li><code>themes:</code>主题**</li><li><code>_config.yml:</code>博客的配置文件**</li></ul><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，</p><pre class=" language-bash"><code class="language-bash">hexo ghexo server</code></pre><p>或者简写:<code>hexo s</code><br>然后浏览器打开<code>http://localhost:4000/</code>，就可以看到我们的博客啦，效果如下：<br><img src="3.png" alt="本地搭建Hexo预览" title="本地搭建Hexo预览"><br></p><h3 id="注册Github账号创建个人仓库"><a href="#注册Github账号创建个人仓库" class="headerlink" title="注册Github账号创建个人仓库"></a>注册Github账号创建个人仓库</h3><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><h4 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h4><p>打开<code>https://github.com/</code>，新建一个项目仓库<code>New repository</code>，如下所示：<br><img src="4.png" alt="注册Github账号" title="注册Github账号"><br><br>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，<code>README</code>初始化也要勾上。<br><img src="5.png" alt="创建仓库" title="创建仓库"><br>要创建一个和你用户名相同的仓库，后面加<code>.http://github.io</code>，只有这样，将来要部署到<code>GitHub page</code>的时候，才会被识别，也就是<code>http://xxxx.github.io</code>，其中<code>xxx</code>就是你注册<code>GitHub</code>的用户名。例如我的：<code>http://lingzhifeng.github.io</code>。</p><h4 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h4><p>生成SSH添加到GitHub，连接Github与本地。右键打开<code>git bash</code>，然后输入下面命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"yourname"</span><span class="token function">git</span> config --global user.email <span class="token string">"youremail"</span></code></pre><p>这里的<code>yourname</code>输入你的<code>GitHub用户名</code>，<code>youremail</code>输入你<code>GitHub的邮箱</code>。这样GitHub才能知道你是不是对应它的账户。例如我的：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"shw2018"</span><span class="token function">git</span> config --global user.email <span class="token string">"hwsun@std.uestc.edu.cn"</span></code></pre><p>可以用以下两条，检查一下你有没有输对</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email</code></pre><p>然后创建SSH,一路回车，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的<code>私人秘钥</code>，不能给别人看的，<code>id_rsa.pub</code>是<code>公共秘钥</code>，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail"</span></code></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹，如果是linux系统你要输入<code>ls -a</code>才能看到这个文件夹。或者git bash中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。切记一个字符也不能少也不能多，哪怕是空格也不行。打开github，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。如图：<br><img src="6.png" alt="上传公钥" title="上传公钥"><br>在git bash输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。<br><img src="7.png" alt="验证连接" title="验证连接"><br></p><h4 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h4><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置：</p><pre class=" language-Yml"><code class="language-Yml">deploy:  type: git  repository: https://github.com/lingzhifeng/lingzhifeng.github.io  branch: master</code></pre><p><code>repository</code>修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy</code></pre><p>其中<code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code>顾名思义，生成静态文章，可以用<code>hexo g</code>缩写，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写。</p><blockquote><p>注意<code>deploy</code>时可能要你输入<code>username</code>和<code>password</code>。</p></blockquote><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code>这个网站看到你的博客了！！<br><img src="8.png" alt="部署成功" title="部署成功"><br></p><h3 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h3><p>现在你的个人网站的地址是<code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><blockquote><p>不过，这一步不是必要的，如果目前还不想买域名可以先跳过，继续看后面的，以后想买域名了在还看这块</p></blockquote><p>首先你得购买一个专属域名，xx云都能买，看你个人喜好了。这篇以腾讯云为例，腾讯云官网购买：<br><img src="9.png" alt="腾讯云官网买域名" title="腾讯官网买域名"><br><br>然后实名认证后进入腾讯云控制台，点云解析进去，找到你刚买的域名，点进去添加两条解析记录，如下图所示：<br><img src="10.png" alt="腾讯云控制台" title="腾讯云控制台"><br><br>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：<br><img src="11.png" alt="github绑域名" title="github绑域名"><br><br>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\Study\MyBlog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g、hexo d</code>上传到github。过不了多久，再打开你的浏览器，输入你自己的专属域名，就可以看到搭建的网站啦！</p><h3 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h3><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。然后输入<code>hexo new post "article title"</code>，新建一篇文章。然后打开<code>D:\Study\MyBlog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。你可以会直接在<code>vscode</code>里面编写<code>markdown</code>文件，可以实时预览，也可以用用其他编辑md文件的软件的工具编写。编写完<code>markdown</code>文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的<code>github.io</code>主页就能看到发布的文章啦。</p><p>到这儿基本第一部分就完成了，已经完整搭建起一个比较简陋的个人博客了，接下来我们就可以对我们的博客进行个性化定制了。</p><h2 id="第二部分-定制"><a href="#第二部分-定制" class="headerlink" title="第二部分 定制"></a>第二部分 定制</h2><p>我们要定制自己的博客的话，首先就要来了解一下Hexo博客的一些目录和文件的作用，以及如何平滑更换漂亮的主题模板并加入自己的定制源代码实现个性化定制</p><h3 id="Hexo相关目录文件"><a href="#Hexo相关目录文件" class="headerlink" title="Hexo相关目录文件"></a>Hexo相关目录文件</h3><h4 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h4><p>从上图可以看出，博客的目录结构如下：</p><pre class=" language-Yml"><code class="language-Yml">- node_modules- public- scaffolds- source    - _data    - _posts    - about    - archives    - categories    - friends    - tags- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。我们平时写文章只需要关注<code>source\_posts</code>这个文件夹就行了。</p><h3 id="hexo基本配置"><a href="#hexo基本配置" class="headerlink" title="hexo基本配置"></a>hexo基本配置</h3><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置描述</a>。</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><p>参数描述:<code>title</code>-网站标题、<code>subtitle</code>-网站副标题、<code>description</code>-网站描述、<code>author</code>-您的名字、<code>language</code>-网站使用的语言、<code>timezone</code>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>,<code>Japan</code>,和<code>UTC</code>。其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><p>参数描述：<code>url</code>-网址、<code>root</code>-网站根目录、<code>permalink</code>-文章的永久链接格式、<code>permalink_defaults</code>-永久链接中各部分的默认值。</p><ul><li>在这里，你需要把url改成你的网站域名。</li><li>permalink，也就是你生成某个文章时的那个链接格式。</li></ul><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。<br>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 永久链接 。</p><blockquote><p>参数结果</p><ul><li>:year/:month/:day/:title/<br>2019/08/10/hello-world</li><li>:year-:month-:day-:title.html<br>2019-08-10-hello-world.html </li><li>:category/:title{foo,bar}<br>{foo,bar}/hello-world</li></ul></blockquote><p>再往下翻，中间这些都默认就好了。</p><pre class=" language-Yml"><code class="language-Yml">theme: landscap</code></pre><p><code>theme</code>就是选择什么主题，也就是在<code>themes</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>themes</code>文件夹下，再修改这个主题参数就可以了。</p><h4 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h4><p><code>Front-matter</code>是md文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class=" language-Yml"><code class="language-Yml">title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44</code></pre><p>上面这个是预先定义的参数，您可在模板中使用这些参数值并加以利用。<br>参数描述：<code>layout</code>-布局、<code>title</code>-标题、<code>date</code>-建立日期、<code>updated</code>-更新日期、<code>comments</code>-开启文章的评论功能、<code>tags</code>-标签（不适用于分页）、<code>categories</code>-分类（不适用于分页）、<code>permalink</code>-覆盖文章网址。<br>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说Foo，Bar不等于Bar，Foo；而标签没有顺序和层次。</p><pre class=" language-Yml"><code class="language-Yml">---title: Hexo+Github博客搭建记录date: 2019-08-10 21:44:44author: So Coldimg: /medias/banner/7.jpgcoverImg: /medias/banner/7.jpgtop: truecover: truetoc: truepassword: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110mathjax: truesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要tags:- Hexo- Github- 博客categories:- 软件安装与配置---</code></pre><h4 id="layout-布局"><a href="#layout-布局" class="headerlink" title="layout(布局)"></a>layout(布局)</h4><h5 id="post-默认布局"><a href="#post-默认布局" class="headerlink" title="post(默认布局)"></a>post(默认布局)</h5><p>当你每一次使用代码</p><pre class=" language-bash"><code class="language-bash">hexo new XXX</code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。Hexo有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。而new这个命令其实是：</p><pre class=" language-html"><code class="language-html">hexo new [layout] "title"</code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><p>如果你想另起一页，那么可以使用</p><pre class=" language-bash"><code class="language-bash">hexo new page newpage</code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<code>http://xxx.xxx/newpage</code>。</p><h5 id="draft"><a href="#draft" class="headerlink" title="draft"></a>draft</h5><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class=" language-bash"><code class="language-bash">hexo new draft newdraft</code></pre><p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class=" language-bash"><code class="language-bash">hexo server --draft</code></pre><p>在本地端口中开启服务预览。<br>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre class=" language-bash"><code class="language-bash">hexo publish draft newdraft</code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>我们在了解Hexo博客文件基础之后，知道主题文件就放在<code>themes</code>文件下，那么我们就可以去Hexo官网下载喜欢的主题，复制进去然后修改参数即可。网上大多数主题都是github排名第一的Next主题，但是我个人不是很喜欢，我在网上看到一个主题感觉还不错：<code>hexo-theme-matery</code>，地址在<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">传送门</a>。这个主题看着比较漂亮，并且响应式比较友好，点起来很舒服，功能也比较很多。</p><blockquote><p>当然，人各有异，这个主题风格也不一定是你喜欢，那么你也可以跟着这教程类似的方法替换成你喜欢的就行了。<br><strong>特性：</strong></p></blockquote><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 Banner 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li>词云的标签页和雷达图的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 MathJax</li><li>TOC 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li>Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk）</li><li>集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>他的介绍文档写得非常的详细，还有中英文两个版本。</li></ul><p>效果图如下：<br><img src="12.png" alt="Hexo主题Matery效果图" title="Hexo主题Matery效果图"><br><br>首先先按照文档教程安装一遍主题，然后是可以正常打开的，如果你是一般使用的话，基本没啥问题了。不过有些地方有些地方可以根据你自己的习惯和喜好修改一下， 下面记录一下我这个博客修改了的一些地方。</p><h4 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h4><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class=" language-Json"><code class="language-Json">---title: {{ title }}date: {{ date }}author:img:coverImg:top: falsecover: falsetoc: truemathjax: falsepassword:summary:tags:categories:---</code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h4 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h4><p>原来的主题没有404页面，我们加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class=" language-Json"><code class="language-Json">title: 404date: 2019-08-5 16:41:10type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("</code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="“关于”页面增加简历（可选）"><a href="#“关于”页面增加简历（可选）" class="headerlink" title="“关于”页面增加简历（可选）"></a>“关于”页面增加简历（可选）</h4><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class="card"&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('myCV')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h3 id="数学公式渲染和代码高亮"><a href="#数学公式渲染和代码高亮" class="headerlink" title="数学公式渲染和代码高亮"></a>数学公式渲染和代码高亮</h3><h4 id="解决mathjax与代码高亮的冲突"><a href="#解决mathjax与代码高亮的冲突" class="headerlink" title="解决mathjax与代码高亮的冲突"></a>解决mathjax与代码高亮的冲突</h4><p>如果你按照教程安装了代码高亮插件<code>hexo-prism-plugin</code>，单独使用是没有问题的，但如果你又使用了<code>mathjax</code>，并且按照网上教程，安装<code>kramed</code>插件并修改了js文件里的正则表达式（为了解决<code>markdown</code>和<code>mathjax</code>的语法冲突），那你的代码就无法高亮了。解决方法很简单，别用<code>kramed</code>插件了，还用原来自带的<code>marked</code>插件，直接改它的正则表达式就行了。</p><h4 id="加数学公式显示"><a href="#加数学公式显示" class="headerlink" title="加数学公式显示"></a>加数学公式显示</h4><p>打开<code>/themes/matery/layout</code>中的<code>post.ejs</code>文件，在最下方粘贴如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config<span class="token punctuation">=</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于<code>markdown</code>语法与<code>mathjax</code>语法存在冲突，所以还需要修改源文件。打开<code>/node_modules/marked/lib</code>中的<code>marked.js</code>文件，第<code>539</code>行的<code>escape:</code>处替换成：</p><pre class=" language-Js"><code class="language-Js">escape: /^$[`*\[\]()#$+\-.!_>])/</code></pre><p>第<code>553</code>行的<code>em:</code>处替换成：</p><pre class=" language-Js"><code class="language-Js">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong><br>举个例子:<br>行内公式：$y = f(x)$<br>代码：</p><pre class=" language-Tex"><code class="language-Tex">$y = f(x)$</code></pre><p>行间公式：</p><p>\[y = {f_{ {g_1}}}(x)\]</p><p>代码：</p><pre class=" language-Tex"><code class="language-Tex">\\[y = {f_{ {g_1}}}(x)\\]</code></pre><p>注意上面花括号之间有空格！</p><h4 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h4><p>修改<code>/themes/matery/layout/_partial</code>中的<code>footer.ejs</code>，在最后加上：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span>javascript</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)        year - 作为date对象的年份，为4位年份值        month - 0-11之间的整数，做为date对象的月份        day - 1-31之间的整数，做为date对象的天数        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数        minutes - 0-59之间的整数，做为date对象的分钟数        seconds - 0-59之间的整数，做为date对象的秒数        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//北京时间2018-2-13 00:00:00</span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span>        <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/</span>    <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后在合适的地方（比如<code>copyright</code>声明后面）加上下面的代码就行了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sitetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h4 id="修改不蒜子初始化计数"><a href="#修改不蒜子初始化计数" class="headerlink" title="修改不蒜子初始化计数"></a>修改不蒜子初始化计数</h4><p>因为不蒜子至今未开放注册，所以没办法在官网修改初始化，只能自己动手了。和上一条一样，我们在<code>/themes/matery/layout/_partial</code>里的<code>footer.ejs</code>文件最后加上：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> int <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fixCount<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 50ms周期检测函数</span>        <span class="token keyword">var</span> pvcountOffset <span class="token operator">=</span> <span class="token number">80000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化首次数据</span>        <span class="token keyword">var</span> uvcountOffset <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fixCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> pvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_container_site_pv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#busuanzi_value_site_uv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> uvcountOffset<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加上初始数据</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 停止检测</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后把上面几行有段代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>修改为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其实就是增加了两个<code>style='display:none'</code>而已。</p><h4 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h4><p>其实三步就行了，不用像网上有些教程那么复杂。</p><h5 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><h5 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-shizuku</code></pre><p>这里的动漫模型可以改，只需要下载对应模型就行了，你可以官方仓库去看有哪些模型，下载你喜欢的就行。</p><h5 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h5><p>在根目录配置文件中添加如下代码：</p><pre class=" language-yml"><code class="language-yml">live2d:    enable: true    scriptFrom: local    pluginRootPath: live2dw/    pluginJsPath: lib/    pluginModelPath: assets/    tagMode: false    log: false    model:        use: live2d-widget-model-shizuku    display:        position: right        width: 150        height: 300    mobile:        show: false    react:        opacity: 0.7</code></pre><p>然后<code>hexo g</code>再<code>hexo s</code>就能预览出效果了，但是有个注意的地方，这个动漫人物最好不要和不蒜子同时使用，不然不蒜子会显示不出来。至于解决办法后续更新。</p><h5 id="解决动漫人物和不蒜子不能同时使用的bug（2019-08-11）："><a href="#解决动漫人物和不蒜子不能同时使用的bug（2019-08-11）：" class="headerlink" title="解决动漫人物和不蒜子不能同时使用的bug（2019.08.11）："></a>解决动漫人物和不蒜子不能同时使用的bug（2019.08.11）：</h5><p>打开<code>themes\matery\layout\_partial</code>中的<code>footer.ejs</code>，将本站总访问量和访客数的代码改为如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalTraffic)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-heart-o<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        本站总访问量 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.totalNumberOfvisitors)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        人次,<span class="token entity" title="&nbsp;">&amp;nbsp;</span>访客数 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 人.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>变化就在下面两句，将源代码对应字段后面的<code>&lt;/span&gt;</code>写在前面了。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h5 id="又出新Bug"><a href="#又出新Bug" class="headerlink" title="又出新Bug"></a>又出新Bug</h5><p>发现按照上面改了过后，又出现一个新bug：文章头部的阅读次数不显示了，解决办法：（2019.08.11）：<br>打开<code>themes\matery\layout\_partial</code>中的<code>post-detail.ejs</code>，找到对应代码字段：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_page_pv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info-break-policy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-eye fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('readCount')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>:<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>修改为下面的就可以了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.busuanziStatistics</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.busuanziStatistics.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-eye fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('readCount')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>:<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><h4 id="添加评论插件"><a href="#添加评论插件" class="headerlink" title="添加评论插件"></a>添加评论插件</h4><p>由于这个主题自带了<code>gittalk</code>、<code>gitment</code>、<code>valine</code>等评论插件，所以我们只需要对应插件参数就行了，这个博客用的是<code>gittalk</code>，如下：<br><img src="13.png" alt="Gittalk评论插件" title="Gittalk评论插件"><br>当然也可以用其他评论插件，只需要配置对应项就是了，不是自带的可以照着网上的教程自己弄一个，类似的文章有很多，可以搜索关键字就行了。</p><h4 id="添加网易云音乐BGM"><a href="#添加网易云音乐BGM" class="headerlink" title="添加网易云音乐BGM"></a>添加网易云音乐BGM</h4><p>写文章的时候，想插入一段BGM怎么办？<br>其实我们可以借助一些在线音乐的外链播放方式，首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：<img src="14.png" alt="网易云网页版" title="网易云网页版"><br>可能你会遇到问题，比如点击生成外链会提示你由于版权原因，不能生成，那么可以用下面办法目前还有效，不知道后面会不会失效</p><h5 id="查找源代码"><a href="#查找源代码" class="headerlink" title="查找源代码"></a>查找源代码</h5><p>(以 Chrome为例，其他浏览器类似) 打开歌单页面，在“生成外链播放器”上右击，点击审查元素（检查）<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>i</kbd>；</p><h5 id="找到链接路径"><a href="#找到链接路径" class="headerlink" title="找到链接路径"></a>找到链接路径</h5><p>接着找到生成外链播放器这段文字直接双击复制前面的<code>/outchain/2/20707408/</code><br><img src="15.png" alt="找到链接路径" title="找到链接路径"></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>然后在浏览器地址栏修改歌单链接，示例：<code>http://music.163.com/#//outchain/2/20707408/</code>然后就转到外链设置页面了。</p><h5 id="复制Html代码"><a href="#复制Html代码" class="headerlink" title="复制Html代码"></a>复制Html代码</h5><p>复制如下代码：<br><img src="16.png" alt="复制Html代码" title="复制Html代码"><br>粘贴到文章对应位置就行了，为了美观，设置一下居中，具体代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里粘贴刚刚复制的代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="博客音乐板块"><a href="#博客音乐板块" class="headerlink" title="博客音乐板块"></a>博客音乐板块</h4><p>如果我们自己写博客写疲劳了，想放松一下听听歌又不想切出博客主页，那么我们可以自己定制一个博客音乐播放界面，把自己喜欢的歌曲都放进来，这里用到是Aplayer插件，但是歌曲来源需要我们自己定义，但是，因为各大音乐平台，由于版权原因，很多歌曲是不支持外链播放的，难道我们就必须每首歌下载然后上传云空间，再获取词曲封面么？这就比较麻烦了。其实不然，研究了半个小时，我发现可以采取下面的办法，很方便：</p><ul><li>首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在地址栏拿到音乐ID号</li><li>然后通过下面网址：<code>http://music.163.com/song/media/outer/url?id=XXXXXX.mp3</code>，<code>XXXXXX</code>就是歌曲<code>ID</code>号，每一首歌我们只需要换掉这个<code>ID</code>号就行了,就相当于每一首的外链了。</li><li>最后封面图也可以按<kbd>F12</kbd>去找页面元素的链接，填到对应的<code>musics.jason</code>文件中就可以，批量填入，听到好听的歌曲随时更换随时新增，很方便。</li></ul><p>操作如下图：<br><img src="17.png" alt="添加歌曲外链" title="添加歌曲外链"></p><h4 id="增加emoji支持"><a href="#增加emoji支持" class="headerlink" title="增加emoji支持"></a>增加emoji支持</h4><p>为博客新增对<code>emoji</code>表情的支持，使用到了<code>hexo-filter-github-emojis</code>的<code>Hexo</code>插件来支持<code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法<code>::</code>（例如：<code>:smile:</code>、<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在<code>Hexo</code>根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><p>执行<code>hexo clean &amp;&amp; hexo g</code>重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。如下图：<br><img src="18.gif" alt="emoji演示" title="emoji演示"></p><h4 id="Valine评论模块修改"><a href="#Valine评论模块修改" class="headerlink" title="Valine评论模块修改"></a>Valine评论模块修改</h4><p><code>matery</code>主题已经集成<code>Valine</code>评论模块，在主题配置文件<code>.yml</code>中配置相应的字段就行了。<code>enable: true</code>，<code>XXX</code>字段是需要自己注册登录<code>leancloud</code>官网，创建应用然后获取<code>appId</code>和<code>appKey</code>，其他参数根据自己的需求修改就是，如下：</p><pre class=" language-yml"><code class="language-yml">valine:  enable: true  appId: XXXXXXXXXXXXXXXXXXXXX  appKey: XXXXXXXXXXXXXXXXXXXX  notify: true  verify: true  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder</code></pre><p>注意：<code>Valine</code>用在<code>matery</code>主题上有个bug就是第一条评论位置会错位。如下图：<br><img src="19.png" alt="Valine Bug" title="Valine Bug"><br>解决办法：<kbd>F12<kbd>开发者模式，控制台定位bug位置，修改参数，调整对应主题源文件参数，得以解决，如下图示：<br><img src="20.png" alt="定位Bug" title="定位Bug"><br><img src="21.png" alt="解决Bug" title="解决Bug"></kbd></kbd></p><h4 id="添加博客动态标签"><a href="#添加博客动态标签" class="headerlink" title="添加博客动态标签"></a>添加博客动态标签</h4><p>原理就是给博客增加一个事件判断，如下图所示：<br><img src="40.png" alt="添加博客动态标签1" title="添加博客动态标签1"><br><img src="41.png" alt="添加博客动态标签2" title="添加博客动态标签2"><br>打开博客主题文件夹，路径：<code>themes/matery/layout/layout.ejs</code>，在对应位置添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"看不见我🙈~看不见我🙈~"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>            <span class="token string">"(๑•̀ㅂ•́) ✧被发现了～"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后<code>hexo clean &amp;&amp; hexo g</code>即可。</p><h4 id="添加鼠标点击烟花爆炸效果"><a href="#添加鼠标点击烟花爆炸效果" class="headerlink" title="添加鼠标点击烟花爆炸效果"></a>添加鼠标点击烟花爆炸效果</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>fireworks.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/footer.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.fireworks.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fireworks<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//cdn.bootcss.com/animejs/2.2.0/anime.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/fireworks.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 鼠标点击烟花爆炸动效fireworks:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/fireworks.js" target="_blank" rel="noopener">Download</a>        <span class="up">fireworks.js</span>        <span class="down">烟花特效</span> </div><h4 id="添加页面樱花飘落动效"><a href="#添加页面樱花飘落动效" class="headerlink" title="添加页面樱花飘落动效"></a>添加页面樱花飘落动效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>sakura.js</code>，并添加如下代码,然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.sakura.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/sakura.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-html"><code class="language-html"># 页面樱花飘落动效sakura:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/sakura.js" target="_blank" rel="noopener">Download</a>        <span class="up">sakura.js</span>        <span class="down">樱花动效</span>        </div><h4 id="添加鼠标点击文字特效"><a href="#添加鼠标点击文字特效" class="headerlink" title="添加鼠标点击文字特效"></a>添加鼠标点击文字特效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>wenzi.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.wenzi.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/wenzi.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 页面鼠标点击文字特效wenzi:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/wenzi.js" target="_blank" rel="noopener">Download</a>        <span class="up">wenzi.js</span>        <span class="down">文字特效</span> </div><h4 id="添加页面雪花飘落动效"><a href="#添加页面雪花飘落动效" class="headerlink" title="添加页面雪花飘落动效"></a>添加页面雪花飘落动效</h4><p>在<code>/themes/matery/source/js</code>新建文件<code>xuehuapiaoluo.js</code>，并添加如下代码。然后在<code>/themes/matery/layout/_partial/head.ejs</code>中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.xuehuapiaoluo.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>    <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>'<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/xuehuapiaoluo.js"</span><span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>');    }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 页面樱花飘落动效xuehuapiaoluo:  enable: true</code></pre><div class="Donw_socold">        <a id="id" download="filename" href="http://49.235.106.229/js/xuehuapiaoluo.js" target="_blank" rel="noopener">Download</a>        <span class="up">xuehuapiao.js</span>        <span class="down">雪花特效</span> </div><h4 id="添加博客天气插件"><a href="#添加博客天气插件" class="headerlink" title="添加博客天气插件"></a>添加博客天气插件</h4><p>在搜寻插件的过程中无意间用 google 搜到的一个网站，使用非常简单，在这里附上插件添加的方法：<br><strong>中国天气网：</strong><a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plugin/pc</a><br>选择<strong>自定义插件</strong>—&gt;<strong>自定义样式</strong>——&gt;<strong>生成代码</strong>，然后会生成这样一段代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Weather Widget --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'your FID'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/float/static/js/r.js?v<span class="token punctuation">=</span>1111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在<code>/themes/matery/source/layout/_widget</code>新建文件<code>weather.ejs</code>，把上面生成的代码添加进入,可以设置只有桌面端显示,如下修改:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 天气接口  洪卫 shw2018 add 2019.09.09 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1tFpFZ5Mtj'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;script type="text/javascript" src="https://apip.weatherdt.com/float/static/js/r.js?v=1111">&lt;/script> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span>  <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="https://apip.weatherdt.com/float/static/js/r.js?v=1111">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后在<code>/themes/matery/layout/_partial/layout.ejs</code>中添加如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 天气接口控件  洪卫 shw2018 add <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">09</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>weather<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/weather'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在<code>主题配置文件 .yml</code>中配置:</p><pre class=" language-yml"><code class="language-yml"># 天气接口插件weather:  enable: true</code></pre><p>展示效果可以参考我的主页<br>当然,如果你不想搞这么复杂,可以直接将下面代码插入<code>/themes/matery/layout/_partial/layout.ejs</code>中即可使用:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'1tFpFZ5Mtj'</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/float/static/js/r.js?v<span class="token punctuation">=</span>1111<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="修复-Valine-头像不显示问题"><a href="#修复-Valine-头像不显示问题" class="headerlink" title="修复 Valine 头像不显示问题"></a>修复 Valine 头像不显示问题</h4><p>关于头像显示问题，先去注册<code>Gravatar</code>，之前看文档说是七天的同步时间，结果一直也没有显示头像，检查查看头像链接，发现把<code>&amp;v=1.3.x</code>去掉就可以了，于是下载<code>js</code>文件<code>valine</code>，下载后然后编辑，搜索关键字<code>&amp;v=</code>，找到<code>g.params=”?d=”+i.indexOf(a&gt;-1?a:”mp”)+”&amp;v=”+o+d</code>，将<code>"&amp;v="+o+d</code>删除即可，然后在<code>Gravatar</code>拿到头像的<code>url</code>填上去就行了：</p><pre class=" language-yml"><code class="language-yml">valine:  enable: true  appId:  appKey:  notify: true  verify: true  visitor: true  # avatar: 'mp' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  avatar: https://s.gravatar.com/avatar/0007991f99268c04f1aa4cdd9bea93b4?s=80  pageSize: 10  placeholder: '没有Github账号的在这里留言评论～' # Comment Box placeholder</code></pre><p>原因就是链接后跟了个<code>&amp;v=1.3.x</code>，解决就是将这段删掉就可以了，具体到<code>Valine.mini.js</code>文件就是删掉<code>&amp;v="+o+d</code>即可。</p><h4 id="增加二级菜单"><a href="#增加二级菜单" class="headerlink" title="增加二级菜单"></a>增加二级菜单</h4><p>都知道，我们标题栏宽度有限，我们项目一多了，就放不下了，这时候你肯定就需要一个二级菜单来拆分一下项目，既可以减少标题栏项目数，使之更加清爽，又可以间项目分类，逻辑清晰。<br>好了，如果你用的<code>matery</code>主题，那么废话不多说，直接上教程，其实需要修改的就四个地方：<code>matery.css/matery.js/navgation.ejs/mobile-nav.ejs</code></p><h5 id="先找文件夹"><a href="#先找文件夹" class="headerlink" title="先找文件夹"></a>先找文件夹</h5><p>首先在<code>/themes/matery/layout/_partial</code>中找到<code>mobile-nav.ejs</code>，找到下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成下面的：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性 洪卫 shw2018 modify <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">17</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"menu-list mobile-menu-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-nav-item"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-fw fa-link"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"m-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>                      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                           <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"left: 25px; position: absolute;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                       <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                       <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>githubLink <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-github-square fa-fw"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>githubLink<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h5 id="修改第二处"><a href="#修改第二处" class="headerlink" title="修改第二处"></a>修改第二处</h5><p>在<code>/themes/matery/layout/_partial</code>中找到<code>navagtion.ejs</code>，找到下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><p>替换成下面的：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 支持二级菜单特性 洪卫 shw2018 modify <span class="token number">2019.09</span><span class="token punctuation">.</span><span class="token number">17</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">"mobile-nav"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidenav-trigger button-collapse"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-navicon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right nav-menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hide-on-med-and-down nav-item"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.menu[key].url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- theme.menu[key].icon %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> key <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-down"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sub-nav menus_item_child "</span><span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> childrenLink <span class="token keyword">of</span> theme<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span>                  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for(childrenLink.url)%>"</span> <span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> childrenLink<span class="token punctuation">.</span>icon<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                      <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa &lt;%- childrenLink.icon %>"</span> style<span class="token operator">=</span><span class="token string">"margin-top: -20px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#searchModal"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-trigger waves-effect waves-light"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>i id<span class="token operator">=</span><span class="token string">"searchIcon"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-search"</span> title<span class="token operator">=</span><span class="token string">"&lt;%= __('search') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre><h5 id="该第三处"><a href="#该第三处" class="headerlink" title="该第三处"></a>该第三处</h5><p>在<code>/themes/matery/source/css</code>中找到<code>matery.css</code>，在最后添加下面这段代码：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 二级菜单样式定义 洪卫 shw2018 add 2019.09.17 */</span><span class="token selector"><span class="token class">.nav-menu</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">77</span>px<span class="token punctuation">;</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">140</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-menu</span> li <span class="token class">.sub-nav</span> li a </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">34</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">138</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-show</span> i<span class="token attribute">[aria-hidden=true]</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">20</span>px -<span class="token number">4</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">filter</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> sub_menus <span class="token number">.3</span>s <span class="token number">.1</span>s ease both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.menus_item_child</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* position: relative; */</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">245</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-o-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.3</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span> <span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-show</span>>a<span class="token pseudo-element">:before</span>,<span class="token class">.m-nav-item</span>>a<span class="token pseudo-class">:hover</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.m-nav-item</span> <span class="token class">.m-icon</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">65</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.nav-item</span> li<span class="token pseudo-class">:hover</span> a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="改第四处"><a href="#改第四处" class="headerlink" title="改第四处"></a>改第四处</h5><p>在<code>/themes/matery/source/js</code>中找到<code>matery.js</code>，在最后一个<code>});</code>前添加下面这段代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 增加二级菜单功能 洪卫 shw2018 add 2019.09.17</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav-menu>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.nav-item.nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item>a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'display'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.m-nav-item.m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'m-nav-show'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>在<code>主题配置文件.yml</code>修改标题栏内容，按下面格式更改:</p><pre class=" language-yml"><code class="language-yml">  标题一级:    url: /XXX    icon: fa-XXXX    children:      -        name: 标题二级1        url: /XXX/XXX        icon: fa-XXXX      -        name: 标题二级2        url: /XXX/XXX        icon: fa-XXXX</code></pre><h5 id="建立存放目录"><a href="#建立存放目录" class="headerlink" title="建立存放目录"></a>建立存放目录</h5><p>在<code>source</code>文件夹新建对应的标题目录，并放<code>index.md</code>模板就行了。到这一步就大功告成了，快去体验吧。</p><div class="Donw_socold">        <a id="id" download="filename" href="https://baidu.com" target="_blank" rel="noopener">点我下载</a>        <span class="up">下提示矿框</span>        <span class="down">上提示框</span>        </div><h2 id="第三部分-优化"><a href="#第三部分-优化" class="headerlink" title="第三部分 优化"></a>第三部分 优化</h2><p>hexo添加各种优化功能，比如SEO优化等。</p><h3 id="网站SEO优化"><a href="#网站SEO优化" class="headerlink" title="网站SEO优化"></a>网站SEO优化</h3><p>网站推广是一个比较烦人的事情，特别是对于专心搞技术的来说，可能就不是很擅长，那么怎么才能让别人知道我们网站呢？也就是说我们需要想办法让别人通过搜索就可以搜索到博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好。</p><blockquote><p><strong>SEO</strong>是由英文<code>Search Engine Optimization</code>缩写而来， 中文意译为“<strong>搜索引擎优化</strong>”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><h4 id="让百度收录你的站点"><a href="#让百度收录你的站点" class="headerlink" title="让百度收录你的站点"></a>让百度收录你的站点</h4><p>首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src="22.png" alt="查看是否被搜索引擎收录" title="查看是否被搜索引擎收录"></p><h5 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h5><p>登录百度站长搜索资源平台：<code>http://zhanzhang.baidu.com</code>，只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击<a href="http://zhanzhang.baidu.com/site/siteadd" target="_blank" rel="noopener">添加网站</a>然后输入你的站点地址。</p><blockquote><p>注意，这里需要输入我们自己购买的域名,不能使用<code>xxx.github.io</code>之类的二级域名.因为github是不允许百度的<code>spider</code>（蜘蛛）爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名。<br><img src="23.png" alt="向百度站长提交自己的网站" title="向百度站长提交自己的网站"><br>在填完网址选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：</p></blockquote><ul><li>文件验证。</li><li>html标签验证</li><li><strong>CNAME解析验证</strong>（推荐使用）</li></ul><p><img src="24.png" alt="验证网站所有权" title="验证网站所有权"><br>其实使用哪一种方式都可以，都是比较简单的。</p><blockquote><p>但是一定要注意，使用文件验证文件存放的位置需要放在<code>sourc</code>文件夹下，如果是<code>html</code>文件那么hexo就会将其编译，所以必须要在<code>html</code>头部加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是<code>txt</code>格式的就不需要）<br>其他两种方式也是很简单的，个人<code>推荐文件验证</code>和<code>CNAME验证</code>，<code>CNAME验证</code>最为简单，只需加一条解析就好~<br><img src="25.png" alt="添加解析记录" title="添加解析记录"><br><img src="26.png" alt="验证通过" title="验证通过"></p></blockquote><h5 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h5><p>我们需要使用npm自动生成网站的<code>sitemap</code>，然后将生成的<code>sitemap</code>提交到百度和其他搜索引擎</p><h6 id="安装sitemap插件"><a href="#安装sitemap插件" class="headerlink" title="安装sitemap插件"></a>安装sitemap插件</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save</code></pre><h6 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h6><p>在<code>根目录配置文件.yml</code>中修改<code>url</code>为你的站点地址</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'# url: https://lingzhifeng.github.io/url: https://socold.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><p>执行完<code>hexo g</code>命令之后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml</code>文件，可以通过：<code>https://socold.com/baidusitemap.xml</code>, 查看该文件是否生成，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p><h5 id="向百度提交链接"><a href="#向百度提交链接" class="headerlink" title="向百度提交链接"></a>向百度提交链接</h5><p>然后我们就可以将我们生成的<code>sitemap</code>文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和<code>sitemap</code></p><blockquote><p>如何选择链接提交方式</p><ul><li>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap</code>中，然后将<code>sitemap</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li><li>手动提交：一次性提交链接给百度，可以使用此种方式。</li></ul></blockquote><p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法。<strong>从效率上来说：</strong><br><strong>主动推送</strong>&gt;<strong>自动推送</strong>&gt;<strong>sitemap</strong><br><img src="27.png" alt="链接提交" title="链接提交"></p><h6 id="设置主动推送"><a href="#设置主动推送" class="headerlink" title="设置主动推送"></a>设置主动推送</h6><p>安装插件<code>hexo-baidu-url-submit</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save</code></pre><p>然后再根目录的配置文件中新增字段</p><pre class=" language-yml"><code class="language-yml">baidu_url_submit:  count: 80             # 提交最新的一个链接  host: socold.com # 在百度站长平台中注册的域名  token: xxxxxxxxxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt  # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>再加入新的<code>deploy</code>：</p><pre class=" language-bash"><code class="language-bash">deploy:- type: baidu_url_submitter</code></pre><p>如图所示：<br><img src="28.png" alt="配置主动推送插件" title="配置主动推送插件"></p><blockquote><p>注意,这里多个<code>type</code>的写法应该这么写<code>- type</code>,前面那个<code>type</code>是我推送到<code>Github</code>与<code>Coding</code>的page页面的配置,后面再讲这个。</p></blockquote><p>密钥的获取位置在网页抓取中的链接提交这一块,如下所示:<br><img src="29.png" alt="获取token" title="获取token"><br>这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了。推送成功时,会有如下终端提示：<br><img src="30.png" alt="主动推送成功" title="主动推送成功"><br>各种不同的推送反馈字段说明在这里查看,一般来说,推送失败基本都是地址不相符造成的,我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h6 id="设置自动推送"><a href="#设置自动推送" class="headerlink" title="设置自动推送"></a>设置自动推送</h6><p>在主题配置文件下设置,将<code>baidu_push</code>设置为<code>true</code>:</p><pre class=" language-yml"><code class="language-yml"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true</code></pre><p>然后主题文件目录加入下面代码，一般在目录<code>/themes/matery/layout/_partial</code>中的<code>head.ejs</code>中加入下面JS代码（有可能你的目录不是这样，原理类似），这样全站都有了：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>baidu_push<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>这样每次访问博客中的页面就会自动向百度提交<code>sitemap</code></p><h6 id="sitemap方式"><a href="#sitemap方式" class="headerlink" title="sitemap方式"></a>sitemap方式</h6><p>将我们上一步生成的<code>sitemap</code>文件提交到百度就可以了~<br><img src="31.png" alt="将sitemap提交到百度" title="将sitemap提交到百度"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果。在百度搜索<code>site:sunhwee.com</code>已经可以搜索到结果<br><img src="32.png" alt="站点已被百度收录" title="站点已被百度收录"></p><h4 id="让google收录你的站点"><a href="#让google收录你的站点" class="headerlink" title="让google收录你的站点"></a>让google收录你的站点</h4><h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的。<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">google站点平台：</a><br><a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">https://www.google.com/webmasters/</a></p><ul><li>注册账号</li><li>验证站点</li><li>提交sitemap</li></ul><blockquote><p>向<code>google</code>添加<code>sitemap</code>后: 进入<code>Google Search Console</code>-<code>抓取</code>-<code>站点地图</code>,点击<code>「添加/测试站点地图」</code>,输入你的博客网址. 若无报错则站点地图提交成功</p></blockquote><p><img src="35.png" alt="sitemap提交成功" title="sitemap提交成功"><br>一步一步来就好，过不了过久就可以被google收录了<br><img src="36.png" alt="站点已被google收录" title="站点已被google收录"><br><img src="37.png" alt="站点已被google收录" title="站点已被google收录"><br><img src="38.png" alt="站点已被google收录" title="站点已被google收录"></p><h6 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt:"></a>提交 robots.txt:</h6><p><code>robots.txt</code>是一种存放于网站根目录下的<code>ASCII</code>编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。<code>robots.txt</code>放在博客目录下的<code>source</code>文件夹中，博客生成后在站点目录<code>/public/</code>下。我的<code>robots.txt</code>文件内容如下：</p><pre class=" language-yml"><code class="language-yml">User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /about/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/</code></pre><p><code>robots.txt</code>文件更新至网站后可进入<strong>Google Search Console</strong>-<strong>抓取</strong>-<strong>robots.txt</strong>测试工具进行测试。这里部分参考自Hexo博客搜索<a href="https://fedoryx.github.io/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2-SEO-%E4%BC%98%E5%8C%96-%E8%B0%B7%E6%AD%8C%E7%AF%87/" target="_blank" rel="noopener">SEO优化-谷歌篇</a></p><h4 id="让其他搜索引擎收录你的站点"><a href="#让其他搜索引擎收录你的站点" class="headerlink" title="让其他搜索引擎收录你的站点"></a>让其他搜索引擎收录你的站点</h4><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的，大家就自行选择添加哈，这里就不再赘述了~</p><h4 id="优化你的url"><a href="#优化你的url" class="headerlink" title="优化你的url"></a>优化你的url</h4><p>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：<code>sitename/year/mounth/day/title</code>四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章url</p><h5 id="改成英文标题"><a href="#改成英文标题" class="headerlink" title="改成英文标题"></a>改成英文标题</h5><p>我们可以将url直接改成<code>sitename/title</code>的形式，并且<code>title</code>最好是用英文，在根目录的配置文件下修改<code>permalink</code>如下：</p><pre class=" language-yml"><code class="language-yml">url: https://socold.com root: /permalink: :title.htmlpermalink_defaults:</code></pre><h5 id="安装插件用中文拼音标题"><a href="#安装插件用中文拼音标题" class="headerlink" title="安装插件用中文拼音标题"></a>安装插件用中文拼音标题</h5><p>插件<code>hexo-abbrlink</code>实现了这个功能，它将原来的URL地址重新进行了进制转换和再编码。执行一下命令以安装<code>hexo-abbrlink</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>配置博客<code>根目录下的_config.yml</code>文件。</p><pre class=" language-yml"><code class="language-yml"># permalink: :title/permalink: archives/:abbrlink.htmlabbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: hex    # 进制：dec(default) and hex</code></pre><p>运行<code>hexo clean</code>和<code>hexo g</code>命令来重新生成文件看看，可以清楚的看到，URL结构成功变为了3层。</p><h4 id="其他seo优化"><a href="#其他seo优化" class="headerlink" title="其他seo优化"></a>其他seo优化</h4><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上<code>keyword</code>和<strong>描述</strong>。<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置<code>nofollow</code>标签，避免<code>spider</code>爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为<code>spider</code>会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样<code>spider</code>是很有可能爬到我们中的站点的，so….</p><ul><li>网站外链的推广度、数量和质量</li><li>网站的内链足够强大</li><li>网站的原创质量</li><li>网站的年龄时间</li><li>网站的更新频率（更新次数越多越好）</li><li>网站的服务器</li><li>网站的流量：流量越高网站的权重越高</li><li>网站的关键词排名：关键词排名越靠前，网站的权重越高</li><li>网站的收录数量：网站百度收录数量越多，网站百度权重越高</li><li>网站的浏览量及深度：用户体验越好，网站的百度权重越高</li></ul><h3 id="优化代码块样式"><a href="#优化代码块样式" class="headerlink" title="优化代码块样式"></a>优化代码块样式</h3><p>由于代码高亮插件<code>prism_plugin</code>的样式没有行号显示和代码块整体复制功能，不是很方便，为了优化观感和易用性，我们可以对其进行修改：</p><h4 id="给代码块开启行号"><a href="#给代码块开启行号" class="headerlink" title="给代码块开启行号"></a>给代码块开启行号</h4><p>我们在<code>配置文件.yml</code>中找到<code>prism_plugin</code>配置项<code>line_number: false（# default false）</code>改为<code>true</code>，开启行号，但是在我们这个<code>matery</code>主题中中是无效的，有bug需要改一下<code>matery.css</code>样式参数,在第95行位置将：</p><pre class=" language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>改为：</p><pre class=" language-css"><code class="language-css"><span class="token selector">pre </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">1.5</span>rem <span class="token number">3.3</span>rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>rem <span class="token number">0</span> <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#272822</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0.35</span>rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注释掉紧接着的<code>code</code>代码块里面的<code>font-size</code>项，如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">code </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Inconsolata, Monaco, Consolas, <span class="token string">'Courier New'</span>, Courier, monospace<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*font-size: 0.91rem;*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e96900</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f8f8f8</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>好了这下可以显示行号了，如图：<br><img src="39.png" alt="显示行号" title="显示行号"></p><h4 id="添加代码块复制功能"><a href="#添加代码块复制功能" class="headerlink" title="添加代码块复制功能"></a>添加代码块复制功能</h4><h3 id="优化网站加载速度"><a href="#优化网站加载速度" class="headerlink" title="优化网站加载速度"></a>优化网站加载速度</h3><h4 id="优化图片加载"><a href="#优化图片加载" class="headerlink" title="优化图片加载"></a>优化图片加载</h4><p><code>issue</code>问题：优化网站加载逻辑问题：图片最后加载，加入图片懒加载方法。</p><p><code>hexo-lazyload-image</code>的作用原理是讲你博客里面<code>img标签</code>的<code>src属性</code>替换为一个<code>loading image</code>，把真实的图片地址放在<code>data-origin</code>属性下面。然后当你的网页翻到那张图片时（也就是图片在窗口中完全可见时），他会有一段js用<code>data-origin</code>的内容替换src，达到懒加载的目的。</p><p>一般情况下懒加载和<code>gallery</code>插件会发生冲突，比如按照我上面所说，最终结果就会变成，可能只有第一张图片在<code>gallery</code>中打开是原图，右翻左翻都会是那张<code>loading image</code>，需要你掌握js，可以修改<code>matery.js</code>里面的内容，甚至可能换一个<code>gallery</code>，比如<code>photosiwpe</code>之类的。</p><p>解决方法：修改<code>/themes/matery/source/js中的matery.js</code>文件</p><p>第103行：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#articleContent, #myGallery'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lightGallery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    selector<span class="token punctuation">:</span> <span class="token string">'.img-item'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启用字幕</span>    subHtmlSelectorRelative<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    showThumbByDefault<span class="token punctuation">:</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">//这句加上</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>后面加上：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再装个插件<code>https://github.com/Troy-Yang/hexo-lazyload-image</code>。在博客<code>根目录配置.yml</code>文件加入对应字段，如下：</p><pre class=" language-yml"><code class="language-yml"># lazyload configuration  2019.08.23lazyload:  enable: true  onlypost: false  loadingImg:     # eg ./images/loading.gif</code></pre><p>好了，这样实现了博客网站的图片懒加载。</p><h4 id="Gulp实现代码压缩"><a href="#Gulp实现代码压缩" class="headerlink" title="Gulp实现代码压缩"></a>Gulp实现代码压缩</h4><p>Gulp实现代码压缩，以提升网页加载速度。</p><h5 id="安装Gulp插件和5个功能模块"><a href="#安装Gulp插件和5个功能模块" class="headerlink" title="安装Gulp插件和5个功能模块"></a>安装Gulp插件和5个功能模块</h5><p>首先我们需要安装Gulp插件和5个功能模块，依次运行下面的两条命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> gulp --save  <span class="token comment" spellcheck="true">#安装gulp</span><span class="token comment" spellcheck="true"># 安装功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save</code></pre><h5 id="建立js文件"><a href="#建立js文件" class="headerlink" title="建立js文件"></a>建立js文件</h5><p>接下来在博客的<code>根目录</code>下新建<code>gulpfile.js</code>文件，并复制下面的内容到文件中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo      <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        watch<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo    <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> hexo      <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        watch<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>    compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>    <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>    <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span>      <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>    unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token punctuation">{</span>    collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>    collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值  &lt;input checked="true"/> ==> &lt;input /></span>    removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值    &lt;input id="" /> ==> &lt;input /></span>    removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>    removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>    removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>    minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>    minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>    minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/uploads 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>    optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number  默认：3  取值范围：0-7（优化等级）</span>    progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>    interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>    multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>  <span class="token string">"build"</span><span class="token punctuation">,</span>  gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    <span class="token string">"clean"</span><span class="token punctuation">,</span>    <span class="token string">"generate"</span><span class="token punctuation">,</span>    <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>    <span class="token string">"compressCss"</span><span class="token punctuation">,</span>    <span class="token string">"compressJs"</span><span class="token punctuation">,</span>    <span class="token string">"compressImage"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>  <span class="token string">"default"</span><span class="token punctuation">,</span>  gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>    <span class="token string">"clean"</span><span class="token punctuation">,</span>    <span class="token string">"generate"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></code></pre><h5 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h5><p>最后<code>hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</code>就可以了。</p><p>注意，很可能你会运行到第三步，也就是运行<code>gulp</code>压缩命令时会报错，如图所示：<br><img src="42.png" alt="Gulp运行错误" title="Gulp运行错误"><br>那是因为<code>gulp</code>安装的本地版本和<code>hexo</code>自带的<code>版本不对应</code>导致，第三步gulp压缩可以用下面命令强制使用本地版本：</p><pre class=" language-bash"><code class="language-bash">node ./node_modules/gulp/bin/gulp.js</code></pre><h4 id="Github-Coding-Pages-双部署"><a href="#Github-Coding-Pages-双部署" class="headerlink" title="Github &amp; Coding Pages 双部署"></a>Github &amp; Coding Pages 双部署</h4><p><code>thub &amp; Coding Pages</code>双部署,对国内,国外用户进行分流访问,以提升网站的访问速度.<code>Github Pages</code>的部署前面已经说了,这里就讲一讲<code>Coding Pages</code>如何部署。其实与<code>Github Pages</code>也类似,先到<code>coding</code>官网注册,创建一个与用户名同名的仓库,添加仓库地址到配置文件中,在<code>根目录_config.yml</code>对应地方添加如下:</p><pre class=" language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git  repo:    github: https://github.com/shw2018/shw2018.github.io.git  # github 仓库地址    coding: https://git.dev.tencent.com/sunhwee/sunhwee.git   # coding 仓库地址  branch: master- type: baidu_url_submitter</code></pre><p>把本地生成<code>SSH公匙</code>添加到<code>Coding</code>这一步看我前面的教程,原理类似.然后<code>hexo clean &amp;&amp;　hexo g &amp;&amp; hexo d</code>部署上去就是了．当然，部署上去后，你需要开启'page`服务.</p><p>你可以在<code>pages</code>设置里面自定义域名，区域名解析控制台，添加两条<code>CNAME</code>记录，将域名指向<code>RepoName.coding.me</code>就可以的，申请<code>ssl</code>证书，强制开启https</p><h5 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题:"></a>可能遇到的问题:</h5><p><strong>coding pages申请ssl证书总是提示：错误</strong></p><p>这里提一句，如果你是<code>github pages</code>和<code>coding pages</code>双部署，用同一个域名的话，可以将<code>xxx.github.io</code>解析成 境外,<code>xxx.coding.me</code>解析成默认,这个时候如果你之前就申请过<code>ssl</code>证书的话，再在<code>coding</code>里面申请<code>ssl证书</code>会一直提示失败,解决办法：</p><blockquote><p>先去域名解析控制台，将境外解析的两条<code>CNAME</code>记录 暂停,过个五六分钟，回到<code>coding</code>点击申请ssl,很快就会提示，申请成功！刚好我过程中遇到了这个问题，所以把它记下来，方便后面的小伙伴看到．</p></blockquote><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><h3 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h3><p>有时候我们想换一台电脑继续写博客，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。不过，这种方法有个问题就是要是那天电脑崩了，本地源文件丢失了，比较麻烦，所以这时候就可以将博客目录下的所有源文件都上传到github上面。</p><p>首先在<code>github</code>博客仓库下新建一个分支<code>hexo</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在<code>博客根目录</code>下。</p><p>然后<code>git branch -b hexo</code>切换到<code>hexo</code>分支，然后<code>git add .</code>，然后<code>git commit -m "xxx"</code>，最后<code>git push origin hexo</code>提交就行了。具体效果可以看我的博客源文件仓库：传送门。</p><p>大家也可以先用下文hexo安装方法安装完hexo，然后直接<code>git clone -b hexo https://github.com/shw2018/shw2018.github.io.git</code>克隆我的所有源文件，这是我目前修改完的基本没bug的定制化的博客，可以直接拿来用。</p><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> blog </tag>
            
            <tag> 免费博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gocui中文文档</title>
      <link href="/golang/gocui-zhong-wen-wen-dang/"/>
      <url>/golang/gocui-zhong-wen-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="package-gocui"><a href="#package-gocui" class="headerlink" title="package gocui"></a>package gocui</h2><p><code>import "github.com/jroimartin/gocui"</code><br>软件包gocui允许创建控制台用户界面。<br>创建一个新的GUI：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">,</span> err <span class="token operator">:=</span> gocui<span class="token punctuation">.</span><span class="token function">NewGui</span><span class="token punctuation">(</span>gocui<span class="token punctuation">.</span>OutputNormal<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> g<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置GUI管理器和键绑定 </span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">MainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> gocui<span class="token punctuation">.</span>ErrQuit <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>        <span class="token punctuation">}</span></code></pre><p>设置GUI管理器：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span><span class="token function">SetManager</span><span class="token punctuation">(</span>mgr1<span class="token punctuation">,</span> mgr2<span class="token punctuation">)</span></code></pre><p>管理人员负责GUI的布局，并可用于构建小部件。 在GUI主循环的每次迭代中，将执行每个已配置管理器的Layout功能。 管理器用于设置和更新应用程序的主视图，可以在执行期间自由更改它们。 另外，重要的是要提到对每个报告的事件（按键，鼠标事件，窗口大小调整等）执行主循环迭代。</p><p> GUI由视图组成，您可以将其视为缓冲区。 视图实现了io.ReadWriter接口，因此，如果您要修改它们的内容，则可以只写它们。 读取同样有效。</p><p> 使用绝对坐标创建和初始化视图：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetView</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> gocui<span class="token punctuation">.</span>ErrUnknownView <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"This is a new view"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>也可以使用相对坐标创建视图：</p><pre class=" language-go"><code class="language-go">maxX<span class="token punctuation">,</span> maxY <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetView</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> maxX<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> maxY<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> maxX<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span> maxY<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>配置按键绑定：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetKeybinding</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>KeyEnter<span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>ModNone<span class="token punctuation">,</span> fcn<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span></code></pre><p>gocui实现了对鼠标的完全支持，可以通过以下方式启用它：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span>Mouse <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>鼠标事件的处理方式与其他任何键绑定一样：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">SetKeybinding</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>MouseLeft<span class="token punctuation">,</span> gocui<span class="token punctuation">.</span>ModNone<span class="token punctuation">,</span> fcn<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span></code></pre><p>重要信息：只能以三种方式创建，销毁或更新视图：从管理器中的Layout函数，从键绑定回调或通过<code>* Gui.Update（）</code>。 原因是它允许gocui是并发安全的。 因此，如果要从goroutine更新GUI，则必须使用<code>* Gui.Update（）</code>。 例如：</p><pre class=" language-go"><code class="language-go">g<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>g <span class="token operator">*</span>gocui<span class="token punctuation">.</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    v<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token string">"viewname"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理错误</span>    <span class="token punctuation">}</span>    v<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"Writing from different goroutines"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>默认情况下，gocui提供基本的编辑模式。 可以扩展和定制此模式，以创建新的编辑器并将其分配给<code>* View.Editor</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> DefaultEditor Editor <span class="token operator">=</span> <span class="token function">EditorFunc</span><span class="token punctuation">(</span>simpleEditor<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">simpleEditor</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ch <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mod <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditWrite</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">case</span> key <span class="token operator">==</span> KeySpace<span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditWrite</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> key <span class="token operator">==</span> KeyBackspace <span class="token operator">||</span> key <span class="token operator">==</span> KeyBackspace2<span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">EditDelete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>彩色文字：<br>视图允许使用ANSI颜色添加彩色文本。 例如：</p><pre class=" language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">"\x1b[0;31mHello world"</span><span class="token punctuation">)</span></code></pre><p>有关更多信息，请参见文件夹<code>_examples /</code>中的示例。</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><h4 id="Constants-常数"><a href="#Constants-常数" class="headerlink" title="Constants(常数)"></a>Constants(常数)</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    ColorDefault Attribute <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorDefault<span class="token punctuation">)</span>    ColorBlack             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorBlack<span class="token punctuation">)</span>    ColorRed               <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorRed<span class="token punctuation">)</span>    ColorGreen             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorGreen<span class="token punctuation">)</span>    ColorYellow            <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorYellow<span class="token punctuation">)</span>    ColorBlue              <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorBlue<span class="token punctuation">)</span>    ColorMagenta           <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorMagenta<span class="token punctuation">)</span>    ColorCyan              <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorCyan<span class="token punctuation">)</span>    ColorWhite             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ColorWhite<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>颜色属性：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    AttrBold      Attribute <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrBold<span class="token punctuation">)</span>    AttrUnderline           <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrUnderline<span class="token punctuation">)</span>    AttrReverse             <span class="token operator">=</span> <span class="token function">Attribute</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>AttrReverse<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>文字样式属性：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// OutputNormal提供8色终端模式。</span>    OutputNormal <span class="token operator">=</span> <span class="token function">OutputMode</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>OutputNormal<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Output256提供256色终端模式。</span>    Output256 <span class="token operator">=</span> <span class="token function">OutputMode</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>Output256<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>特殊键：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    KeyF1         Key <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF1<span class="token punctuation">)</span>    KeyF2             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF2<span class="token punctuation">)</span>    KeyF3             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF3<span class="token punctuation">)</span>    KeyF4             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF4<span class="token punctuation">)</span>    KeyF5             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF5<span class="token punctuation">)</span>    KeyF6             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF6<span class="token punctuation">)</span>    KeyF7             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF7<span class="token punctuation">)</span>    KeyF8             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF8<span class="token punctuation">)</span>    KeyF9             <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF9<span class="token punctuation">)</span>    KeyF10            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF10<span class="token punctuation">)</span>    KeyF11            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF11<span class="token punctuation">)</span>    KeyF12            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyF12<span class="token punctuation">)</span>    KeyInsert         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyInsert<span class="token punctuation">)</span>    KeyDelete         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyDelete<span class="token punctuation">)</span>    KeyHome           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyHome<span class="token punctuation">)</span>    KeyEnd            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEnd<span class="token punctuation">)</span>    KeyPgup           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyPgup<span class="token punctuation">)</span>    KeyPgdn           <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyPgdn<span class="token punctuation">)</span>    KeyArrowUp        <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowUp<span class="token punctuation">)</span>    KeyArrowDown      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowDown<span class="token punctuation">)</span>    KeyArrowLeft      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowLeft<span class="token punctuation">)</span>    KeyArrowRight     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyArrowRight<span class="token punctuation">)</span>    MouseLeft      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseLeft<span class="token punctuation">)</span>    MouseMiddle    <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseMiddle<span class="token punctuation">)</span>    MouseRight     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseRight<span class="token punctuation">)</span>    MouseRelease   <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseRelease<span class="token punctuation">)</span>    MouseWheelUp   <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseWheelUp<span class="token punctuation">)</span>    MouseWheelDown <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>MouseWheelDown<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>按键组合</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    KeyCtrlTilde      Key <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlTilde<span class="token punctuation">)</span>    KeyCtrl2              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl2<span class="token punctuation">)</span>    KeyCtrlSpace          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlSpace<span class="token punctuation">)</span>    KeyCtrlA              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlA<span class="token punctuation">)</span>    KeyCtrlB              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlB<span class="token punctuation">)</span>    KeyCtrlC              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlC<span class="token punctuation">)</span>    KeyCtrlD              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlD<span class="token punctuation">)</span>    KeyCtrlE              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlE<span class="token punctuation">)</span>    KeyCtrlF              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlF<span class="token punctuation">)</span>    KeyCtrlG              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlG<span class="token punctuation">)</span>    KeyBackspace          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyBackspace<span class="token punctuation">)</span>    KeyCtrlH              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlH<span class="token punctuation">)</span>    KeyTab                <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyTab<span class="token punctuation">)</span>    KeyCtrlI              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlI<span class="token punctuation">)</span>    KeyCtrlJ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlJ<span class="token punctuation">)</span>    KeyCtrlK              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlK<span class="token punctuation">)</span>    KeyCtrlL              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlL<span class="token punctuation">)</span>    KeyEnter              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEnter<span class="token punctuation">)</span>    KeyCtrlM              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlM<span class="token punctuation">)</span>    KeyCtrlN              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlN<span class="token punctuation">)</span>    KeyCtrlO              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlO<span class="token punctuation">)</span>    KeyCtrlP              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlP<span class="token punctuation">)</span>    KeyCtrlQ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlQ<span class="token punctuation">)</span>    KeyCtrlR              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlR<span class="token punctuation">)</span>    KeyCtrlS              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlS<span class="token punctuation">)</span>    KeyCtrlT              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlT<span class="token punctuation">)</span>    KeyCtrlU              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlU<span class="token punctuation">)</span>    KeyCtrlV              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlV<span class="token punctuation">)</span>    KeyCtrlW              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlW<span class="token punctuation">)</span>    KeyCtrlX              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlX<span class="token punctuation">)</span>    KeyCtrlY              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlY<span class="token punctuation">)</span>    KeyCtrlZ              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlZ<span class="token punctuation">)</span>    KeyEsc                <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyEsc<span class="token punctuation">)</span>    KeyCtrlLsqBracket     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlLsqBracket<span class="token punctuation">)</span>    KeyCtrl3              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl3<span class="token punctuation">)</span>    KeyCtrl4              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl4<span class="token punctuation">)</span>    KeyCtrlBackslash      <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlBackslash<span class="token punctuation">)</span>    KeyCtrl5              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl5<span class="token punctuation">)</span>    KeyCtrlRsqBracket     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlRsqBracket<span class="token punctuation">)</span>    KeyCtrl6              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl6<span class="token punctuation">)</span>    KeyCtrl7              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl7<span class="token punctuation">)</span>    KeyCtrlSlash          <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlSlash<span class="token punctuation">)</span>    KeyCtrlUnderscore     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrlUnderscore<span class="token punctuation">)</span>    KeySpace              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeySpace<span class="token punctuation">)</span>    KeyBackspace2         <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyBackspace2<span class="token punctuation">)</span>    KeyCtrl8              <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>KeyCtrl8<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Variables（变量）"><a href="#Variables（变量）" class="headerlink" title="Variables（变量）"></a>Variables（变量）</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// ErrQuit用于确定MainLoop是否成功完成。</span>    ErrQuit <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ErrUnknownView允许断言是否初始化了View。</span>    ErrUnknownView <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown view"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="type-Attribute（类型属性）"><a href="#type-Attribute（类型属性）" class="headerlink" title="type Attribute（类型属性）"></a>type Attribute（类型属性）</h4><p>属性表示终端属性，例如颜色，字体样式等。可以使用按位或（|）进行组合。 请注意，不可能组合多个颜色属性。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Attribute termbox<span class="token punctuation">.</span>Attribute</code></pre><h4 id="type-Editor-类型编辑器）"><a href="#type-Editor-类型编辑器）" class="headerlink" title="type Editor(类型编辑器）"></a>type Editor(类型编辑器）</h4><p>gocui编辑器必须满足编辑器界面。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Editor <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">Edit</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>DefaultEditor是默认编辑器。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> DefaultEditor Editor <span class="token operator">=</span> <span class="token function">EditorFunc</span><span class="token punctuation">(</span>simpleEditor<span class="token punctuation">)</span></code></pre><h4 id="type-EditorFunc-类型EditorFunc"><a href="#type-EditorFunc-类型EditorFunc" class="headerlink" title="type EditorFunc (类型EditorFunc)"></a>type EditorFunc (类型EditorFunc)</h4><p>EditorFunc类型是一个适配器，允许将普通功能用作编辑器。 如果f是具有适当签名的函数，则EditorFunc（f）是调用f的Editor对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> EditorFunc <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span></code></pre><h5 id="func-f-EditorFunc-Edit-v-42-View-key-Key-ch-rune-mod-Modifier"><a href="#func-f-EditorFunc-Edit-v-42-View-key-Key-ch-rune-mod-Modifier" class="headerlink" title="func (f EditorFunc) Edit(v *View, key Key, ch rune, mod Modifier)"></a>func (f EditorFunc) Edit(v *View, key Key, ch rune, mod Modifier)</h5><p>编辑通话</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f EditorFunc<span class="token punctuation">)</span> <span class="token function">Edit</span><span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">,</span> key Key<span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span></code></pre><h4 id="type-Gui"><a href="#type-Gui" class="headerlink" title="type Gui"></a>type Gui</h4><p>Gui代表整个用户界面，包括视图，布局和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Gui <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BgColor和FgColor允许配置GUI的背景和前景色。</span>    BgColor<span class="token punctuation">,</span> FgColor Attribute    <span class="token comment" spellcheck="true">//SelBgColor和SelFgColor允许配置当前视图框架的背景和前景色。</span>    SelBgColor<span class="token punctuation">,</span> SelFgColor Attribute    <span class="token comment" spellcheck="true">// 如果“高光”为true，则将使用Sel {Bg，Fg} Colors绘制当前视图的框架。</span>    Highlight <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Cursor为true，则启用光标。</span>    Cursor <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Mouse为true，则将启用鼠标事件。</span>    Mouse <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果InputEsc为true，则当ESC序列在缓冲区中并且与任何已知序列都不匹配时，ESC表示KeyEsc。</span>    InputEsc <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果ASCII为true，则使用ASCII代替unicode绘制界面。 使用ASCII更可移植。</span>    ASCII <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">//包含已过滤或未导出的字段</span><span class="token punctuation">}</span></code></pre><h5 id="func-NewGui-mode-OutputMode-42-Gui-error"><a href="#func-NewGui-mode-OutputMode-42-Gui-error" class="headerlink" title="func NewGui(mode OutputMode) (*Gui, error)"></a>func NewGui(mode OutputMode) (*Gui, error)</h5><p>NewGui返回具有给定输出模式的新Gui对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewGui</span><span class="token punctuation">(</span>mode OutputMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Close"><a href="#func-g-42-Gui-Close" class="headerlink" title="func (g *Gui) Close()"></a>func (g *Gui) Close()</h5><p>关闭完成库。 在成功初始化之后并且不再需要gocui时应调用它。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-CurrentView-42-View"><a href="#func-g-42-Gui-CurrentView-42-View" class="headerlink" title="func (g *Gui) CurrentView() *View"></a>func (g *Gui) CurrentView() *View</h5><p>CurrentView返回当前焦点视图，如果没有视图拥有焦点，则返回nil。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">CurrentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>View</code></pre><h5 id="func-g-42-Gui-DeleteKeybinding-viewname-string-key-interface-mod-Modifier-error"><a href="#func-g-42-Gui-DeleteKeybinding-viewname-string-key-interface-mod-Modifier-error" class="headerlink" title="func (g *Gui) DeleteKeybinding(viewname string, key interface{}, mod Modifier) error"></a>func (g *Gui) DeleteKeybinding(viewname string, key interface{}, mod Modifier) error</h5><p>func (*Gui) DeleteKeybinding(删除绑定键）<br>DeleteKeybinding删除一个键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteKeybinding</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-DeleteKeybindings-viewname-string"><a href="#func-g-42-Gui-DeleteKeybindings-viewname-string" class="headerlink" title="func (g *Gui) DeleteKeybindings(viewname string)"></a>func (g *Gui) DeleteKeybindings(viewname string)</h5><p>删除键绑定删除视图的所有键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteKeybindings</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-DeleteView-name-string-error"><a href="#func-g-42-Gui-DeleteView-name-string-error" class="headerlink" title="func (g *Gui) DeleteView(name string) error"></a>func (g *Gui) DeleteView(name string) error</h5><p>DeleteView按名称删除视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">DeleteView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-MainLoop-error"><a href="#func-g-42-Gui-MainLoop-error" class="headerlink" title="func (g *Gui) MainLoop() error"></a>func (g *Gui) MainLoop() error</h5><p>MainLoop运行主循环，直到返回错误。 成功完成后应返回ErrQuit。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">MainLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-Rune-x-y-int-rune-error"><a href="#func-g-42-Gui-Rune-x-y-int-rune-error" class="headerlink" title="func (g *Gui) Rune(x, y int) (rune, error)"></a>func (g *Gui) Rune(x, y int) (rune, error)</h5><p>符文返回给定位置的单元格中包含的符文。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Rune</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">rune</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetCurrentView-name-string-42-View-error"><a href="#func-g-42-Gui-SetCurrentView-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetCurrentView(name string) (*View, error)"></a>func (g *Gui) SetCurrentView(name string) (*View, error)</h5><p>SetCurrentView将焦点赋予给定视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetCurrentView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetKeybinding-viewname-string-key-interface-mod-Modifier-handler-func-42-Gui-42-View-error-error"><a href="#func-g-42-Gui-SetKeybinding-viewname-string-key-interface-mod-Modifier-handler-func-42-Gui-42-View-error-error" class="headerlink" title="func (g *Gui) SetKeybinding(viewname string, key interface{}, mod Modifier, handler func(*Gui, *View) error) error"></a>func (g *Gui) SetKeybinding(viewname string, key interface{}, mod Modifier, handler func(*Gui, *View) error) error</h5><p>SetKeybinding创建一个新的键绑定。 如果viewname等于“”（空字符串），则绑定将应用于所有视图。 密钥必须是符文或密钥。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetKeybinding</span><span class="token punctuation">(</span>viewname <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mod Modifier<span class="token punctuation">,</span> handler <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">,</span> <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-SetManager-managers-…Manager"><a href="#func-g-42-Gui-SetManager-managers-…Manager" class="headerlink" title="func (g *Gui) SetManager(managers …Manager)"></a>func (g *Gui) SetManager(managers …Manager)</h5><p>SetManager设置给定的GUI管理器。 它将删除所有视图和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetManager</span><span class="token punctuation">(</span>managers <span class="token operator">...</span>Manager<span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetManagerFunc-manager-func-42-Gui-error"><a href="#func-g-42-Gui-SetManagerFunc-manager-func-42-Gui-error" class="headerlink" title="func (g *Gui) SetManagerFunc(manager func(*Gui) error)"></a>func (g *Gui) SetManagerFunc(manager func(*Gui) error)</h5><p>SetManagerFunc设置给定的管理器功能。 它将删除所有视图和键绑定。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetManagerFunc</span><span class="token punctuation">(</span>manager <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetRune-x-y-int-ch-rune-fgColor-bgColor-Attribute-error"><a href="#func-g-42-Gui-SetRune-x-y-int-ch-rune-fgColor-bgColor-Attribute-error" class="headerlink" title="func (g *Gui) SetRune(x, y int, ch rune, fgColor, bgColor Attribute) error"></a>func (g *Gui) SetRune(x, y int, ch rune, fgColor, bgColor Attribute) error</h5><p>SetRune在相对于终端左上角的给定点写入一个符文。 它检查该位置是否有效并应用给定的颜色。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetRune</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">,</span> ch <span class="token builtin">rune</span><span class="token punctuation">,</span> fgColor<span class="token punctuation">,</span> bgColor Attribute<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-g-42-Gui-SetView-name-string-x0-y0-x1-y1-int-42-View-error"><a href="#func-g-42-Gui-SetView-name-string-x0-y0-x1-y1-int-42-View-error" class="headerlink" title="func (g *Gui) SetView(name string, x0, y0, x1, y1 int) (*View, error)"></a>func (g *Gui) SetView(name string, x0, y0, x1, y1 int) (*View, error)</h5><p>SetView创建一个新视图，其左上角为（x0，y0），右下角为（x1，y1）。 如果已经存在相同名称的视图，则其尺寸将更新； 否则，返回错误ErrUnknownView，该错误允许断言View是否必须初始化。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetView</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetViewOnBottom-name-string-42-View-error"><a href="#func-g-42-Gui-SetViewOnBottom-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetViewOnBottom(name string) (*View, error)"></a>func (g *Gui) SetViewOnBottom(name string) (*View, error)</h5><p>SetViewOnBottom将给定视图设置在现有视图的底部。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetViewOnBottom</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-SetViewOnTop-name-string-42-View-error"><a href="#func-g-42-Gui-SetViewOnTop-name-string-42-View-error" class="headerlink" title="func (g *Gui) SetViewOnTop(name string) (*View, error)"></a>func (g *Gui) SetViewOnTop(name string) (*View, error)</h5><p>SetViewOnTop将给定视图设置在现有视图之上。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">SetViewOnTop</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Size-x-y-int"><a href="#func-g-42-Gui-Size-x-y-int" class="headerlink" title="func (g *Gui) Size() (x, y int)"></a>func (g *Gui) Size() (x, y int)</h5><p>Size返回终端的大小。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Update-f-func-42-Gui-error"><a href="#func-g-42-Gui-Update-f-func-42-Gui-error" class="headerlink" title="func (g *Gui) Update(f func(*Gui) error)"></a>func (g *Gui) Update(f func(*Gui) error)</h5><p>Update执行传递的函数。 可以从goroutine安全地调用此方法以更新GUI。 重要的是要注意，传递的函数不会立即执行，而是会添加到用户事件队列中。 鉴于Update产生了一个goroutine，因此不能保证处理用户事件的顺序。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-View-name-string-42-View-error"><a href="#func-g-42-Gui-View-name-string-42-View-error" class="headerlink" title="func (g *Gui) View(name string) (*View, error)"></a>func (g *Gui) View(name string) (*View, error)</h5><p>视图返回指向给定名称的视图的指针，如果不存在具有该名称的视图，则返回错误ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">View</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-ViewByPosition-x-y-int-42-View-error"><a href="#func-g-42-Gui-ViewByPosition-x-y-int-42-View-error" class="headerlink" title="func (g *Gui) ViewByPosition(x, y int) (*View, error)"></a>func (g *Gui) ViewByPosition(x, y int) (*View, error)</h5><p>ViewByPosition返回指向与给定位置匹配的视图的指针，如果该位置的视图不存在，则返回错误ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">ViewByPosition</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>View<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-ViewPosition-name-string-x0-y0-x1-y1-int-err-error"><a href="#func-g-42-Gui-ViewPosition-name-string-x0-y0-x1-y1-int-err-error" class="headerlink" title="func (g *Gui) ViewPosition(name string) (x0, y0, x1, y1 int, err error)"></a>func (g *Gui) ViewPosition(name string) (x0, y0, x1, y1 int, err error)</h5><p>ViewPosition返回具有给定名称的视图的坐标，如果不存在具有该名称的视图，则返回ErrUnknownView。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">ViewPosition</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-g-42-Gui-Views-42-View"><a href="#func-g-42-Gui-Views-42-View" class="headerlink" title="func (g *Gui) Views() []*View"></a>func (g *Gui) Views() []*View</h5><p>视图返回GUI中的所有视图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token function">Views</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>View</code></pre><h4 id="type-Key"><a href="#type-Key" class="headerlink" title="type Key"></a>type Key</h4><p>键代表特殊键或组合键。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Key termbox<span class="token punctuation">.</span>Key</code></pre><h4 id="type-Manager"><a href="#type-Manager" class="headerlink" title="type Manager"></a>type Manager</h4><p>经理负责GUI的布局，可用于构建小部件。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Manager <span class="token keyword">interface</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 每次重新绘制GUI时都会调用布局，该布局必须包含基本视图及其初始化。</span>        <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span>        <span class="token punctuation">}</span></code></pre><h4 id="type-ManagerFunc"><a href="#type-ManagerFunc" class="headerlink" title="type ManagerFunc"></a>type ManagerFunc</h4><p>ManagerFunc类型是一种适配器，允许将普通功能用作Manager。 如果f是具有适当签名的函数，则ManagerFunc（f）是调用f的Manager对象。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> ManagerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-f-ManagerFunc-Layout-g-42-Gui-error"><a href="#func-f-ManagerFunc-Layout-g-42-Gui-error" class="headerlink" title="func (f ManagerFunc) Layout(g *Gui) error"></a>func (f ManagerFunc) Layout(g *Gui) error</h5><p>布局调用f（g）</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>f ManagerFunc<span class="token punctuation">)</span> <span class="token function">Layout</span><span class="token punctuation">(</span>g <span class="token operator">*</span>Gui<span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h4 id="type-Modifier"><a href="#type-Modifier" class="headerlink" title="type Modifier"></a>type Modifier</h4><p>修饰符允许定义特殊的按键组合。 定义新的键绑定时，可以将它们与“键”或“符文”结合使用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Modifier termbox<span class="token punctuation">.</span>Modifier</code></pre><p>修饰符。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    ModNone Modifier <span class="token operator">=</span> <span class="token function">Modifier</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    ModAlt           <span class="token operator">=</span> <span class="token function">Modifier</span><span class="token punctuation">(</span>termbox<span class="token punctuation">.</span>ModAlt<span class="token punctuation">)</span>    <span class="token punctuation">)</span></code></pre><h4 id="type-OutputMode"><a href="#type-OutputMode" class="headerlink" title="type OutputMode"></a>type OutputMode</h4><p>OutputMode表示终端的输出模式（8或256色）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> OutputMode termbox<span class="token punctuation">.</span>OutputMode</code></pre><h4 id="type-View"><a href="#type-View" class="headerlink" title="type View"></a>type View</h4><p>视图是一个窗口。 它维护自己的内部缓冲区和光标位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> View <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BgColor和FgColor允许配置视图的背景和前景色。</span>    BgColor<span class="token punctuation">,</span> FgColor Attribute    <span class="token comment" spellcheck="true">// SelBgColor和SelFgColor用于配置选定线的突出显示时的背景色和前景色。</span>    SelBgColor<span class="token punctuation">,</span> SelFgColor Attribute    <span class="token comment" spellcheck="true">// 如果Editable为true，则击键将添加到视图的内部缓冲区的光标位置。</span>    Editable <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 编辑器允许定义管理版本模式的编辑器，包括键绑定或光标行为。 默认情况下使用DefaultEditor。</span>    Editor Editor    <span class="token comment" spellcheck="true">// 覆盖启用或禁用视图的覆盖模式。</span>    Overwrite <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果“高光”为true，则Sel {Bg，Fg} Colors将用于光标位置下方的行。</span>    Highlight <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Frame为true，则将在视图周围绘制边框。</span>    Frame <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Wrap为true，则写入到此View的内容长于其宽度时将自动进行包装。 如果为true，则将忽略视图的x起点。</span>    Wrap <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Autoscroll为true，则在文本溢出时，视图将自动向下滚动。 如果为true，则将忽略视图的y起点。</span>    Autoscroll <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 如果Frame为true，则Title可以为视图配置标题。</span>    Title <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 如果Mask为true，则View将显示遮罩而不是实际内容</span>    Mask <span class="token builtin">rune</span>    <span class="token comment" spellcheck="true">// 包含过滤或未导出的字段</span><span class="token punctuation">}</span></code></pre><h5 id="func-v-42-View-Buffer-string"><a href="#func-v-42-View-Buffer-string" class="headerlink" title="func (v *View) Buffer() string"></a>func (v *View) Buffer() string</h5><p>Buffer返回一个字符串，其中包含视图内部缓冲区的内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-BufferLines-string"><a href="#func-v-42-View-BufferLines-string" class="headerlink" title="func (v *View) BufferLines() []string"></a>func (v *View) BufferLines() []string</h5><p>BufferLines返回视图内部缓冲区中的行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">BufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Clear"><a href="#func-v-42-View-Clear" class="headerlink" title="func (v *View) Clear()"></a>func (v *View) Clear()</h5><p>清除清空视图的内部缓冲区。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Cursor-x-y-int"><a href="#func-v-42-View-Cursor-x-y-int" class="headerlink" title="func (v *View) Cursor() (x, y int)"></a>func (v *View) Cursor() (x, y int)</h5><p>光标返回视图的光标位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditDelete-back-bool"><a href="#func-v-42-View-EditDelete-back-bool" class="headerlink" title="func (v *View) EditDelete(back bool)"></a>func (v *View) EditDelete(back bool)</h5><p>EditDelete删除光标位置的符文。 back确定方向。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditDelete</span><span class="token punctuation">(</span>back <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditNewLine"><a href="#func-v-42-View-EditNewLine" class="headerlink" title="func (v *View) EditNewLine()"></a>func (v *View) EditNewLine()</h5><p>EditNewLine在光标下插入新行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditWrite</span><span class="token punctuation">(</span>ch <span class="token builtin">rune</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-EditWrite-ch-rune"><a href="#func-v-42-View-EditWrite-ch-rune" class="headerlink" title="func (v *View) EditWrite(ch rune)"></a>func (v *View) EditWrite(ch rune)</h5><p>EditWrite在光标位置写入一个符文。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">EditWrite</span><span class="token punctuation">(</span>ch <span class="token builtin">rune</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Line-y-int-string-error"><a href="#func-v-42-View-Line-y-int-string-error" class="headerlink" title="func (v *View) Line(y int) (string, error)"></a>func (v *View) Line(y int) (string, error)</h5><p>Line返回一个字符串，该字符串的视图内部缓冲区的线位于与点（x，y）对应的位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Line</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-MoveCursor-dx-dy-int-writeMode-bool"><a href="#func-v-42-View-MoveCursor-dx-dy-int-writeMode-bool" class="headerlink" title="func (v *View) MoveCursor(dx, dy int, writeMode bool)"></a>func (v *View) MoveCursor(dx, dy int, writeMode bool)</h5><p>MoveCursor会考虑线/视图的宽度来移动光标，并在必要时替换原点。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">MoveCursor</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy <span class="token builtin">int</span><span class="token punctuation">,</span> writeMode <span class="token builtin">bool</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Name-string"><a href="#func-v-42-View-Name-string" class="headerlink" title="func (v *View) Name() string"></a>func (v *View) Name() string</h5><p>名称返回视图的名称。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Origin-x-y-int"><a href="#func-v-42-View-Origin-x-y-int" class="headerlink" title="func (v *View) Origin() (x, y int)"></a>func (v *View) Origin() (x, y int)</h5><p>原点返回视图的原点位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Read-p-byte-n-int-err-error"><a href="#func-v-42-View-Read-p-byte-n-int-err-error" class="headerlink" title="func (v *View) Read(p []byte) (n int, err error)"></a>func (v *View) Read(p []byte) (n int, err error)</h5><p>读取将数据读入p。 它返回读入p的字节数。 在EOF，err将为io.EOF。 在Rewind（）之后调用Read（）可使高速缓存用视图的内容刷新。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Rewind"><a href="#func-v-42-View-Rewind" class="headerlink" title="func (v *View) Rewind()"></a>func (v *View) Rewind()</h5><p>Rewind将下一个Read的偏移量设置为0，这也会刷新read缓存。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-SetCursor-x-y-int-error"><a href="#func-v-42-View-SetCursor-x-y-int-error" class="headerlink" title="func (v *View) SetCursor(x, y int) error"></a>func (v *View) SetCursor(x, y int) error</h5><p>SetCursor设置视图在给定点相对于视图的光标位置。 它检查位置是否有效。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">SetCursor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-v-42-View-SetOrigin-x-y-int-error"><a href="#func-v-42-View-SetOrigin-x-y-int-error" class="headerlink" title="func (v *View) SetOrigin(x, y int) error"></a>func (v *View) SetOrigin(x, y int) error</h5><p>SetOrigin设置视图内部缓冲区的原点位置，因此从此点开始打印缓冲区，这意味着它已与原点连接。 它可以用于仅通过增加和减少ox和oy来实现水平和垂直滚动。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">SetOrigin</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span></code></pre><h5 id="func-v-42-View-Size-x-y-int"><a href="#func-v-42-View-Size-x-y-int" class="headerlink" title="func (v *View) Size() (x, y int)"></a>func (v *View) Size() (x, y int)</h5><p>大小返回视图中可见列和行的数量。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-ViewBuffer-string"><a href="#func-v-42-View-ViewBuffer-string" class="headerlink" title="func (v *View) ViewBuffer() string"></a>func (v *View) ViewBuffer() string</h5><p>ViewBuffer返回一个字符串，其中包含显示给用户的视图缓冲区的内容。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">ViewBufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-ViewBufferLines-string"><a href="#func-v-42-View-ViewBufferLines-string" class="headerlink" title="func (v *View) ViewBufferLines() []string"></a>func (v *View) ViewBufferLines() []string</h5><p>ViewBufferLines返回视图的内部缓冲区中显示给用户的行。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">ViewBufferLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></code></pre><h5 id="func-v-42-View-Word-x-y-int-string-error"><a href="#func-v-42-View-Word-x-y-int-string-error" class="headerlink" title="func (v *View) Word(x, y int) (string, error)"></a>func (v *View) Word(x, y int) (string, error)</h5><p>Word返回一个字符串，该字符串的视图内部缓冲区的单词位于与点（x，y）对应的位置。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Word</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><h5 id="func-v-42-View-Write-p-byte-n-int-err-error"><a href="#func-v-42-View-Write-p-byte-n-int-err-error" class="headerlink" title="func (v *View) Write(p []byte) (n int, err error)"></a>func (v *View) Write(p []byte) (n int, err error)</h5><p>写操作将字节切片追加到视图的内部缓冲区中。 由于View实现io.Writer接口，因此可以将其作为fmt.Fprintf，fmt.Fprintln，io.Copy等函数的参数传递。必须调用Clear来清除视图的缓冲区。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>View<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre><blockquote><p>gocui 是一个 Go 语言用来开发控制台应用的 UI 工具包。手工翻译自GoDoc，如有错误，欢迎及时提出。致谢～～<br>GoDoc: <a href="https://github.com/jroimartin/gocui" target="_blank" rel="noopener">https://github.com/jroimartin/gocui</a><br>项目地址： <a href="https://github.com/jroimartin/gocui" target="_blank" rel="noopener">https://github.com/jroimartin/gocui</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Go语言 </tag>
            
            <tag> gocui </tag>
            
            <tag> 命令行界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdow语法教程</title>
      <link href="/hexo/markdow-yu-fa-jiao-cheng/"/>
      <url>/hexo/markdow-yu-fa-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-Material主题配置测试"><a href="#Hexo-Material主题配置测试" class="headerlink" title="Hexo+Material主题配置测试"></a>Hexo+Material主题配置测试</h2><h3 id="markdown的标题写法"><a href="#markdown的标题写法" class="headerlink" title="markdown的标题写法"></a>markdown的标题写法</h3><h4 id="一到六级标题写法"><a href="#一到六级标题写法" class="headerlink" title="一到六级标题写法"></a>一到六级标题写法</h4><p>标题用“<code>#</code>+<code>空格</code>”来写，一级标题一个<code>#</code>号，二级标题<code>##</code>，最多支持六级标题。一点要记得在<code>#</code>后面加上一个<code>空格</code>。代码如下：</p><pre class=" language-Yml"><code class="language-Yml"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>显示效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="一级二级标题另外一种写法"><a href="#一级二级标题另外一种写法" class="headerlink" title="一级二级标题另外一种写法"></a>一级二级标题另外一种写法</h4><p>另外一种写法是在标题内容的下一行对应的位置用<code>======</code>号或者<code>------</code>标识出来。这种方法只能写一级和二级标题，如需其它级别标题请用<code>#</code>号加空格的方法。显示效果如下：</p><h1 id="用＝标识出来的一级标题"><a href="#用＝标识出来的一级标题" class="headerlink" title="用＝标识出来的一级标题"></a>用＝标识出来的一级标题</h1><h2 id="用-标识出来的二级标题"><a href="#用-标识出来的二级标题" class="headerlink" title="用-标识出来的二级标题"></a>用-标识出来的二级标题</h2><p>代码如下：</p><pre><code>用＝标识出来的一级标题====================用-标识出来的二级标题----------------------</code></pre><h2 id="段落字体写法"><a href="#段落字体写法" class="headerlink" title="段落字体写法"></a>段落字体写法</h2><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车。</strong></p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体写法有如下几种：</p><pre><code>`红色高亮`__粗体___斜体____粗斜体___~删除线~&lt;u&gt;下划线&lt;/u&gt;</code></pre><p><code>红色高亮</code><br><strong>粗体</strong><br><em>斜体</em><br><strong><em>粗斜体</em></strong><br><del>删除线</del><br><u>下划线</u><br>另外单独说一下，粗体，斜体，粗斜体用到的下划线<code>_</code>也可以用星号<code>*</code>来标识。他俩的区别就是列表，下划线<code>_</code>可以在列表内使用包括无序列表和有序列表，星号如果在列表内使用就会跳出列表，效果相当于标题。切记。<br>以上代码都可以画分割线</p><h4 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h4><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code>符号 ，然后后面紧跟一个<code>空格</code>符号：</p><pre><code>&gt; 这里是区块引用&gt; 区块引用&gt; &gt; 多级区块引用</code></pre><p>显示效果如下：</p><blockquote><p>这里是区块引用<br>区块引用</p><blockquote><p>多级区块引用</p></blockquote></blockquote><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>超链接这样使用<code>[显示文字](链接地址)</code>或者<code>&lt;链接地址&gt;</code>。如下：</p><pre><code>我是第一种超链接[谷歌](https://www.google.com)一般人打不开的。我是第二种链接，谷歌的网址是&lt;https://www.google.com&gt;吗？？</code></pre><p>显示效果如下：<br>我是第一种超链接<a href="https://www.google.com" target="_blank" rel="noopener">谷歌</a>一般人打不开的。<br>我是第二种链接，谷歌的网址是<a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a>吗？？</p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>文章内容添加图片这样写<code>![alt 属性文本](图片地址 "可选标题)</code>。如下代码：</p><pre><code>![好看的奶](IM064636.jpg "可选标题")这里测试文章内容插入图片。图片如下![美女1.JPG](1.jpg "美女")图片插入完成。</code></pre><p>显示效果如下：<br><img src="IM064636.jpg" alt="好看的奶" title="可选标题"><br>这里测试文章内容插入图片。图片如下<img src="1.jpg" alt="美女1.JPG" title="美女">图片插入完成。</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>看表格的代码，主意第三行文字和第四行数字，不一定要对齐，但是对齐的话比较好看，在一个出来BUG容易定位修改。下面看代码：</p><pre><code>|左对齐|这里是居中|右对齐||:-----|:--------:|-----:||左|中|右||111111|2222222222|333333|</code></pre><p>显示效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">这里是居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr><tr><td align="left">111111</td><td align="center">2222222222</td><td align="right">333333</td></tr></tbody></table><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><pre><code>__加粗__\_\_正常显示\_\_</code></pre><p>显示效果如下：<br><strong>加粗</strong><br>**正常显示**<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>{}</td><td>花括号</td><td>[]</td><td>放括号</td></tr><tr><td>()</td><td>小括号</td><td>\</td><td>反斜杠</td></tr><tr><td>`</td><td>反引号</td><td>*</td><td>星号</td></tr><tr><td>_</td><td>下划线</td><td>#</td><td>井号</td></tr><tr><td>+</td><td>加号</td><td>-</td><td>减号</td></tr><tr><td>!</td><td>英文叹号</td><td>.</td><td>英文句号</td></tr></tbody></table><h4 id="特殊技巧"><a href="#特殊技巧" class="headerlink" title="特殊技巧"></a>特殊技巧</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：&lt;kbd&gt;，&lt;b&gt;，&lt;i&gt;，&lt;em&gt;，&lt;sup&gt;，&lt;sub&gt;，&lt;br&gt;等。这里就不再演示了，有想法的自己去试试吧。<br>想想还是演示一下吧，反正闲着也是闲着。代码如下：</p><pre><code>下标&lt;sub&gt;8&lt;/sub&gt;上标&lt;sup&gt;TM&lt;/sup&gt;&lt;em&gt;强调斜体&lt;/em&gt;&lt;i&gt;普通斜体&lt;/i&gt;&lt;b&gt;加粗&lt;/b&gt;换&lt;br&gt;行&lt;kbd&gt;Ctrl&lt;/kbd&gt;</code></pre><p>演示效果如下：<br>下标<sub>8</sub><br>上标<sup>TM</sup><br><em>强调斜体</em><br><i>普通斜体</i><br><b>加粗</b><br>换<br>行<br><kbd>Ctrl</kbd></p><h2 id="有关列表用法"><a href="#有关列表用法" class="headerlink" title="有关列表用法"></a>有关列表用法</h2><p>列表分有序列表和无序列表，先说无序列表吧。无序列表用<code>*</code>、<code>+</code>或者<code>-</code>等符号在加上一个<code>空格</code>来表示。有序列表就有数字加一个英文句号<code>1.</code>在跟上一个空格来表示。代码如下：</p><pre><code>+ 无序列表* 无序列表- 无序列表1. 有序列表3. 有序列表</code></pre><p>显示效果：</p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li></ol><p>细心的你一定发现了，代码最后一行的有序列表，明明是3，为啥显示出来变2了？这是因为markdown会自动给你排序，你的<code>3.</code>只是告诉markdown这是一个有序列表，markdown会自动给你排序的。关键是同一级别里面的第一项有序列表的写法，如果第一个有序列表你就写<code>8.</code>，那他就会认为这是从第八项开始列表，你写的第二项不管是数字几，都会显示<code>9.</code>。你搞明白了吗？</p><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套也很方便，只要在下一级列表前面加上一个TAB键就可以了。有序列表和无序列表写法一样。代码如下：<br>显示效果：</p><ol><li>我这里第一项有序列表就写8了</li><li>第二项有序列表写2了<ul><li>这是二级列表了</li></ul><ul><li>二级列表</li></ul><ul><li>二级列表</li></ul></li><li>第三项写99了昂</li></ol><p>显示效果如下：</p><pre><code>1. 我这里第一项有序列表就写8了2. 第二项有序列表写2了    * 这是二级列表了    - 二级列表    + 二级列表9. 第三项写99了昂</code></pre><p>另外，其实吧，加空格也能显示二级列表，4个以上的空格就能显示二级列表了。这里用的TAB键，因为我还要退出列表啊。我空一行退出一级列表，这里的二级列表我空两行就能退出来了。要是用4个空格写的话，我需要空四行才能推倒一级列表，在空四行才能退出列表。我自己都记不住写到内容在哪一级列表内了。不让TAB方便。所以还是建议用TAB键来写多级列表。</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>分隔线用5个以上的<code>*</code>、<code>-</code>、<code>_</code>来表示。如下：</p><pre><code>------_________* * * * *- - - - -_ _ _ _ _</code></pre><p>显示效果如下：</p><hr><hr><hr><hr><hr><p>以上代码都可以画分割线</p><h2 id="引用区块加列表"><a href="#引用区块加列表" class="headerlink" title="引用区块加列表"></a>引用区块加列表</h2><p>这个也不难，看效果：</p><blockquote><p>这里是引用区块</p><ul><li>这里是列表</li><li>引用区块</li><li>引用区块</li></ul></blockquote><p>代码如下：</p><pre><code>&gt; 这里是引用区块&gt; + 这里是列表&gt; + 引用区块&gt; + 引用区块</code></pre><p>一定要记住，一级列表用一个空行退出，二级列表用两个空行退出。哪怕你在代码块或者引用区块的列表都算。因为markdown比较笨，他分不出代码块里的列表是用来显示的。这算一个Bug吗？应该算吧。这也我为啥要把列表和列表嵌套写在最后面的原因，真的记不住自己到底写了多少级列表用了多少个空格。<br>在来试试列表里面的引用区块吧。</p><ul><li>列表第一项</li><li>列表第二项<blockquote><p>引用区块<br>引用区块第二行</p></blockquote></li><li>列表第三项</li></ul><p>代码是这样写的：</p><pre><code>+ 列表第一项+ 列表第二项&gt; 引用区块&gt; 引用区块第二行+ 列表第三项</code></pre><h2 id="关于代码块"><a href="#关于代码块" class="headerlink" title="关于代码块"></a>关于代码块</h2><p>差点忘记代码块的写法，用三个反引号来写代码块，看代码如下：</p><pre class=" language-html"><code class="language-html">```这里是代码...```</code></pre><h2 id="下载按钮代码"><a href="#下载按钮代码" class="headerlink" title="下载按钮代码"></a>下载按钮代码</h2><p>找了一个下载按钮的代码，看着不赖就收了。呵呵。先看看效果吧。使用的时候代码上下个空一行。</p><div class="Donw_socold"><a id="id" download="filename" href="####">Download</a><span class="up">上提示框</span><span class="down">下提示框</span></div><p>代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Donw_socold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>####<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下提示框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>不知道写啥了，在放一张图片引狼吧。嘿嘿<br><img src="2.jpg" alt="引狼" title="引狼"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdow </tag>
            
            <tag> Hexo </tag>
            
            <tag> Material </tag>
            
            <tag> Hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
